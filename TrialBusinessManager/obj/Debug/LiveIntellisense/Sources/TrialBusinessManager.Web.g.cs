//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrialBusinessManager
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using TrialBusinessManager.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace TrialBusinessManager.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AgroDomainService' DomainService.
    /// </summary>
    public sealed partial class AgroDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AgroDomainContext"/> class.
        /// </summary>
        public AgroDomainContext() : 
                this(new WebDomainClient<IAgroDomainServiceContract>(new Uri("TrialBusinessManager-Web-AgroDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AgroDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AgroDomainService service URI.</param>
        public AgroDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IAgroDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AgroDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AgroDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="BillPaymentInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<BillPaymentInfo> BillPaymentInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BillPaymentInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="BillPayment"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<BillPayment> BillPayments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BillPayment>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="BillProductInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<BillProductInfo> BillProductInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BillProductInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Bill"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Bill> Bills
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Bill>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Commission"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Commission> Commissions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Commission>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Dealer"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Dealer> Dealers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Dealer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DueInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<DueInfo> DueInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DueInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Employee"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Employee> Employees
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Employee>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ExpenditureInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<ExpenditureInfo> ExpenditureInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ExpenditureInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Expenditure"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Expenditure> Expenditures
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Expenditure>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="IndentProductInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<IndentProductInfo> IndentProductInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<IndentProductInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Indent"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Indent> Indents
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Indent>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Inventory"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Inventory> Inventories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Inventory>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="InventoryLog"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<InventoryLog> InventoryLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<InventoryLog>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="InventoryPackageInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<InventoryPackageInfo> InventoryPackageInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<InventoryPackageInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="InventoryProductInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<InventoryProductInfo> InventoryProductInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<InventoryProductInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Ledger"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Ledger> Ledgers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Ledger>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MessageDelivery"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<MessageDelivery> MessageDeliveries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MessageDelivery>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Message"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Message> Messages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Message>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MRRPackageInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<MRRPackageInfo> MRRPackageInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MRRPackageInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MRRProductInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<MRRProductInfo> MRRProductInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MRRProductInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MRR"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<MRR> MRRs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MRR>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NoticeBoard"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<NoticeBoard> NoticeBoards
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NoticeBoard>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Package"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Package> Packages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Package>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Person"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Person> Persons
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Person>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PLRPackageInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<PLRPackageInfo> PLRPackageInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PLRPackageInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PLRProductInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<PLRProductInfo> PLRProductInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PLRProductInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PLR"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<PLR> PLRs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PLR>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProductEdit"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<ProductEdit> ProductEdits
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProductEdit>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Product"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Product> Products
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Product>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Promotion"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Promotion> Promotions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Promotion>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Region"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Region> Regions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Region>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegionTarget"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<RegionTarget> RegionTargets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegionTarget>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RequisitionPackageInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<RequisitionPackageInfo> RequisitionPackageInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RequisitionPackageInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RequisitionProductInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<RequisitionProductInfo> RequisitionProductInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RequisitionProductInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Requisition"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<Requisition> Requisitions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Requisition>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SalesOfficerTarget"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<SalesOfficerTarget> SalesOfficerTargets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SalesOfficerTarget>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SalesReturnInfo"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<SalesReturnInfo> SalesReturnInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SalesReturnInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SalesReturn"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<SalesReturn> SalesReturns
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SalesReturn>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TransportationLoss"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<TransportationLoss> TransportationLosses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TransportationLoss>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="YearSummaryDealer"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<YearSummaryDealer> YearSummaryDealers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<YearSummaryDealer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="YearSummaryInventoryPackage"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<YearSummaryInventoryPackage> YearSummaryInventoryPackages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<YearSummaryInventoryPackage>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="YearSummaryInventoryProduct"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<YearSummaryInventoryProduct> YearSummaryInventoryProducts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<YearSummaryInventoryProduct>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="YearSummarySOExpenditure"/> entity instances that have been loaded into this <see cref="AgroDomainContext"/> instance.
        /// </summary>
        public EntitySet<YearSummarySOExpenditure> YearSummarySOExpenditures
        {
            get
            {
                return base.EntityContainer.GetEntitySet<YearSummarySOExpenditure>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BillPaymentInfo"/> entity instances using the 'GetBillPaymentInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BillPaymentInfo"/> entity instances.</returns>
        public EntityQuery<BillPaymentInfo> GetBillPaymentInfoesQuery()
        {
            this.ValidateMethod("GetBillPaymentInfoesQuery", null);
            return base.CreateQuery<BillPaymentInfo>("GetBillPaymentInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BillPayment"/> entity instances using the 'GetBillPayments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BillPayment"/> entity instances.</returns>
        public EntityQuery<BillPayment> GetBillPaymentsQuery()
        {
            this.ValidateMethod("GetBillPaymentsQuery", null);
            return base.CreateQuery<BillPayment>("GetBillPayments", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BillProductInfo"/> entity instances using the 'GetBillProductInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BillProductInfo"/> entity instances.</returns>
        public EntityQuery<BillProductInfo> GetBillProductInfoesQuery()
        {
            this.ValidateMethod("GetBillProductInfoesQuery", null);
            return base.CreateQuery<BillProductInfo>("GetBillProductInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Bill"/> entity instances using the 'GetBills' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Bill"/> entity instances.</returns>
        public EntityQuery<Bill> GetBillsQuery()
        {
            this.ValidateMethod("GetBillsQuery", null);
            return base.CreateQuery<Bill>("GetBills", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Commission"/> entity instances using the 'GetCommissions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Commission"/> entity instances.</returns>
        public EntityQuery<Commission> GetCommissionsQuery()
        {
            this.ValidateMethod("GetCommissionsQuery", null);
            return base.CreateQuery<Commission>("GetCommissions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Dealer"/> entity instances using the 'GetDealerByID' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Dealer"/> entity instances.</returns>
        public EntityQuery<Dealer> GetDealerByIDQuery(long id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetDealerByIDQuery", parameters);
            return base.CreateQuery<Dealer>("GetDealerByID", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Dealer"/> entity instances using the 'GetDealers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Dealer"/> entity instances.</returns>
        public EntityQuery<Dealer> GetDealersQuery()
        {
            this.ValidateMethod("GetDealersQuery", null);
            return base.CreateQuery<Dealer>("GetDealers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DueInfo"/> entity instances using the 'GetDueInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DueInfo"/> entity instances.</returns>
        public EntityQuery<DueInfo> GetDueInfoesQuery()
        {
            this.ValidateMethod("GetDueInfoesQuery", null);
            return base.CreateQuery<DueInfo>("GetDueInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entity instances using the 'GetEmployees' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entity instances.</returns>
        public EntityQuery<Employee> GetEmployeesQuery()
        {
            this.ValidateMethod("GetEmployeesQuery", null);
            return base.CreateQuery<Employee>("GetEmployees", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entity instances using the 'GetEmployeesByUsername' query.
        /// </summary>
        /// <param name="Username">The value for the 'Username' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entity instances.</returns>
        public EntityQuery<Employee> GetEmployeesByUsernameQuery(string Username)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Username", Username);
            this.ValidateMethod("GetEmployeesByUsernameQuery", parameters);
            return base.CreateQuery<Employee>("GetEmployeesByUsername", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ExpenditureInfo"/> entity instances using the 'GetExpenditureInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ExpenditureInfo"/> entity instances.</returns>
        public EntityQuery<ExpenditureInfo> GetExpenditureInfoesQuery()
        {
            this.ValidateMethod("GetExpenditureInfoesQuery", null);
            return base.CreateQuery<ExpenditureInfo>("GetExpenditureInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Expenditure"/> entity instances using the 'GetExpenditures' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Expenditure"/> entity instances.</returns>
        public EntityQuery<Expenditure> GetExpendituresQuery()
        {
            this.ValidateMethod("GetExpendituresQuery", null);
            return base.CreateQuery<Expenditure>("GetExpenditures", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="IndentProductInfo"/> entity instances using the 'GetIndentProductInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="IndentProductInfo"/> entity instances.</returns>
        public EntityQuery<IndentProductInfo> GetIndentProductInfoesQuery()
        {
            this.ValidateMethod("GetIndentProductInfoesQuery", null);
            return base.CreateQuery<IndentProductInfo>("GetIndentProductInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Indent"/> entity instances using the 'GetIndents' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Indent"/> entity instances.</returns>
        public EntityQuery<Indent> GetIndentsQuery()
        {
            this.ValidateMethod("GetIndentsQuery", null);
            return base.CreateQuery<Indent>("GetIndents", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Inventory"/> entity instances using the 'GetInventories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Inventory"/> entity instances.</returns>
        public EntityQuery<Inventory> GetInventoriesQuery()
        {
            this.ValidateMethod("GetInventoriesQuery", null);
            return base.CreateQuery<Inventory>("GetInventories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Inventory"/> entity instances using the 'GetInventoryByRegionId' query.
        /// </summary>
        /// <param name="regionID">The value for the 'regionID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Inventory"/> entity instances.</returns>
        public EntityQuery<Inventory> GetInventoryByRegionIdQuery(long regionID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("regionID", regionID);
            this.ValidateMethod("GetInventoryByRegionIdQuery", parameters);
            return base.CreateQuery<Inventory>("GetInventoryByRegionId", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="InventoryLog"/> entity instances using the 'GetInventoryLogs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="InventoryLog"/> entity instances.</returns>
        public EntityQuery<InventoryLog> GetInventoryLogsQuery()
        {
            this.ValidateMethod("GetInventoryLogsQuery", null);
            return base.CreateQuery<InventoryLog>("GetInventoryLogs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="InventoryPackageInfo"/> entity instances using the 'GetInventoryPackageInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="InventoryPackageInfo"/> entity instances.</returns>
        public EntityQuery<InventoryPackageInfo> GetInventoryPackageInfoesQuery()
        {
            this.ValidateMethod("GetInventoryPackageInfoesQuery", null);
            return base.CreateQuery<InventoryPackageInfo>("GetInventoryPackageInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="InventoryProductInfo"/> entity instances using the 'GetInventoryProductInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="InventoryProductInfo"/> entity instances.</returns>
        public EntityQuery<InventoryProductInfo> GetInventoryProductInfoesQuery()
        {
            this.ValidateMethod("GetInventoryProductInfoesQuery", null);
            return base.CreateQuery<InventoryProductInfo>("GetInventoryProductInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Ledger"/> entity instances using the 'GetLedgers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Ledger"/> entity instances.</returns>
        public EntityQuery<Ledger> GetLedgersQuery()
        {
            this.ValidateMethod("GetLedgersQuery", null);
            return base.CreateQuery<Ledger>("GetLedgers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MessageDelivery"/> entity instances using the 'GetMessageDeliveries' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MessageDelivery"/> entity instances.</returns>
        public EntityQuery<MessageDelivery> GetMessageDeliveriesQuery()
        {
            this.ValidateMethod("GetMessageDeliveriesQuery", null);
            return base.CreateQuery<MessageDelivery>("GetMessageDeliveries", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Message"/> entity instances using the 'GetMessages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Message"/> entity instances.</returns>
        public EntityQuery<Message> GetMessagesQuery()
        {
            this.ValidateMethod("GetMessagesQuery", null);
            return base.CreateQuery<Message>("GetMessages", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MRRPackageInfo"/> entity instances using the 'GetMRRPackageInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MRRPackageInfo"/> entity instances.</returns>
        public EntityQuery<MRRPackageInfo> GetMRRPackageInfoesQuery()
        {
            this.ValidateMethod("GetMRRPackageInfoesQuery", null);
            return base.CreateQuery<MRRPackageInfo>("GetMRRPackageInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MRRProductInfo"/> entity instances using the 'GetMRRProductInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MRRProductInfo"/> entity instances.</returns>
        public EntityQuery<MRRProductInfo> GetMRRProductInfoesQuery()
        {
            this.ValidateMethod("GetMRRProductInfoesQuery", null);
            return base.CreateQuery<MRRProductInfo>("GetMRRProductInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MRR"/> entity instances using the 'GetMRRs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MRR"/> entity instances.</returns>
        public EntityQuery<MRR> GetMRRsQuery()
        {
            this.ValidateMethod("GetMRRsQuery", null);
            return base.CreateQuery<MRR>("GetMRRs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NoticeBoard"/> entity instances using the 'GetNoticeBoards' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NoticeBoard"/> entity instances.</returns>
        public EntityQuery<NoticeBoard> GetNoticeBoardsQuery()
        {
            this.ValidateMethod("GetNoticeBoardsQuery", null);
            return base.CreateQuery<NoticeBoard>("GetNoticeBoards", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Package"/> entity instances using the 'GetPackages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Package"/> entity instances.</returns>
        public EntityQuery<Package> GetPackagesQuery()
        {
            this.ValidateMethod("GetPackagesQuery", null);
            return base.CreateQuery<Package>("GetPackages", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Person"/> entity instances using the 'GetPeople' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Person"/> entity instances.</returns>
        public EntityQuery<Person> GetPeopleQuery()
        {
            this.ValidateMethod("GetPeopleQuery", null);
            return base.CreateQuery<Person>("GetPeople", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PLRPackageInfo"/> entity instances using the 'GetPLRPackageInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PLRPackageInfo"/> entity instances.</returns>
        public EntityQuery<PLRPackageInfo> GetPLRPackageInfoesQuery()
        {
            this.ValidateMethod("GetPLRPackageInfoesQuery", null);
            return base.CreateQuery<PLRPackageInfo>("GetPLRPackageInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PLRProductInfo"/> entity instances using the 'GetPLRProductInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PLRProductInfo"/> entity instances.</returns>
        public EntityQuery<PLRProductInfo> GetPLRProductInfoesQuery()
        {
            this.ValidateMethod("GetPLRProductInfoesQuery", null);
            return base.CreateQuery<PLRProductInfo>("GetPLRProductInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PLR"/> entity instances using the 'GetPLRs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PLR"/> entity instances.</returns>
        public EntityQuery<PLR> GetPLRsQuery()
        {
            this.ValidateMethod("GetPLRsQuery", null);
            return base.CreateQuery<PLR>("GetPLRs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductEdit"/> entity instances using the 'GetProductEdits' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductEdit"/> entity instances.</returns>
        public EntityQuery<ProductEdit> GetProductEditsQuery()
        {
            this.ValidateMethod("GetProductEditsQuery", null);
            return base.CreateQuery<ProductEdit>("GetProductEdits", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductsQuery()
        {
            this.ValidateMethod("GetProductsQuery", null);
            return base.CreateQuery<Product>("GetProducts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Promotion"/> entity instances using the 'GetPromotions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Promotion"/> entity instances.</returns>
        public EntityQuery<Promotion> GetPromotionsQuery()
        {
            this.ValidateMethod("GetPromotionsQuery", null);
            return base.CreateQuery<Promotion>("GetPromotions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Region"/> entity instances using the 'GetRegions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Region"/> entity instances.</returns>
        public EntityQuery<Region> GetRegionsQuery()
        {
            this.ValidateMethod("GetRegionsQuery", null);
            return base.CreateQuery<Region>("GetRegions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Region"/> entity instances using the 'GetRegionsById' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Region"/> entity instances.</returns>
        public EntityQuery<Region> GetRegionsByIdQuery(long id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetRegionsByIdQuery", parameters);
            return base.CreateQuery<Region>("GetRegionsById", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegionTarget"/> entity instances using the 'GetRegionTargets' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegionTarget"/> entity instances.</returns>
        public EntityQuery<RegionTarget> GetRegionTargetsQuery()
        {
            this.ValidateMethod("GetRegionTargetsQuery", null);
            return base.CreateQuery<RegionTarget>("GetRegionTargets", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RequisitionPackageInfo"/> entity instances using the 'GetRequisitionPackageInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RequisitionPackageInfo"/> entity instances.</returns>
        public EntityQuery<RequisitionPackageInfo> GetRequisitionPackageInfoesQuery()
        {
            this.ValidateMethod("GetRequisitionPackageInfoesQuery", null);
            return base.CreateQuery<RequisitionPackageInfo>("GetRequisitionPackageInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RequisitionProductInfo"/> entity instances using the 'GetRequisitionProductInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RequisitionProductInfo"/> entity instances.</returns>
        public EntityQuery<RequisitionProductInfo> GetRequisitionProductInfoesQuery()
        {
            this.ValidateMethod("GetRequisitionProductInfoesQuery", null);
            return base.CreateQuery<RequisitionProductInfo>("GetRequisitionProductInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Requisition"/> entity instances using the 'GetRequisitions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Requisition"/> entity instances.</returns>
        public EntityQuery<Requisition> GetRequisitionsQuery()
        {
            this.ValidateMethod("GetRequisitionsQuery", null);
            return base.CreateQuery<Requisition>("GetRequisitions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entity instances using the 'GetRMByRegion' query.
        /// </summary>
        /// <param name="RegionName">The value for the 'RegionName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entity instances.</returns>
        public EntityQuery<Employee> GetRMByRegionQuery(string RegionName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("RegionName", RegionName);
            this.ValidateMethod("GetRMByRegionQuery", parameters);
            return base.CreateQuery<Employee>("GetRMByRegion", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SalesOfficerTarget"/> entity instances using the 'GetSalesOfficerTargets' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SalesOfficerTarget"/> entity instances.</returns>
        public EntityQuery<SalesOfficerTarget> GetSalesOfficerTargetsQuery()
        {
            this.ValidateMethod("GetSalesOfficerTargetsQuery", null);
            return base.CreateQuery<SalesOfficerTarget>("GetSalesOfficerTargets", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SalesReturnInfo"/> entity instances using the 'GetSalesReturnInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SalesReturnInfo"/> entity instances.</returns>
        public EntityQuery<SalesReturnInfo> GetSalesReturnInfoesQuery()
        {
            this.ValidateMethod("GetSalesReturnInfoesQuery", null);
            return base.CreateQuery<SalesReturnInfo>("GetSalesReturnInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SalesReturn"/> entity instances using the 'GetSalesReturns' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SalesReturn"/> entity instances.</returns>
        public EntityQuery<SalesReturn> GetSalesReturnsQuery()
        {
            this.ValidateMethod("GetSalesReturnsQuery", null);
            return base.CreateQuery<SalesReturn>("GetSalesReturns", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TransportationLoss"/> entity instances using the 'GetTransportationLosses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TransportationLoss"/> entity instances.</returns>
        public EntityQuery<TransportationLoss> GetTransportationLossesQuery()
        {
            this.ValidateMethod("GetTransportationLossesQuery", null);
            return base.CreateQuery<TransportationLoss>("GetTransportationLosses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="YearSummaryDealer"/> entity instances using the 'GetYearSummaryDealers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="YearSummaryDealer"/> entity instances.</returns>
        public EntityQuery<YearSummaryDealer> GetYearSummaryDealersQuery()
        {
            this.ValidateMethod("GetYearSummaryDealersQuery", null);
            return base.CreateQuery<YearSummaryDealer>("GetYearSummaryDealers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="YearSummaryInventoryPackage"/> entity instances using the 'GetYearSummaryInventoryPackages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="YearSummaryInventoryPackage"/> entity instances.</returns>
        public EntityQuery<YearSummaryInventoryPackage> GetYearSummaryInventoryPackagesQuery()
        {
            this.ValidateMethod("GetYearSummaryInventoryPackagesQuery", null);
            return base.CreateQuery<YearSummaryInventoryPackage>("GetYearSummaryInventoryPackages", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="YearSummaryInventoryProduct"/> entity instances using the 'GetYearSummaryInventoryProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="YearSummaryInventoryProduct"/> entity instances.</returns>
        public EntityQuery<YearSummaryInventoryProduct> GetYearSummaryInventoryProductsQuery()
        {
            this.ValidateMethod("GetYearSummaryInventoryProductsQuery", null);
            return base.CreateQuery<YearSummaryInventoryProduct>("GetYearSummaryInventoryProducts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="YearSummarySOExpenditure"/> entity instances using the 'GetYearSummarySOExpenditures' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="YearSummarySOExpenditure"/> entity instances.</returns>
        public EntityQuery<YearSummarySOExpenditure> GetYearSummarySOExpendituresQuery()
        {
            this.ValidateMethod("GetYearSummarySOExpendituresQuery", null);
            return base.CreateQuery<YearSummarySOExpenditure>("GetYearSummarySOExpenditures", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AgroDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AgroDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAgroDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetBillPaymentInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetBillPaymentInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetBillPaymentInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetBillPaymentInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetBillPaymentInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBillPaymentInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBillPaymentInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBillPaymentInfoes' operation.</returns>
            QueryResult<BillPaymentInfo> EndGetBillPaymentInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBillPayments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetBillPaymentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetBillPayments", ReplyAction="http://tempuri.org/AgroDomainService/GetBillPaymentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetBillPayments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBillPayments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBillPayments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBillPayments' operation.</returns>
            QueryResult<BillPayment> EndGetBillPayments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBillProductInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetBillProductInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetBillProductInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetBillProductInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetBillProductInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBillProductInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBillProductInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBillProductInfoes' operation.</returns>
            QueryResult<BillProductInfo> EndGetBillProductInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBills' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetBillsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetBills", ReplyAction="http://tempuri.org/AgroDomainService/GetBillsResponse")]
            [WebGet()]
            IAsyncResult BeginGetBills(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBills'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBills'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBills' operation.</returns>
            QueryResult<Bill> EndGetBills(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCommissions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetCommissionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetCommissions", ReplyAction="http://tempuri.org/AgroDomainService/GetCommissionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCommissions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCommissions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCommissions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCommissions' operation.</returns>
            QueryResult<Commission> EndGetCommissions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDealerByID' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetDealerByIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetDealerByID", ReplyAction="http://tempuri.org/AgroDomainService/GetDealerByIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetDealerByID(long id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDealerByID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDealerByID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDealerByID' operation.</returns>
            QueryResult<Dealer> EndGetDealerByID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDealers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetDealersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetDealers", ReplyAction="http://tempuri.org/AgroDomainService/GetDealersResponse")]
            [WebGet()]
            IAsyncResult BeginGetDealers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDealers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDealers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDealers' operation.</returns>
            QueryResult<Dealer> EndGetDealers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDueInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetDueInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetDueInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetDueInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetDueInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDueInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDueInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDueInfoes' operation.</returns>
            QueryResult<DueInfo> EndGetDueInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployees' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetEmployeesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetEmployees", ReplyAction="http://tempuri.org/AgroDomainService/GetEmployeesResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployees(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployees'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployees'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployees' operation.</returns>
            QueryResult<Employee> EndGetEmployees(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployeesByUsername' operation.
            /// </summary>
            /// <param name="Username">The value for the 'Username' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetEmployeesByUsernameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetEmployeesByUsername", ReplyAction="http://tempuri.org/AgroDomainService/GetEmployeesByUsernameResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployeesByUsername(string Username, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployeesByUsername'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployeesByUsername'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployeesByUsername' operation.</returns>
            QueryResult<Employee> EndGetEmployeesByUsername(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExpenditureInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetExpenditureInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetExpenditureInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetExpenditureInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetExpenditureInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExpenditureInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExpenditureInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExpenditureInfoes' operation.</returns>
            QueryResult<ExpenditureInfo> EndGetExpenditureInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExpenditures' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetExpendituresDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetExpenditures", ReplyAction="http://tempuri.org/AgroDomainService/GetExpendituresResponse")]
            [WebGet()]
            IAsyncResult BeginGetExpenditures(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExpenditures'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExpenditures'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExpenditures' operation.</returns>
            QueryResult<Expenditure> EndGetExpenditures(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIndentProductInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetIndentProductInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetIndentProductInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetIndentProductInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetIndentProductInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIndentProductInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIndentProductInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIndentProductInfoes' operation.</returns>
            QueryResult<IndentProductInfo> EndGetIndentProductInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIndents' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetIndentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetIndents", ReplyAction="http://tempuri.org/AgroDomainService/GetIndentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetIndents(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIndents'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIndents'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIndents' operation.</returns>
            QueryResult<Indent> EndGetIndents(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInventories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetInventoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetInventories", ReplyAction="http://tempuri.org/AgroDomainService/GetInventoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetInventories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInventories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInventories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInventories' operation.</returns>
            QueryResult<Inventory> EndGetInventories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInventoryByRegionId' operation.
            /// </summary>
            /// <param name="regionID">The value for the 'regionID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetInventoryByRegionIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetInventoryByRegionId", ReplyAction="http://tempuri.org/AgroDomainService/GetInventoryByRegionIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetInventoryByRegionId(long regionID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInventoryByRegionId'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInventoryByRegionId'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInventoryByRegionId' operation.</returns>
            QueryResult<Inventory> EndGetInventoryByRegionId(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInventoryLogs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetInventoryLogsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetInventoryLogs", ReplyAction="http://tempuri.org/AgroDomainService/GetInventoryLogsResponse")]
            [WebGet()]
            IAsyncResult BeginGetInventoryLogs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInventoryLogs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInventoryLogs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInventoryLogs' operation.</returns>
            QueryResult<InventoryLog> EndGetInventoryLogs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInventoryPackageInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetInventoryPackageInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetInventoryPackageInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetInventoryPackageInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetInventoryPackageInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInventoryPackageInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInventoryPackageInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInventoryPackageInfoes' operation.</returns>
            QueryResult<InventoryPackageInfo> EndGetInventoryPackageInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInventoryProductInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetInventoryProductInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetInventoryProductInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetInventoryProductInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetInventoryProductInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInventoryProductInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInventoryProductInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInventoryProductInfoes' operation.</returns>
            QueryResult<InventoryProductInfo> EndGetInventoryProductInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLedgers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetLedgersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetLedgers", ReplyAction="http://tempuri.org/AgroDomainService/GetLedgersResponse")]
            [WebGet()]
            IAsyncResult BeginGetLedgers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLedgers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLedgers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLedgers' operation.</returns>
            QueryResult<Ledger> EndGetLedgers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessageDeliveries' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetMessageDeliveriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetMessageDeliveries", ReplyAction="http://tempuri.org/AgroDomainService/GetMessageDeliveriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMessageDeliveries(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessageDeliveries'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessageDeliveries'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessageDeliveries' operation.</returns>
            QueryResult<MessageDelivery> EndGetMessageDeliveries(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetMessagesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetMessages", ReplyAction="http://tempuri.org/AgroDomainService/GetMessagesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMessages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessages' operation.</returns>
            QueryResult<Message> EndGetMessages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMRRPackageInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetMRRPackageInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetMRRPackageInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetMRRPackageInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMRRPackageInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMRRPackageInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMRRPackageInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMRRPackageInfoes' operation.</returns>
            QueryResult<MRRPackageInfo> EndGetMRRPackageInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMRRProductInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetMRRProductInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetMRRProductInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetMRRProductInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMRRProductInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMRRProductInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMRRProductInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMRRProductInfoes' operation.</returns>
            QueryResult<MRRProductInfo> EndGetMRRProductInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMRRs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetMRRsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetMRRs", ReplyAction="http://tempuri.org/AgroDomainService/GetMRRsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMRRs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMRRs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMRRs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMRRs' operation.</returns>
            QueryResult<MRR> EndGetMRRs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNoticeBoards' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetNoticeBoardsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetNoticeBoards", ReplyAction="http://tempuri.org/AgroDomainService/GetNoticeBoardsResponse")]
            [WebGet()]
            IAsyncResult BeginGetNoticeBoards(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNoticeBoards'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNoticeBoards'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNoticeBoards' operation.</returns>
            QueryResult<NoticeBoard> EndGetNoticeBoards(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPackages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetPackagesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetPackages", ReplyAction="http://tempuri.org/AgroDomainService/GetPackagesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPackages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPackages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPackages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPackages' operation.</returns>
            QueryResult<Package> EndGetPackages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPeople' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetPeopleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetPeople", ReplyAction="http://tempuri.org/AgroDomainService/GetPeopleResponse")]
            [WebGet()]
            IAsyncResult BeginGetPeople(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPeople'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPeople'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPeople' operation.</returns>
            QueryResult<Person> EndGetPeople(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPLRPackageInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetPLRPackageInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetPLRPackageInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetPLRPackageInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPLRPackageInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPLRPackageInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPLRPackageInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPLRPackageInfoes' operation.</returns>
            QueryResult<PLRPackageInfo> EndGetPLRPackageInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPLRProductInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetPLRProductInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetPLRProductInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetPLRProductInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPLRProductInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPLRProductInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPLRProductInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPLRProductInfoes' operation.</returns>
            QueryResult<PLRProductInfo> EndGetPLRProductInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPLRs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetPLRsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetPLRs", ReplyAction="http://tempuri.org/AgroDomainService/GetPLRsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPLRs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPLRs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPLRs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPLRs' operation.</returns>
            QueryResult<PLR> EndGetPLRs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductEdits' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetProductEditsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetProductEdits", ReplyAction="http://tempuri.org/AgroDomainService/GetProductEditsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProductEdits(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductEdits'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductEdits'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductEdits' operation.</returns>
            QueryResult<ProductEdit> EndGetProductEdits(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetProductsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetProducts", ReplyAction="http://tempuri.org/AgroDomainService/GetProductsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProducts' operation.</returns>
            QueryResult<Product> EndGetProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPromotions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetPromotionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetPromotions", ReplyAction="http://tempuri.org/AgroDomainService/GetPromotionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPromotions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPromotions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPromotions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPromotions' operation.</returns>
            QueryResult<Promotion> EndGetPromotions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetRegionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetRegions", ReplyAction="http://tempuri.org/AgroDomainService/GetRegionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRegions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRegions' operation.</returns>
            QueryResult<Region> EndGetRegions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegionsById' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetRegionsByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetRegionsById", ReplyAction="http://tempuri.org/AgroDomainService/GetRegionsByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetRegionsById(long id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegionsById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegionsById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRegionsById' operation.</returns>
            QueryResult<Region> EndGetRegionsById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegionTargets' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetRegionTargetsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetRegionTargets", ReplyAction="http://tempuri.org/AgroDomainService/GetRegionTargetsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRegionTargets(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegionTargets'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegionTargets'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRegionTargets' operation.</returns>
            QueryResult<RegionTarget> EndGetRegionTargets(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRequisitionPackageInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetRequisitionPackageInfoesDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetRequisitionPackageInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetRequisitionPackageInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetRequisitionPackageInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRequisitionPackageInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRequisitionPackageInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRequisitionPackageInfoes' operation.</returns>
            QueryResult<RequisitionPackageInfo> EndGetRequisitionPackageInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRequisitionProductInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetRequisitionProductInfoesDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetRequisitionProductInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetRequisitionProductInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetRequisitionProductInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRequisitionProductInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRequisitionProductInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRequisitionProductInfoes' operation.</returns>
            QueryResult<RequisitionProductInfo> EndGetRequisitionProductInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRequisitions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetRequisitionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetRequisitions", ReplyAction="http://tempuri.org/AgroDomainService/GetRequisitionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRequisitions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRequisitions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRequisitions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRequisitions' operation.</returns>
            QueryResult<Requisition> EndGetRequisitions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRMByRegion' operation.
            /// </summary>
            /// <param name="RegionName">The value for the 'RegionName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetRMByRegionDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetRMByRegion", ReplyAction="http://tempuri.org/AgroDomainService/GetRMByRegionResponse")]
            [WebGet()]
            IAsyncResult BeginGetRMByRegion(string RegionName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRMByRegion'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRMByRegion'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRMByRegion' operation.</returns>
            QueryResult<Employee> EndGetRMByRegion(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSalesOfficerTargets' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetSalesOfficerTargetsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetSalesOfficerTargets", ReplyAction="http://tempuri.org/AgroDomainService/GetSalesOfficerTargetsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSalesOfficerTargets(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSalesOfficerTargets'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSalesOfficerTargets'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSalesOfficerTargets' operation.</returns>
            QueryResult<SalesOfficerTarget> EndGetSalesOfficerTargets(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSalesReturnInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetSalesReturnInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetSalesReturnInfoes", ReplyAction="http://tempuri.org/AgroDomainService/GetSalesReturnInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSalesReturnInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSalesReturnInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSalesReturnInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSalesReturnInfoes' operation.</returns>
            QueryResult<SalesReturnInfo> EndGetSalesReturnInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSalesReturns' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetSalesReturnsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetSalesReturns", ReplyAction="http://tempuri.org/AgroDomainService/GetSalesReturnsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSalesReturns(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSalesReturns'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSalesReturns'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSalesReturns' operation.</returns>
            QueryResult<SalesReturn> EndGetSalesReturns(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTransportationLosses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetTransportationLossesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetTransportationLosses", ReplyAction="http://tempuri.org/AgroDomainService/GetTransportationLossesResponse")]
            [WebGet()]
            IAsyncResult BeginGetTransportationLosses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTransportationLosses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTransportationLosses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTransportationLosses' operation.</returns>
            QueryResult<TransportationLoss> EndGetTransportationLosses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetYearSummaryDealers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetYearSummaryDealersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetYearSummaryDealers", ReplyAction="http://tempuri.org/AgroDomainService/GetYearSummaryDealersResponse")]
            [WebGet()]
            IAsyncResult BeginGetYearSummaryDealers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetYearSummaryDealers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetYearSummaryDealers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetYearSummaryDealers' operation.</returns>
            QueryResult<YearSummaryDealer> EndGetYearSummaryDealers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetYearSummaryInventoryPackages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetYearSummaryInventoryPackagesDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetYearSummaryInventoryPackages", ReplyAction="http://tempuri.org/AgroDomainService/GetYearSummaryInventoryPackagesResponse")]
            [WebGet()]
            IAsyncResult BeginGetYearSummaryInventoryPackages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetYearSummaryInventoryPackages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetYearSummaryInventoryPackages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetYearSummaryInventoryPackages' operation.</returns>
            QueryResult<YearSummaryInventoryPackage> EndGetYearSummaryInventoryPackages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetYearSummaryInventoryProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetYearSummaryInventoryProductsDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetYearSummaryInventoryProducts", ReplyAction="http://tempuri.org/AgroDomainService/GetYearSummaryInventoryProductsResponse")]
            [WebGet()]
            IAsyncResult BeginGetYearSummaryInventoryProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetYearSummaryInventoryProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetYearSummaryInventoryProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetYearSummaryInventoryProducts' operation.</returns>
            QueryResult<YearSummaryInventoryProduct> EndGetYearSummaryInventoryProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetYearSummarySOExpenditures' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/GetYearSummarySOExpendituresDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/GetYearSummarySOExpenditures", ReplyAction="http://tempuri.org/AgroDomainService/GetYearSummarySOExpendituresResponse")]
            [WebGet()]
            IAsyncResult BeginGetYearSummarySOExpenditures(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetYearSummarySOExpenditures'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetYearSummarySOExpenditures'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetYearSummarySOExpenditures' operation.</returns>
            QueryResult<YearSummarySOExpenditure> EndGetYearSummarySOExpenditures(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AgroDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AgroDomainService/SubmitChanges", ReplyAction="http://tempuri.org/AgroDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AgroDomainContextEntityContainer : EntityContainer
        {
            
            public AgroDomainContextEntityContainer()
            {
                this.CreateEntitySet<Bill>(EntitySetOperations.All);
                this.CreateEntitySet<BillPayment>(EntitySetOperations.All);
                this.CreateEntitySet<BillPaymentInfo>(EntitySetOperations.All);
                this.CreateEntitySet<BillProductInfo>(EntitySetOperations.All);
                this.CreateEntitySet<Commission>(EntitySetOperations.All);
                this.CreateEntitySet<Dealer>(EntitySetOperations.All);
                this.CreateEntitySet<DueInfo>(EntitySetOperations.All);
                this.CreateEntitySet<Employee>(EntitySetOperations.All);
                this.CreateEntitySet<Expenditure>(EntitySetOperations.All);
                this.CreateEntitySet<ExpenditureInfo>(EntitySetOperations.All);
                this.CreateEntitySet<Indent>(EntitySetOperations.All);
                this.CreateEntitySet<IndentProductInfo>(EntitySetOperations.All);
                this.CreateEntitySet<Inventory>(EntitySetOperations.All);
                this.CreateEntitySet<InventoryLog>(EntitySetOperations.All);
                this.CreateEntitySet<InventoryPackageInfo>(EntitySetOperations.All);
                this.CreateEntitySet<InventoryProductInfo>(EntitySetOperations.All);
                this.CreateEntitySet<Ledger>(EntitySetOperations.All);
                this.CreateEntitySet<Message>(EntitySetOperations.All);
                this.CreateEntitySet<MessageDelivery>(EntitySetOperations.All);
                this.CreateEntitySet<MRR>(EntitySetOperations.All);
                this.CreateEntitySet<MRRPackageInfo>(EntitySetOperations.All);
                this.CreateEntitySet<MRRProductInfo>(EntitySetOperations.All);
                this.CreateEntitySet<NoticeBoard>(EntitySetOperations.All);
                this.CreateEntitySet<Package>(EntitySetOperations.All);
                this.CreateEntitySet<Person>(EntitySetOperations.All);
                this.CreateEntitySet<PLR>(EntitySetOperations.All);
                this.CreateEntitySet<PLRPackageInfo>(EntitySetOperations.All);
                this.CreateEntitySet<PLRProductInfo>(EntitySetOperations.All);
                this.CreateEntitySet<Product>(EntitySetOperations.All);
                this.CreateEntitySet<ProductEdit>(EntitySetOperations.All);
                this.CreateEntitySet<Promotion>(EntitySetOperations.All);
                this.CreateEntitySet<Region>(EntitySetOperations.All);
                this.CreateEntitySet<RegionTarget>(EntitySetOperations.All);
                this.CreateEntitySet<Requisition>(EntitySetOperations.All);
                this.CreateEntitySet<RequisitionPackageInfo>(EntitySetOperations.All);
                this.CreateEntitySet<RequisitionProductInfo>(EntitySetOperations.All);
                this.CreateEntitySet<SalesOfficerTarget>(EntitySetOperations.All);
                this.CreateEntitySet<SalesReturn>(EntitySetOperations.All);
                this.CreateEntitySet<SalesReturnInfo>(EntitySetOperations.All);
                this.CreateEntitySet<TransportationLoss>(EntitySetOperations.All);
                this.CreateEntitySet<YearSummaryDealer>(EntitySetOperations.All);
                this.CreateEntitySet<YearSummaryInventoryPackage>(EntitySetOperations.All);
                this.CreateEntitySet<YearSummaryInventoryProduct>(EntitySetOperations.All);
                this.CreateEntitySet<YearSummarySOExpenditure>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("TrialBusinessManager-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'Bill' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Bill : Entity
    {
        
        private string _billCode;
        
        private long _billId;
        
        private EntityCollection<BillPaymentInfo> _billPaymentInfoes;
        
        private EntityCollection<BillProductInfo> _billProductInfoes;
        
        private string _billStatus;
        
        private DateTime _dateOfIssue;
        
        private long _dispatchedById;
        
        private EntityCollection<DueInfo> _dueInfoes;
        
        private string _emergencyContactNo;
        
        private EntityRef<Employee> _employee;
        
        private bool _hasProductLoss;
        
        private Nullable<bool> _hasSalesReturn;
        
        private EntityRef<Indent> _indent;
        
        private long _indentId;
        
        private DateTime _paymentDeadline;
        
        private double _productLossCost;
        
        private Nullable<double> _salesReturnCost;
        
        private EntityCollection<SalesReturnInfo> _salesReturnInfoes;
        
        private double _totalPaid;
        
        private double _totalProductCost;
        
        private EntityCollection<TransportationLoss> _transportationLosses;
        
        private double _transportCost;
        
        private string _transportType;
        
        private string _vehicleNo;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBillCodeChanging(string value);
        partial void OnBillCodeChanged();
        partial void OnBillIdChanging(long value);
        partial void OnBillIdChanged();
        partial void OnBillStatusChanging(string value);
        partial void OnBillStatusChanged();
        partial void OnDateOfIssueChanging(DateTime value);
        partial void OnDateOfIssueChanged();
        partial void OnDispatchedByIdChanging(long value);
        partial void OnDispatchedByIdChanged();
        partial void OnEmergencyContactNoChanging(string value);
        partial void OnEmergencyContactNoChanged();
        partial void OnHasProductLossChanging(bool value);
        partial void OnHasProductLossChanged();
        partial void OnHasSalesReturnChanging(Nullable<bool> value);
        partial void OnHasSalesReturnChanged();
        partial void OnIndentIdChanging(long value);
        partial void OnIndentIdChanged();
        partial void OnPaymentDeadlineChanging(DateTime value);
        partial void OnPaymentDeadlineChanged();
        partial void OnProductLossCostChanging(double value);
        partial void OnProductLossCostChanged();
        partial void OnSalesReturnCostChanging(Nullable<double> value);
        partial void OnSalesReturnCostChanged();
        partial void OnTotalPaidChanging(double value);
        partial void OnTotalPaidChanged();
        partial void OnTotalProductCostChanging(double value);
        partial void OnTotalProductCostChanged();
        partial void OnTransportCostChanging(double value);
        partial void OnTransportCostChanged();
        partial void OnTransportTypeChanging(string value);
        partial void OnTransportTypeChanged();
        partial void OnVehicleNoChanging(string value);
        partial void OnVehicleNoChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Bill"/> class.
        /// </summary>
        public Bill()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BillCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string BillCode
        {
            get
            {
                return this._billCode;
            }
            set
            {
                if ((this._billCode != value))
                {
                    this.OnBillCodeChanging(value);
                    this.RaiseDataMemberChanging("BillCode");
                    this.ValidateProperty("BillCode", value);
                    this._billCode = value;
                    this.RaiseDataMemberChanged("BillCode");
                    this.OnBillCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long BillId
        {
            get
            {
                return this._billId;
            }
            set
            {
                if ((this._billId != value))
                {
                    this.OnBillIdChanging(value);
                    this.ValidateProperty("BillId", value);
                    this._billId = value;
                    this.RaisePropertyChanged("BillId");
                    this.OnBillIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="BillPaymentInfo"/> entity instances.
        /// </summary>
        [Association("Bill_BillPaymentInfo", "BillId", "BillId")]
        [XmlIgnore()]
        public EntityCollection<BillPaymentInfo> BillPaymentInfoes
        {
            get
            {
                if ((this._billPaymentInfoes == null))
                {
                    this._billPaymentInfoes = new EntityCollection<BillPaymentInfo>(this, "BillPaymentInfoes", this.FilterBillPaymentInfoes, this.AttachBillPaymentInfoes, this.DetachBillPaymentInfoes);
                }
                return this._billPaymentInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="BillProductInfo"/> entity instances.
        /// </summary>
        [Association("Bill_BillProductInfo", "BillId", "BillId")]
        [XmlIgnore()]
        public EntityCollection<BillProductInfo> BillProductInfoes
        {
            get
            {
                if ((this._billProductInfoes == null))
                {
                    this._billProductInfoes = new EntityCollection<BillProductInfo>(this, "BillProductInfoes", this.FilterBillProductInfoes, this.AttachBillProductInfoes, this.DetachBillProductInfoes);
                }
                return this._billProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string BillStatus
        {
            get
            {
                return this._billStatus;
            }
            set
            {
                if ((this._billStatus != value))
                {
                    this.OnBillStatusChanging(value);
                    this.RaiseDataMemberChanging("BillStatus");
                    this.ValidateProperty("BillStatus", value);
                    this._billStatus = value;
                    this.RaiseDataMemberChanged("BillStatus");
                    this.OnBillStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfIssue' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfIssue
        {
            get
            {
                return this._dateOfIssue;
            }
            set
            {
                if ((this._dateOfIssue != value))
                {
                    this.OnDateOfIssueChanging(value);
                    this.RaiseDataMemberChanging("DateOfIssue");
                    this.ValidateProperty("DateOfIssue", value);
                    this._dateOfIssue = value;
                    this.RaiseDataMemberChanged("DateOfIssue");
                    this.OnDateOfIssueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DispatchedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long DispatchedById
        {
            get
            {
                return this._dispatchedById;
            }
            set
            {
                if ((this._dispatchedById != value))
                {
                    this.OnDispatchedByIdChanging(value);
                    this.RaiseDataMemberChanging("DispatchedById");
                    this.ValidateProperty("DispatchedById", value);
                    this._dispatchedById = value;
                    this.RaiseDataMemberChanged("DispatchedById");
                    this.OnDispatchedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DueInfo"/> entity instances.
        /// </summary>
        [Association("Bill_DueInfo", "BillId", "BillId")]
        [XmlIgnore()]
        public EntityCollection<DueInfo> DueInfoes
        {
            get
            {
                if ((this._dueInfoes == null))
                {
                    this._dueInfoes = new EntityCollection<DueInfo>(this, "DueInfoes", this.FilterDueInfoes, this.AttachDueInfoes, this.DetachDueInfoes);
                }
                return this._dueInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmergencyContactNo' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string EmergencyContactNo
        {
            get
            {
                return this._emergencyContactNo;
            }
            set
            {
                if ((this._emergencyContactNo != value))
                {
                    this.OnEmergencyContactNoChanging(value);
                    this.RaiseDataMemberChanging("EmergencyContactNo");
                    this.ValidateProperty("EmergencyContactNo", value);
                    this._emergencyContactNo = value;
                    this.RaiseDataMemberChanged("EmergencyContactNo");
                    this.OnEmergencyContactNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Bill", "DispatchedById", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.Bills.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DispatchedById = value.EmployeeId;
                    }
                    else
                    {
                        this.DispatchedById = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.Bills.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HasProductLoss' value.
        /// </summary>
        [DataMember()]
        public bool HasProductLoss
        {
            get
            {
                return this._hasProductLoss;
            }
            set
            {
                if ((this._hasProductLoss != value))
                {
                    this.OnHasProductLossChanging(value);
                    this.RaiseDataMemberChanging("HasProductLoss");
                    this.ValidateProperty("HasProductLoss", value);
                    this._hasProductLoss = value;
                    this.RaiseDataMemberChanged("HasProductLoss");
                    this.OnHasProductLossChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HasSalesReturn' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> HasSalesReturn
        {
            get
            {
                return this._hasSalesReturn;
            }
            set
            {
                if ((this._hasSalesReturn != value))
                {
                    this.OnHasSalesReturnChanging(value);
                    this.RaiseDataMemberChanging("HasSalesReturn");
                    this.ValidateProperty("HasSalesReturn", value);
                    this._hasSalesReturn = value;
                    this.RaiseDataMemberChanged("HasSalesReturn");
                    this.OnHasSalesReturnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Indent"/> entity.
        /// </summary>
        [Association("Indent_Bill", "IndentId", "IndentId", IsForeignKey=true)]
        [XmlIgnore()]
        public Indent Indent
        {
            get
            {
                if ((this._indent == null))
                {
                    this._indent = new EntityRef<Indent>(this, "Indent", this.FilterIndent);
                }
                return this._indent.Entity;
            }
            set
            {
                Indent previous = this.Indent;
                if ((previous != value))
                {
                    this.ValidateProperty("Indent", value);
                    if ((previous != null))
                    {
                        this._indent.Entity = null;
                        previous.Bills.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IndentId = value.IndentId;
                    }
                    else
                    {
                        this.IndentId = default(long);
                    }
                    this._indent.Entity = value;
                    if ((value != null))
                    {
                        value.Bills.Add(this);
                    }
                    this.RaisePropertyChanged("Indent");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IndentId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long IndentId
        {
            get
            {
                return this._indentId;
            }
            set
            {
                if ((this._indentId != value))
                {
                    this.OnIndentIdChanging(value);
                    this.RaiseDataMemberChanging("IndentId");
                    this.ValidateProperty("IndentId", value);
                    this._indentId = value;
                    this.RaiseDataMemberChanged("IndentId");
                    this.OnIndentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PaymentDeadline' value.
        /// </summary>
        [DataMember()]
        public DateTime PaymentDeadline
        {
            get
            {
                return this._paymentDeadline;
            }
            set
            {
                if ((this._paymentDeadline != value))
                {
                    this.OnPaymentDeadlineChanging(value);
                    this.RaiseDataMemberChanging("PaymentDeadline");
                    this.ValidateProperty("PaymentDeadline", value);
                    this._paymentDeadline = value;
                    this.RaiseDataMemberChanged("PaymentDeadline");
                    this.OnPaymentDeadlineChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductLossCost' value.
        /// </summary>
        [DataMember()]
        public double ProductLossCost
        {
            get
            {
                return this._productLossCost;
            }
            set
            {
                if ((this._productLossCost != value))
                {
                    this.OnProductLossCostChanging(value);
                    this.RaiseDataMemberChanging("ProductLossCost");
                    this.ValidateProperty("ProductLossCost", value);
                    this._productLossCost = value;
                    this.RaiseDataMemberChanged("ProductLossCost");
                    this.OnProductLossCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesReturnCost' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> SalesReturnCost
        {
            get
            {
                return this._salesReturnCost;
            }
            set
            {
                if ((this._salesReturnCost != value))
                {
                    this.OnSalesReturnCostChanging(value);
                    this.RaiseDataMemberChanging("SalesReturnCost");
                    this.ValidateProperty("SalesReturnCost", value);
                    this._salesReturnCost = value;
                    this.RaiseDataMemberChanged("SalesReturnCost");
                    this.OnSalesReturnCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SalesReturnInfo"/> entity instances.
        /// </summary>
        [Association("Bill_SalesReturnInfo", "BillId", "BillId")]
        [XmlIgnore()]
        public EntityCollection<SalesReturnInfo> SalesReturnInfoes
        {
            get
            {
                if ((this._salesReturnInfoes == null))
                {
                    this._salesReturnInfoes = new EntityCollection<SalesReturnInfo>(this, "SalesReturnInfoes", this.FilterSalesReturnInfoes, this.AttachSalesReturnInfoes, this.DetachSalesReturnInfoes);
                }
                return this._salesReturnInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalPaid' value.
        /// </summary>
        [DataMember()]
        public double TotalPaid
        {
            get
            {
                return this._totalPaid;
            }
            set
            {
                if ((this._totalPaid != value))
                {
                    this.OnTotalPaidChanging(value);
                    this.RaiseDataMemberChanging("TotalPaid");
                    this.ValidateProperty("TotalPaid", value);
                    this._totalPaid = value;
                    this.RaiseDataMemberChanged("TotalPaid");
                    this.OnTotalPaidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalProductCost' value.
        /// </summary>
        [DataMember()]
        public double TotalProductCost
        {
            get
            {
                return this._totalProductCost;
            }
            set
            {
                if ((this._totalProductCost != value))
                {
                    this.OnTotalProductCostChanging(value);
                    this.RaiseDataMemberChanging("TotalProductCost");
                    this.ValidateProperty("TotalProductCost", value);
                    this._totalProductCost = value;
                    this.RaiseDataMemberChanged("TotalProductCost");
                    this.OnTotalProductCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="TransportationLoss"/> entity instances.
        /// </summary>
        [Association("Bill_TransportationLoss", "BillId", "BillId")]
        [XmlIgnore()]
        public EntityCollection<TransportationLoss> TransportationLosses
        {
            get
            {
                if ((this._transportationLosses == null))
                {
                    this._transportationLosses = new EntityCollection<TransportationLoss>(this, "TransportationLosses", this.FilterTransportationLosses, this.AttachTransportationLosses, this.DetachTransportationLosses);
                }
                return this._transportationLosses;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TransportCost' value.
        /// </summary>
        [DataMember()]
        public double TransportCost
        {
            get
            {
                return this._transportCost;
            }
            set
            {
                if ((this._transportCost != value))
                {
                    this.OnTransportCostChanging(value);
                    this.RaiseDataMemberChanging("TransportCost");
                    this.ValidateProperty("TransportCost", value);
                    this._transportCost = value;
                    this.RaiseDataMemberChanged("TransportCost");
                    this.OnTransportCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TransportType' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string TransportType
        {
            get
            {
                return this._transportType;
            }
            set
            {
                if ((this._transportType != value))
                {
                    this.OnTransportTypeChanging(value);
                    this.RaiseDataMemberChanging("TransportType");
                    this.ValidateProperty("TransportType", value);
                    this._transportType = value;
                    this.RaiseDataMemberChanged("TransportType");
                    this.OnTransportTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VehicleNo' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string VehicleNo
        {
            get
            {
                return this._vehicleNo;
            }
            set
            {
                if ((this._vehicleNo != value))
                {
                    this.OnVehicleNoChanging(value);
                    this.RaiseDataMemberChanging("VehicleNo");
                    this.ValidateProperty("VehicleNo", value);
                    this._vehicleNo = value;
                    this.RaiseDataMemberChanged("VehicleNo");
                    this.OnVehicleNoChanged();
                }
            }
        }
        
        private void AttachBillPaymentInfoes(BillPaymentInfo entity)
        {
            entity.Bill = this;
        }
        
        private void DetachBillPaymentInfoes(BillPaymentInfo entity)
        {
            entity.Bill = null;
        }
        
        private bool FilterBillPaymentInfoes(BillPaymentInfo entity)
        {
            return (entity.BillId == this.BillId);
        }
        
        private void AttachBillProductInfoes(BillProductInfo entity)
        {
            entity.Bill = this;
        }
        
        private void DetachBillProductInfoes(BillProductInfo entity)
        {
            entity.Bill = null;
        }
        
        private bool FilterBillProductInfoes(BillProductInfo entity)
        {
            return (entity.BillId == this.BillId);
        }
        
        private void AttachDueInfoes(DueInfo entity)
        {
            entity.Bill = this;
        }
        
        private void DetachDueInfoes(DueInfo entity)
        {
            entity.Bill = null;
        }
        
        private bool FilterDueInfoes(DueInfo entity)
        {
            return (entity.BillId == this.BillId);
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.DispatchedById);
        }
        
        private bool FilterIndent(Indent entity)
        {
            return (entity.IndentId == this.IndentId);
        }
        
        private void AttachSalesReturnInfoes(SalesReturnInfo entity)
        {
            entity.Bill = this;
        }
        
        private void DetachSalesReturnInfoes(SalesReturnInfo entity)
        {
            entity.Bill = null;
        }
        
        private bool FilterSalesReturnInfoes(SalesReturnInfo entity)
        {
            return (entity.BillId == this.BillId);
        }
        
        private void AttachTransportationLosses(TransportationLoss entity)
        {
            entity.Bill = this;
        }
        
        private void DetachTransportationLosses(TransportationLoss entity)
        {
            entity.Bill = null;
        }
        
        private bool FilterTransportationLosses(TransportationLoss entity)
        {
            return (entity.BillId == this.BillId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._billId;
        }
    }
    
    /// <summary>
    /// The 'BillPayment' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class BillPayment : Entity
    {
        
        private DateTime _accountantFinalizeDate;
        
        private long _accountantId;
        
        private string _bankName;
        
        private long _billPaymentId;
        
        private EntityCollection<BillPaymentInfo> _billPaymentInfoes;
        
        private string _branchName;
        
        private DateTime _dateOfIssue;
        
        private string _ddNumber;
        
        private EntityRef<Dealer> _dealer;
        
        private long _dealerId;
        
        private EntityRef<Employee> _employee;
        
        private EntityRef<Employee> _employee1;
        
        private string _paymentMethod;
        
        private long _rmId;
        
        private string _status;
        
        private double _totalAmount;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAccountantFinalizeDateChanging(DateTime value);
        partial void OnAccountantFinalizeDateChanged();
        partial void OnAccountantIdChanging(long value);
        partial void OnAccountantIdChanged();
        partial void OnBankNameChanging(string value);
        partial void OnBankNameChanged();
        partial void OnBillPaymentIdChanging(long value);
        partial void OnBillPaymentIdChanged();
        partial void OnBranchNameChanging(string value);
        partial void OnBranchNameChanged();
        partial void OnDateOfIssueChanging(DateTime value);
        partial void OnDateOfIssueChanged();
        partial void OnDDNumberChanging(string value);
        partial void OnDDNumberChanged();
        partial void OnDealerIdChanging(long value);
        partial void OnDealerIdChanged();
        partial void OnPaymentMethodChanging(string value);
        partial void OnPaymentMethodChanged();
        partial void OnRMIdChanging(long value);
        partial void OnRMIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTotalAmountChanging(double value);
        partial void OnTotalAmountChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BillPayment"/> class.
        /// </summary>
        public BillPayment()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AccountantFinalizeDate' value.
        /// </summary>
        [DataMember()]
        public DateTime AccountantFinalizeDate
        {
            get
            {
                return this._accountantFinalizeDate;
            }
            set
            {
                if ((this._accountantFinalizeDate != value))
                {
                    this.OnAccountantFinalizeDateChanging(value);
                    this.RaiseDataMemberChanging("AccountantFinalizeDate");
                    this.ValidateProperty("AccountantFinalizeDate", value);
                    this._accountantFinalizeDate = value;
                    this.RaiseDataMemberChanged("AccountantFinalizeDate");
                    this.OnAccountantFinalizeDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AccountantId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long AccountantId
        {
            get
            {
                return this._accountantId;
            }
            set
            {
                if ((this._accountantId != value))
                {
                    this.OnAccountantIdChanging(value);
                    this.RaiseDataMemberChanging("AccountantId");
                    this.ValidateProperty("AccountantId", value);
                    this._accountantId = value;
                    this.RaiseDataMemberChanged("AccountantId");
                    this.OnAccountantIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BankName' value.
        /// </summary>
        [DataMember()]
        [StringLength(40)]
        public string BankName
        {
            get
            {
                return this._bankName;
            }
            set
            {
                if ((this._bankName != value))
                {
                    this.OnBankNameChanging(value);
                    this.RaiseDataMemberChanging("BankName");
                    this.ValidateProperty("BankName", value);
                    this._bankName = value;
                    this.RaiseDataMemberChanged("BankName");
                    this.OnBankNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillPaymentId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long BillPaymentId
        {
            get
            {
                return this._billPaymentId;
            }
            set
            {
                if ((this._billPaymentId != value))
                {
                    this.OnBillPaymentIdChanging(value);
                    this.ValidateProperty("BillPaymentId", value);
                    this._billPaymentId = value;
                    this.RaisePropertyChanged("BillPaymentId");
                    this.OnBillPaymentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="BillPaymentInfo"/> entity instances.
        /// </summary>
        [Association("BillPayment_BillPaymentInfo", "BillPaymentId", "BillPaymentId")]
        [XmlIgnore()]
        public EntityCollection<BillPaymentInfo> BillPaymentInfoes
        {
            get
            {
                if ((this._billPaymentInfoes == null))
                {
                    this._billPaymentInfoes = new EntityCollection<BillPaymentInfo>(this, "BillPaymentInfoes", this.FilterBillPaymentInfoes, this.AttachBillPaymentInfoes, this.DetachBillPaymentInfoes);
                }
                return this._billPaymentInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BranchName' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string BranchName
        {
            get
            {
                return this._branchName;
            }
            set
            {
                if ((this._branchName != value))
                {
                    this.OnBranchNameChanging(value);
                    this.RaiseDataMemberChanging("BranchName");
                    this.ValidateProperty("BranchName", value);
                    this._branchName = value;
                    this.RaiseDataMemberChanged("BranchName");
                    this.OnBranchNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfIssue' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfIssue
        {
            get
            {
                return this._dateOfIssue;
            }
            set
            {
                if ((this._dateOfIssue != value))
                {
                    this.OnDateOfIssueChanging(value);
                    this.RaiseDataMemberChanging("DateOfIssue");
                    this.ValidateProperty("DateOfIssue", value);
                    this._dateOfIssue = value;
                    this.RaiseDataMemberChanged("DateOfIssue");
                    this.OnDateOfIssueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DDNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string DDNumber
        {
            get
            {
                return this._ddNumber;
            }
            set
            {
                if ((this._ddNumber != value))
                {
                    this.OnDDNumberChanging(value);
                    this.RaiseDataMemberChanging("DDNumber");
                    this.ValidateProperty("DDNumber", value);
                    this._ddNumber = value;
                    this.RaiseDataMemberChanged("DDNumber");
                    this.OnDDNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Dealer"/> entity.
        /// </summary>
        [Association("Dealer_BillPayment", "DealerId", "DealerId", IsForeignKey=true)]
        [XmlIgnore()]
        public Dealer Dealer
        {
            get
            {
                if ((this._dealer == null))
                {
                    this._dealer = new EntityRef<Dealer>(this, "Dealer", this.FilterDealer);
                }
                return this._dealer.Entity;
            }
            set
            {
                Dealer previous = this.Dealer;
                if ((previous != value))
                {
                    this.ValidateProperty("Dealer", value);
                    if ((previous != null))
                    {
                        this._dealer.Entity = null;
                        previous.BillPayments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DealerId = value.DealerId;
                    }
                    else
                    {
                        this.DealerId = default(long);
                    }
                    this._dealer.Entity = value;
                    if ((value != null))
                    {
                        value.BillPayments.Add(this);
                    }
                    this.RaisePropertyChanged("Dealer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DealerId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long DealerId
        {
            get
            {
                return this._dealerId;
            }
            set
            {
                if ((this._dealerId != value))
                {
                    this.OnDealerIdChanging(value);
                    this.RaiseDataMemberChanging("DealerId");
                    this.ValidateProperty("DealerId", value);
                    this._dealerId = value;
                    this.RaiseDataMemberChanged("DealerId");
                    this.OnDealerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_BillPayment", "RMId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.BillPayments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RMId = value.EmployeeId;
                    }
                    else
                    {
                        this.RMId = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.BillPayments.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_BillPayment1", "AccountantId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee1
        {
            get
            {
                if ((this._employee1 == null))
                {
                    this._employee1 = new EntityRef<Employee>(this, "Employee1", this.FilterEmployee1);
                }
                return this._employee1.Entity;
            }
            set
            {
                Employee previous = this.Employee1;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee1", value);
                    if ((previous != null))
                    {
                        this._employee1.Entity = null;
                        previous.BillPayments1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AccountantId = value.EmployeeId;
                    }
                    else
                    {
                        this.AccountantId = default(long);
                    }
                    this._employee1.Entity = value;
                    if ((value != null))
                    {
                        value.BillPayments1.Add(this);
                    }
                    this.RaisePropertyChanged("Employee1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PaymentMethod' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string PaymentMethod
        {
            get
            {
                return this._paymentMethod;
            }
            set
            {
                if ((this._paymentMethod != value))
                {
                    this.OnPaymentMethodChanging(value);
                    this.RaiseDataMemberChanging("PaymentMethod");
                    this.ValidateProperty("PaymentMethod", value);
                    this._paymentMethod = value;
                    this.RaiseDataMemberChanged("PaymentMethod");
                    this.OnPaymentMethodChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RMId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long RMId
        {
            get
            {
                return this._rmId;
            }
            set
            {
                if ((this._rmId != value))
                {
                    this.OnRMIdChanging(value);
                    this.RaiseDataMemberChanging("RMId");
                    this.ValidateProperty("RMId", value);
                    this._rmId = value;
                    this.RaiseDataMemberChanged("RMId");
                    this.OnRMIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalAmount' value.
        /// </summary>
        [DataMember()]
        public double TotalAmount
        {
            get
            {
                return this._totalAmount;
            }
            set
            {
                if ((this._totalAmount != value))
                {
                    this.OnTotalAmountChanging(value);
                    this.RaiseDataMemberChanging("TotalAmount");
                    this.ValidateProperty("TotalAmount", value);
                    this._totalAmount = value;
                    this.RaiseDataMemberChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }
        
        private void AttachBillPaymentInfoes(BillPaymentInfo entity)
        {
            entity.BillPayment = this;
        }
        
        private void DetachBillPaymentInfoes(BillPaymentInfo entity)
        {
            entity.BillPayment = null;
        }
        
        private bool FilterBillPaymentInfoes(BillPaymentInfo entity)
        {
            return (entity.BillPaymentId == this.BillPaymentId);
        }
        
        private bool FilterDealer(Dealer entity)
        {
            return (entity.DealerId == this.DealerId);
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.RMId);
        }
        
        private bool FilterEmployee1(Employee entity)
        {
            return (entity.EmployeeId == this.AccountantId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._billPaymentId;
        }
    }
    
    /// <summary>
    /// The 'BillPaymentInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class BillPaymentInfo : Entity
    {
        
        private double _amount;
        
        private EntityRef<Bill> _bill;
        
        private long _billId;
        
        private EntityRef<BillPayment> _billPayment;
        
        private long _billPaymentId;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAmountChanging(double value);
        partial void OnAmountChanged();
        partial void OnBillIdChanging(long value);
        partial void OnBillIdChanged();
        partial void OnBillPaymentIdChanging(long value);
        partial void OnBillPaymentIdChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BillPaymentInfo"/> class.
        /// </summary>
        public BillPaymentInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public double Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Bill"/> entity.
        /// </summary>
        [Association("Bill_BillPaymentInfo", "BillId", "BillId", IsForeignKey=true)]
        [XmlIgnore()]
        public Bill Bill
        {
            get
            {
                if ((this._bill == null))
                {
                    this._bill = new EntityRef<Bill>(this, "Bill", this.FilterBill);
                }
                return this._bill.Entity;
            }
            set
            {
                Bill previous = this.Bill;
                if ((previous != value))
                {
                    this.ValidateProperty("Bill", value);
                    if ((previous != null))
                    {
                        this._bill.Entity = null;
                        previous.BillPaymentInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BillId = value.BillId;
                    }
                    else
                    {
                        this.BillId = default(long);
                    }
                    this._bill.Entity = value;
                    if ((value != null))
                    {
                        value.BillPaymentInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Bill");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long BillId
        {
            get
            {
                return this._billId;
            }
            set
            {
                if ((this._billId != value))
                {
                    this.OnBillIdChanging(value);
                    this.RaiseDataMemberChanging("BillId");
                    this.ValidateProperty("BillId", value);
                    this._billId = value;
                    this.RaiseDataMemberChanged("BillId");
                    this.OnBillIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BillPayment"/> entity.
        /// </summary>
        [Association("BillPayment_BillPaymentInfo", "BillPaymentId", "BillPaymentId", IsForeignKey=true)]
        [XmlIgnore()]
        public BillPayment BillPayment
        {
            get
            {
                if ((this._billPayment == null))
                {
                    this._billPayment = new EntityRef<BillPayment>(this, "BillPayment", this.FilterBillPayment);
                }
                return this._billPayment.Entity;
            }
            set
            {
                BillPayment previous = this.BillPayment;
                if ((previous != value))
                {
                    this.ValidateProperty("BillPayment", value);
                    if ((previous != null))
                    {
                        this._billPayment.Entity = null;
                        previous.BillPaymentInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BillPaymentId = value.BillPaymentId;
                    }
                    else
                    {
                        this.BillPaymentId = default(long);
                    }
                    this._billPayment.Entity = value;
                    if ((value != null))
                    {
                        value.BillPaymentInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("BillPayment");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillPaymentId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long BillPaymentId
        {
            get
            {
                return this._billPaymentId;
            }
            set
            {
                if ((this._billPaymentId != value))
                {
                    this.OnBillPaymentIdChanging(value);
                    this.RaiseDataMemberChanging("BillPaymentId");
                    this.ValidateProperty("BillPaymentId", value);
                    this._billPaymentId = value;
                    this.RaiseDataMemberChanged("BillPaymentId");
                    this.OnBillPaymentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_BillPaymentInfo", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.BillPaymentInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.BillPaymentInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        private bool FilterBill(Bill entity)
        {
            return (entity.BillId == this.BillId);
        }
        
        private bool FilterBillPayment(BillPayment entity)
        {
            return (entity.BillPaymentId == this.BillPaymentId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._billId, this._billPaymentId, this._productId);
        }
    }
    
    /// <summary>
    /// The 'BillProductInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class BillProductInfo : Entity
    {
        
        private EntityRef<Bill> _bill;
        
        private long _billId;
        
        private double _comissionPercentage;
        
        private string _lotId;
        
        private double _lotQuantity;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private double _productPrice;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBillIdChanging(long value);
        partial void OnBillIdChanged();
        partial void OnComissionPercentageChanging(double value);
        partial void OnComissionPercentageChanged();
        partial void OnLotIdChanging(string value);
        partial void OnLotIdChanged();
        partial void OnLotQuantityChanging(double value);
        partial void OnLotQuantityChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnProductPriceChanging(double value);
        partial void OnProductPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BillProductInfo"/> class.
        /// </summary>
        public BillProductInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Bill"/> entity.
        /// </summary>
        [Association("Bill_BillProductInfo", "BillId", "BillId", IsForeignKey=true)]
        [XmlIgnore()]
        public Bill Bill
        {
            get
            {
                if ((this._bill == null))
                {
                    this._bill = new EntityRef<Bill>(this, "Bill", this.FilterBill);
                }
                return this._bill.Entity;
            }
            set
            {
                Bill previous = this.Bill;
                if ((previous != value))
                {
                    this.ValidateProperty("Bill", value);
                    if ((previous != null))
                    {
                        this._bill.Entity = null;
                        previous.BillProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BillId = value.BillId;
                    }
                    else
                    {
                        this.BillId = default(long);
                    }
                    this._bill.Entity = value;
                    if ((value != null))
                    {
                        value.BillProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Bill");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long BillId
        {
            get
            {
                return this._billId;
            }
            set
            {
                if ((this._billId != value))
                {
                    this.OnBillIdChanging(value);
                    this.RaiseDataMemberChanging("BillId");
                    this.ValidateProperty("BillId", value);
                    this._billId = value;
                    this.RaiseDataMemberChanged("BillId");
                    this.OnBillIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ComissionPercentage' value.
        /// </summary>
        [DataMember()]
        public double ComissionPercentage
        {
            get
            {
                return this._comissionPercentage;
            }
            set
            {
                if ((this._comissionPercentage != value))
                {
                    this.OnComissionPercentageChanging(value);
                    this.RaiseDataMemberChanging("ComissionPercentage");
                    this.ValidateProperty("ComissionPercentage", value);
                    this._comissionPercentage = value;
                    this.RaiseDataMemberChanged("ComissionPercentage");
                    this.OnComissionPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string LotId
        {
            get
            {
                return this._lotId;
            }
            set
            {
                if ((this._lotId != value))
                {
                    this.OnLotIdChanging(value);
                    this.RaiseDataMemberChanging("LotId");
                    this.ValidateProperty("LotId", value);
                    this._lotId = value;
                    this.RaiseDataMemberChanged("LotId");
                    this.OnLotIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotQuantity' value.
        /// </summary>
        [DataMember()]
        public double LotQuantity
        {
            get
            {
                return this._lotQuantity;
            }
            set
            {
                if ((this._lotQuantity != value))
                {
                    this.OnLotQuantityChanging(value);
                    this.RaiseDataMemberChanging("LotQuantity");
                    this.ValidateProperty("LotQuantity", value);
                    this._lotQuantity = value;
                    this.RaiseDataMemberChanged("LotQuantity");
                    this.OnLotQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_BillProductInfo", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.BillProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.BillProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductPrice' value.
        /// </summary>
        [DataMember()]
        public double ProductPrice
        {
            get
            {
                return this._productPrice;
            }
            set
            {
                if ((this._productPrice != value))
                {
                    this.OnProductPriceChanging(value);
                    this.RaiseDataMemberChanging("ProductPrice");
                    this.ValidateProperty("ProductPrice", value);
                    this._productPrice = value;
                    this.RaiseDataMemberChanged("ProductPrice");
                    this.OnProductPriceChanged();
                }
            }
        }
        
        private bool FilterBill(Bill entity)
        {
            return (entity.BillId == this.BillId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._lotId == null))
            {
                return null;
            }
            return EntityKey.Create(this._billId, this._lotId, this._productId);
        }
    }
    
    /// <summary>
    /// The 'Commission' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Commission : Entity
    {
        
        private long _adminId;
        
        private long _commissionId;
        
        private string _commissionName;
        
        private string _commissionStatus;
        
        private short _duration;
        
        private EntityRef<Employee> _employee;
        
        private Nullable<DateTime> _introducedDate;
        
        private long _nsmId;
        
        private double _percentage;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAdminIdChanging(long value);
        partial void OnAdminIdChanged();
        partial void OnCommissionIdChanging(long value);
        partial void OnCommissionIdChanged();
        partial void OnCommissionNameChanging(string value);
        partial void OnCommissionNameChanged();
        partial void OnCommissionStatusChanging(string value);
        partial void OnCommissionStatusChanged();
        partial void OnDurationChanging(short value);
        partial void OnDurationChanged();
        partial void OnIntroducedDateChanging(Nullable<DateTime> value);
        partial void OnIntroducedDateChanged();
        partial void OnNSMIdChanging(long value);
        partial void OnNSMIdChanged();
        partial void OnPercentageChanging(double value);
        partial void OnPercentageChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Commission"/> class.
        /// </summary>
        public Commission()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AdminId' value.
        /// </summary>
        [DataMember()]
        public long AdminId
        {
            get
            {
                return this._adminId;
            }
            set
            {
                if ((this._adminId != value))
                {
                    this.OnAdminIdChanging(value);
                    this.RaiseDataMemberChanging("AdminId");
                    this.ValidateProperty("AdminId", value);
                    this._adminId = value;
                    this.RaiseDataMemberChanged("AdminId");
                    this.OnAdminIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CommissionId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long CommissionId
        {
            get
            {
                return this._commissionId;
            }
            set
            {
                if ((this._commissionId != value))
                {
                    this.OnCommissionIdChanging(value);
                    this.ValidateProperty("CommissionId", value);
                    this._commissionId = value;
                    this.RaisePropertyChanged("CommissionId");
                    this.OnCommissionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CommissionName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string CommissionName
        {
            get
            {
                return this._commissionName;
            }
            set
            {
                if ((this._commissionName != value))
                {
                    this.OnCommissionNameChanging(value);
                    this.RaiseDataMemberChanging("CommissionName");
                    this.ValidateProperty("CommissionName", value);
                    this._commissionName = value;
                    this.RaiseDataMemberChanged("CommissionName");
                    this.OnCommissionNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CommissionStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string CommissionStatus
        {
            get
            {
                return this._commissionStatus;
            }
            set
            {
                if ((this._commissionStatus != value))
                {
                    this.OnCommissionStatusChanging(value);
                    this.RaiseDataMemberChanging("CommissionStatus");
                    this.ValidateProperty("CommissionStatus", value);
                    this._commissionStatus = value;
                    this.RaiseDataMemberChanged("CommissionStatus");
                    this.OnCommissionStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Duration' value.
        /// </summary>
        [DataMember()]
        public short Duration
        {
            get
            {
                return this._duration;
            }
            set
            {
                if ((this._duration != value))
                {
                    this.OnDurationChanging(value);
                    this.RaiseDataMemberChanging("Duration");
                    this.ValidateProperty("Duration", value);
                    this._duration = value;
                    this.RaiseDataMemberChanged("Duration");
                    this.OnDurationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Commission", "NSMId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((value != null))
                    {
                        this.NSMId = value.EmployeeId;
                    }
                    else
                    {
                        this.NSMId = default(long);
                    }
                    this._employee.Entity = value;
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IntroducedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> IntroducedDate
        {
            get
            {
                return this._introducedDate;
            }
            set
            {
                if ((this._introducedDate != value))
                {
                    this.OnIntroducedDateChanging(value);
                    this.RaiseDataMemberChanging("IntroducedDate");
                    this.ValidateProperty("IntroducedDate", value);
                    this._introducedDate = value;
                    this.RaiseDataMemberChanged("IntroducedDate");
                    this.OnIntroducedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NSMId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long NSMId
        {
            get
            {
                return this._nsmId;
            }
            set
            {
                if ((this._nsmId != value))
                {
                    this.OnNSMIdChanging(value);
                    this.RaiseDataMemberChanging("NSMId");
                    this.ValidateProperty("NSMId", value);
                    this._nsmId = value;
                    this.RaiseDataMemberChanged("NSMId");
                    this.OnNSMIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Percentage' value.
        /// </summary>
        [DataMember()]
        public double Percentage
        {
            get
            {
                return this._percentage;
            }
            set
            {
                if ((this._percentage != value))
                {
                    this.OnPercentageChanging(value);
                    this.RaiseDataMemberChanging("Percentage");
                    this.ValidateProperty("Percentage", value);
                    this._percentage = value;
                    this.RaiseDataMemberChanged("Percentage");
                    this.OnPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_Commission", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.Commissions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.Commissions.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.NSMId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._commissionId;
        }
    }
    
    /// <summary>
    /// The 'Dealer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Dealer : Entity
    {
        
        private string _activityStatus;
        
        private EntityCollection<BillPayment> _billPayments;
        
        private string _businessType;
        
        private string _companyAddress;
        
        private string _companyName;
        
        private string _contactNo;
        
        private double _creditLimit;
        
        private DateTime _dateOfAdminApproval;
        
        private DateTime _dateOfBirth;
        
        private DateTime _dateOfRegistration;
        
        private long _dealerId;
        
        private string _dealershipCompany;
        
        private EntityCollection<DueInfo> _dueInfoes;
        
        private string _emailAddress;
        
        private EntityRef<Employee> _employee;
        
        private DateTime _expectedDefaulterDate;
        
        private string _fatherName;
        
        private bool _hasAnotherDealership;
        
        private bool _hasOwnOffice;
        
        private EntityCollection<Indent> _indents;
        
        private DateTime _licenseIssueDate;
        
        private string _licenseNo;
        
        private string _motherName;
        
        private string _name;
        
        private string _nationality;
        
        private string _ownerAddress;
        
        private string _ownerName;
        
        private string _password;
        
        private string _permamentAddress;
        
        private string _pictureLink;
        
        private string _preferredTypeOfPayment;
        
        private string _presentAddress;
        
        private EntityRef<Region> _region;
        
        private long _regionId;
        
        private long _salesOfficerId;
        
        private EntityCollection<SalesReturn> _salesReturns;
        
        private double _totalDue;
        
        private string _userName;
        
        private EntityCollection<YearSummaryDealer> _yearSummaryDealers;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActivityStatusChanging(string value);
        partial void OnActivityStatusChanged();
        partial void OnBusinessTypeChanging(string value);
        partial void OnBusinessTypeChanged();
        partial void OnCompanyAddressChanging(string value);
        partial void OnCompanyAddressChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnContactNoChanging(string value);
        partial void OnContactNoChanged();
        partial void OnCreditLimitChanging(double value);
        partial void OnCreditLimitChanged();
        partial void OnDateOfAdminApprovalChanging(DateTime value);
        partial void OnDateOfAdminApprovalChanged();
        partial void OnDateOfBirthChanging(DateTime value);
        partial void OnDateOfBirthChanged();
        partial void OnDateOfRegistrationChanging(DateTime value);
        partial void OnDateOfRegistrationChanged();
        partial void OnDealerIdChanging(long value);
        partial void OnDealerIdChanged();
        partial void OnDealershipCompanyChanging(string value);
        partial void OnDealershipCompanyChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OnExpectedDefaulterDateChanging(DateTime value);
        partial void OnExpectedDefaulterDateChanged();
        partial void OnFatherNameChanging(string value);
        partial void OnFatherNameChanged();
        partial void OnHasAnotherDealershipChanging(bool value);
        partial void OnHasAnotherDealershipChanged();
        partial void OnHasOwnOfficeChanging(bool value);
        partial void OnHasOwnOfficeChanged();
        partial void OnLicenseIssueDateChanging(DateTime value);
        partial void OnLicenseIssueDateChanged();
        partial void OnLicenseNoChanging(string value);
        partial void OnLicenseNoChanged();
        partial void OnMotherNameChanging(string value);
        partial void OnMotherNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNationalityChanging(string value);
        partial void OnNationalityChanged();
        partial void OnOwnerAddressChanging(string value);
        partial void OnOwnerAddressChanged();
        partial void OnOwnerNameChanging(string value);
        partial void OnOwnerNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPermamentAddressChanging(string value);
        partial void OnPermamentAddressChanged();
        partial void OnPictureLinkChanging(string value);
        partial void OnPictureLinkChanged();
        partial void OnPreferredTypeOfPaymentChanging(string value);
        partial void OnPreferredTypeOfPaymentChanged();
        partial void OnPresentAddressChanging(string value);
        partial void OnPresentAddressChanged();
        partial void OnRegionIdChanging(long value);
        partial void OnRegionIdChanged();
        partial void OnSalesOfficerIdChanging(long value);
        partial void OnSalesOfficerIdChanged();
        partial void OnTotalDueChanging(double value);
        partial void OnTotalDueChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Dealer"/> class.
        /// </summary>
        public Dealer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ActivityStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string ActivityStatus
        {
            get
            {
                return this._activityStatus;
            }
            set
            {
                if ((this._activityStatus != value))
                {
                    this.OnActivityStatusChanging(value);
                    this.RaiseDataMemberChanging("ActivityStatus");
                    this.ValidateProperty("ActivityStatus", value);
                    this._activityStatus = value;
                    this.RaiseDataMemberChanged("ActivityStatus");
                    this.OnActivityStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="BillPayment"/> entity instances.
        /// </summary>
        [Association("Dealer_BillPayment", "DealerId", "DealerId")]
        [XmlIgnore()]
        public EntityCollection<BillPayment> BillPayments
        {
            get
            {
                if ((this._billPayments == null))
                {
                    this._billPayments = new EntityCollection<BillPayment>(this, "BillPayments", this.FilterBillPayments, this.AttachBillPayments, this.DetachBillPayments);
                }
                return this._billPayments;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessType' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(60)]
        public string BusinessType
        {
            get
            {
                return this._businessType;
            }
            set
            {
                if ((this._businessType != value))
                {
                    this.OnBusinessTypeChanging(value);
                    this.RaiseDataMemberChanging("BusinessType");
                    this.ValidateProperty("BusinessType", value);
                    this._businessType = value;
                    this.RaiseDataMemberChanged("BusinessType");
                    this.OnBusinessTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyAddress' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string CompanyAddress
        {
            get
            {
                return this._companyAddress;
            }
            set
            {
                if ((this._companyAddress != value))
                {
                    this.OnCompanyAddressChanging(value);
                    this.RaiseDataMemberChanging("CompanyAddress");
                    this.ValidateProperty("CompanyAddress", value);
                    this._companyAddress = value;
                    this.RaiseDataMemberChanged("CompanyAddress");
                    this.OnCompanyAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactNo' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string ContactNo
        {
            get
            {
                return this._contactNo;
            }
            set
            {
                if ((this._contactNo != value))
                {
                    this.OnContactNoChanging(value);
                    this.RaiseDataMemberChanging("ContactNo");
                    this.ValidateProperty("ContactNo", value);
                    this._contactNo = value;
                    this.RaiseDataMemberChanged("ContactNo");
                    this.OnContactNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreditLimit' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public double CreditLimit
        {
            get
            {
                return this._creditLimit;
            }
            set
            {
                if ((this._creditLimit != value))
                {
                    this.OnCreditLimitChanging(value);
                    this.RaiseDataMemberChanging("CreditLimit");
                    this.ValidateProperty("CreditLimit", value);
                    this._creditLimit = value;
                    this.RaiseDataMemberChanged("CreditLimit");
                    this.OnCreditLimitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfAdminApproval' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfAdminApproval
        {
            get
            {
                return this._dateOfAdminApproval;
            }
            set
            {
                if ((this._dateOfAdminApproval != value))
                {
                    this.OnDateOfAdminApprovalChanging(value);
                    this.RaiseDataMemberChanging("DateOfAdminApproval");
                    this.ValidateProperty("DateOfAdminApproval", value);
                    this._dateOfAdminApproval = value;
                    this.RaiseDataMemberChanged("DateOfAdminApproval");
                    this.OnDateOfAdminApprovalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfBirth' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public DateTime DateOfBirth
        {
            get
            {
                return this._dateOfBirth;
            }
            set
            {
                if ((this._dateOfBirth != value))
                {
                    this.OnDateOfBirthChanging(value);
                    this.RaiseDataMemberChanging("DateOfBirth");
                    this.ValidateProperty("DateOfBirth", value);
                    this._dateOfBirth = value;
                    this.RaiseDataMemberChanged("DateOfBirth");
                    this.OnDateOfBirthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfRegistration' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public DateTime DateOfRegistration
        {
            get
            {
                return this._dateOfRegistration;
            }
            set
            {
                if ((this._dateOfRegistration != value))
                {
                    this.OnDateOfRegistrationChanging(value);
                    this.RaiseDataMemberChanging("DateOfRegistration");
                    this.ValidateProperty("DateOfRegistration", value);
                    this._dateOfRegistration = value;
                    this.RaiseDataMemberChanged("DateOfRegistration");
                    this.OnDateOfRegistrationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DealerId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long DealerId
        {
            get
            {
                return this._dealerId;
            }
            set
            {
                if ((this._dealerId != value))
                {
                    this.OnDealerIdChanging(value);
                    this.ValidateProperty("DealerId", value);
                    this._dealerId = value;
                    this.RaisePropertyChanged("DealerId");
                    this.OnDealerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DealershipCompany' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string DealershipCompany
        {
            get
            {
                return this._dealershipCompany;
            }
            set
            {
                if ((this._dealershipCompany != value))
                {
                    this.OnDealershipCompanyChanging(value);
                    this.RaiseDataMemberChanging("DealershipCompany");
                    this.ValidateProperty("DealershipCompany", value);
                    this._dealershipCompany = value;
                    this.RaiseDataMemberChanged("DealershipCompany");
                    this.OnDealershipCompanyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DueInfo"/> entity instances.
        /// </summary>
        [Association("Dealer_DueInfo", "DealerId", "DealerId")]
        [XmlIgnore()]
        public EntityCollection<DueInfo> DueInfoes
        {
            get
            {
                if ((this._dueInfoes == null))
                {
                    this._dueInfoes = new EntityCollection<DueInfo>(this, "DueInfoes", this.FilterDueInfoes, this.AttachDueInfoes, this.DetachDueInfoes);
                }
                return this._dueInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailAddress' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string EmailAddress
        {
            get
            {
                return this._emailAddress;
            }
            set
            {
                if ((this._emailAddress != value))
                {
                    this.OnEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("EmailAddress");
                    this.ValidateProperty("EmailAddress", value);
                    this._emailAddress = value;
                    this.RaiseDataMemberChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Dealer", "SalesOfficerId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.Dealers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SalesOfficerId = value.EmployeeId;
                    }
                    else
                    {
                        this.SalesOfficerId = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.Dealers.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExpectedDefaulterDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ExpectedDefaulterDate
        {
            get
            {
                return this._expectedDefaulterDate;
            }
            set
            {
                if ((this._expectedDefaulterDate != value))
                {
                    this.OnExpectedDefaulterDateChanging(value);
                    this.RaiseDataMemberChanging("ExpectedDefaulterDate");
                    this.ValidateProperty("ExpectedDefaulterDate", value);
                    this._expectedDefaulterDate = value;
                    this.RaiseDataMemberChanged("ExpectedDefaulterDate");
                    this.OnExpectedDefaulterDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FatherName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string FatherName
        {
            get
            {
                return this._fatherName;
            }
            set
            {
                if ((this._fatherName != value))
                {
                    this.OnFatherNameChanging(value);
                    this.RaiseDataMemberChanging("FatherName");
                    this.ValidateProperty("FatherName", value);
                    this._fatherName = value;
                    this.RaiseDataMemberChanged("FatherName");
                    this.OnFatherNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HasAnotherDealership' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public bool HasAnotherDealership
        {
            get
            {
                return this._hasAnotherDealership;
            }
            set
            {
                if ((this._hasAnotherDealership != value))
                {
                    this.OnHasAnotherDealershipChanging(value);
                    this.RaiseDataMemberChanging("HasAnotherDealership");
                    this.ValidateProperty("HasAnotherDealership", value);
                    this._hasAnotherDealership = value;
                    this.RaiseDataMemberChanged("HasAnotherDealership");
                    this.OnHasAnotherDealershipChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HasOwnOffice' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public bool HasOwnOffice
        {
            get
            {
                return this._hasOwnOffice;
            }
            set
            {
                if ((this._hasOwnOffice != value))
                {
                    this.OnHasOwnOfficeChanging(value);
                    this.RaiseDataMemberChanging("HasOwnOffice");
                    this.ValidateProperty("HasOwnOffice", value);
                    this._hasOwnOffice = value;
                    this.RaiseDataMemberChanged("HasOwnOffice");
                    this.OnHasOwnOfficeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Indent"/> entity instances.
        /// </summary>
        [Association("Dealer_Indent", "DealerId", "IssuedById")]
        [XmlIgnore()]
        public EntityCollection<Indent> Indents
        {
            get
            {
                if ((this._indents == null))
                {
                    this._indents = new EntityCollection<Indent>(this, "Indents", this.FilterIndents, this.AttachIndents, this.DetachIndents);
                }
                return this._indents;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LicenseIssueDate' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public DateTime LicenseIssueDate
        {
            get
            {
                return this._licenseIssueDate;
            }
            set
            {
                if ((this._licenseIssueDate != value))
                {
                    this.OnLicenseIssueDateChanging(value);
                    this.RaiseDataMemberChanging("LicenseIssueDate");
                    this.ValidateProperty("LicenseIssueDate", value);
                    this._licenseIssueDate = value;
                    this.RaiseDataMemberChanged("LicenseIssueDate");
                    this.OnLicenseIssueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LicenseNo' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string LicenseNo
        {
            get
            {
                return this._licenseNo;
            }
            set
            {
                if ((this._licenseNo != value))
                {
                    this.OnLicenseNoChanging(value);
                    this.RaiseDataMemberChanging("LicenseNo");
                    this.ValidateProperty("LicenseNo", value);
                    this._licenseNo = value;
                    this.RaiseDataMemberChanged("LicenseNo");
                    this.OnLicenseNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MotherName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string MotherName
        {
            get
            {
                return this._motherName;
            }
            set
            {
                if ((this._motherName != value))
                {
                    this.OnMotherNameChanging(value);
                    this.RaiseDataMemberChanging("MotherName");
                    this.ValidateProperty("MotherName", value);
                    this._motherName = value;
                    this.RaiseDataMemberChanged("MotherName");
                    this.OnMotherNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nationality' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Nationality
        {
            get
            {
                return this._nationality;
            }
            set
            {
                if ((this._nationality != value))
                {
                    this.OnNationalityChanging(value);
                    this.RaiseDataMemberChanging("Nationality");
                    this.ValidateProperty("Nationality", value);
                    this._nationality = value;
                    this.RaiseDataMemberChanged("Nationality");
                    this.OnNationalityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerAddress' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string OwnerAddress
        {
            get
            {
                return this._ownerAddress;
            }
            set
            {
                if ((this._ownerAddress != value))
                {
                    this.OnOwnerAddressChanging(value);
                    this.RaiseDataMemberChanging("OwnerAddress");
                    this.ValidateProperty("OwnerAddress", value);
                    this._ownerAddress = value;
                    this.RaiseDataMemberChanged("OwnerAddress");
                    this.OnOwnerAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string OwnerName
        {
            get
            {
                return this._ownerName;
            }
            set
            {
                if ((this._ownerName != value))
                {
                    this.OnOwnerNameChanging(value);
                    this.RaiseDataMemberChanging("OwnerName");
                    this.ValidateProperty("OwnerName", value);
                    this._ownerName = value;
                    this.RaiseDataMemberChanged("OwnerName");
                    this.OnOwnerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PermamentAddress' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string PermamentAddress
        {
            get
            {
                return this._permamentAddress;
            }
            set
            {
                if ((this._permamentAddress != value))
                {
                    this.OnPermamentAddressChanging(value);
                    this.RaiseDataMemberChanging("PermamentAddress");
                    this.ValidateProperty("PermamentAddress", value);
                    this._permamentAddress = value;
                    this.RaiseDataMemberChanged("PermamentAddress");
                    this.OnPermamentAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PictureLink' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string PictureLink
        {
            get
            {
                return this._pictureLink;
            }
            set
            {
                if ((this._pictureLink != value))
                {
                    this.OnPictureLinkChanging(value);
                    this.RaiseDataMemberChanging("PictureLink");
                    this.ValidateProperty("PictureLink", value);
                    this._pictureLink = value;
                    this.RaiseDataMemberChanged("PictureLink");
                    this.OnPictureLinkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferredTypeOfPayment' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string PreferredTypeOfPayment
        {
            get
            {
                return this._preferredTypeOfPayment;
            }
            set
            {
                if ((this._preferredTypeOfPayment != value))
                {
                    this.OnPreferredTypeOfPaymentChanging(value);
                    this.RaiseDataMemberChanging("PreferredTypeOfPayment");
                    this.ValidateProperty("PreferredTypeOfPayment", value);
                    this._preferredTypeOfPayment = value;
                    this.RaiseDataMemberChanged("PreferredTypeOfPayment");
                    this.OnPreferredTypeOfPaymentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PresentAddress' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string PresentAddress
        {
            get
            {
                return this._presentAddress;
            }
            set
            {
                if ((this._presentAddress != value))
                {
                    this.OnPresentAddressChanging(value);
                    this.RaiseDataMemberChanging("PresentAddress");
                    this.ValidateProperty("PresentAddress", value);
                    this._presentAddress = value;
                    this.RaiseDataMemberChanged("PresentAddress");
                    this.OnPresentAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Region"/> entity.
        /// </summary>
        [Association("Region_Dealer", "RegionId", "RegionId", IsForeignKey=true)]
        [XmlIgnore()]
        public Region Region
        {
            get
            {
                if ((this._region == null))
                {
                    this._region = new EntityRef<Region>(this, "Region", this.FilterRegion);
                }
                return this._region.Entity;
            }
            set
            {
                Region previous = this.Region;
                if ((previous != value))
                {
                    this.ValidateProperty("Region", value);
                    if ((previous != null))
                    {
                        this._region.Entity = null;
                        previous.Dealers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RegionId = value.RegionId;
                    }
                    else
                    {
                        this.RegionId = default(long);
                    }
                    this._region.Entity = value;
                    if ((value != null))
                    {
                        value.Dealers.Add(this);
                    }
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionId' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public long RegionId
        {
            get
            {
                return this._regionId;
            }
            set
            {
                if ((this._regionId != value))
                {
                    this.OnRegionIdChanging(value);
                    this.RaiseDataMemberChanging("RegionId");
                    this.ValidateProperty("RegionId", value);
                    this._regionId = value;
                    this.RaiseDataMemberChanged("RegionId");
                    this.OnRegionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesOfficerId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long SalesOfficerId
        {
            get
            {
                return this._salesOfficerId;
            }
            set
            {
                if ((this._salesOfficerId != value))
                {
                    this.OnSalesOfficerIdChanging(value);
                    this.RaiseDataMemberChanging("SalesOfficerId");
                    this.ValidateProperty("SalesOfficerId", value);
                    this._salesOfficerId = value;
                    this.RaiseDataMemberChanged("SalesOfficerId");
                    this.OnSalesOfficerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SalesReturn"/> entity instances.
        /// </summary>
        [Association("Dealer_SalesReturn", "DealerId", "DealerId")]
        [XmlIgnore()]
        public EntityCollection<SalesReturn> SalesReturns
        {
            get
            {
                if ((this._salesReturns == null))
                {
                    this._salesReturns = new EntityCollection<SalesReturn>(this, "SalesReturns", this.FilterSalesReturns, this.AttachSalesReturns, this.DetachSalesReturns);
                }
                return this._salesReturns;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalDue' value.
        /// </summary>
        [DataMember()]
        public double TotalDue
        {
            get
            {
                return this._totalDue;
            }
            set
            {
                if ((this._totalDue != value))
                {
                    this.OnTotalDueChanging(value);
                    this.RaiseDataMemberChanging("TotalDue");
                    this.ValidateProperty("TotalDue", value);
                    this._totalDue = value;
                    this.RaiseDataMemberChanged("TotalDue");
                    this.OnTotalDueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="YearSummaryDealer"/> entity instances.
        /// </summary>
        [Association("Dealer_YearSummaryDealer", "DealerId", "DealerId")]
        [XmlIgnore()]
        public EntityCollection<YearSummaryDealer> YearSummaryDealers
        {
            get
            {
                if ((this._yearSummaryDealers == null))
                {
                    this._yearSummaryDealers = new EntityCollection<YearSummaryDealer>(this, "YearSummaryDealers", this.FilterYearSummaryDealers, this.AttachYearSummaryDealers, this.DetachYearSummaryDealers);
                }
                return this._yearSummaryDealers;
            }
        }
        
        private void AttachBillPayments(BillPayment entity)
        {
            entity.Dealer = this;
        }
        
        private void DetachBillPayments(BillPayment entity)
        {
            entity.Dealer = null;
        }
        
        private bool FilterBillPayments(BillPayment entity)
        {
            return (entity.DealerId == this.DealerId);
        }
        
        private void AttachDueInfoes(DueInfo entity)
        {
            entity.Dealer = this;
        }
        
        private void DetachDueInfoes(DueInfo entity)
        {
            entity.Dealer = null;
        }
        
        private bool FilterDueInfoes(DueInfo entity)
        {
            return (entity.DealerId == this.DealerId);
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.SalesOfficerId);
        }
        
        private void AttachIndents(Indent entity)
        {
            entity.Dealer = this;
        }
        
        private void DetachIndents(Indent entity)
        {
            entity.Dealer = null;
        }
        
        private bool FilterIndents(Indent entity)
        {
            return (entity.IssuedById == this.DealerId);
        }
        
        private bool FilterRegion(Region entity)
        {
            return (entity.RegionId == this.RegionId);
        }
        
        private void AttachSalesReturns(SalesReturn entity)
        {
            entity.Dealer = this;
        }
        
        private void DetachSalesReturns(SalesReturn entity)
        {
            entity.Dealer = null;
        }
        
        private bool FilterSalesReturns(SalesReturn entity)
        {
            return (entity.DealerId == this.DealerId);
        }
        
        private void AttachYearSummaryDealers(YearSummaryDealer entity)
        {
            entity.Dealer = this;
        }
        
        private void DetachYearSummaryDealers(YearSummaryDealer entity)
        {
            entity.Dealer = null;
        }
        
        private bool FilterYearSummaryDealers(YearSummaryDealer entity)
        {
            return (entity.DealerId == this.DealerId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._dealerId;
        }
    }
    
    /// <summary>
    /// The 'DueInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class DueInfo : Entity
    {
        
        private EntityRef<Bill> _bill;
        
        private long _billId;
        
        private EntityRef<Dealer> _dealer;
        
        private long _dealerId;
        
        private double _due;
        
        private string _dueStatus;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBillIdChanging(long value);
        partial void OnBillIdChanged();
        partial void OnDealerIdChanging(long value);
        partial void OnDealerIdChanged();
        partial void OnDueChanging(double value);
        partial void OnDueChanged();
        partial void OnDueStatusChanging(string value);
        partial void OnDueStatusChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DueInfo"/> class.
        /// </summary>
        public DueInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Bill"/> entity.
        /// </summary>
        [Association("Bill_DueInfo", "BillId", "BillId", IsForeignKey=true)]
        [XmlIgnore()]
        public Bill Bill
        {
            get
            {
                if ((this._bill == null))
                {
                    this._bill = new EntityRef<Bill>(this, "Bill", this.FilterBill);
                }
                return this._bill.Entity;
            }
            set
            {
                Bill previous = this.Bill;
                if ((previous != value))
                {
                    this.ValidateProperty("Bill", value);
                    if ((previous != null))
                    {
                        this._bill.Entity = null;
                        previous.DueInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BillId = value.BillId;
                    }
                    else
                    {
                        this.BillId = default(long);
                    }
                    this._bill.Entity = value;
                    if ((value != null))
                    {
                        value.DueInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Bill");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long BillId
        {
            get
            {
                return this._billId;
            }
            set
            {
                if ((this._billId != value))
                {
                    this.OnBillIdChanging(value);
                    this.RaiseDataMemberChanging("BillId");
                    this.ValidateProperty("BillId", value);
                    this._billId = value;
                    this.RaiseDataMemberChanged("BillId");
                    this.OnBillIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Dealer"/> entity.
        /// </summary>
        [Association("Dealer_DueInfo", "DealerId", "DealerId", IsForeignKey=true)]
        [XmlIgnore()]
        public Dealer Dealer
        {
            get
            {
                if ((this._dealer == null))
                {
                    this._dealer = new EntityRef<Dealer>(this, "Dealer", this.FilterDealer);
                }
                return this._dealer.Entity;
            }
            set
            {
                Dealer previous = this.Dealer;
                if ((previous != value))
                {
                    this.ValidateProperty("Dealer", value);
                    if ((previous != null))
                    {
                        this._dealer.Entity = null;
                        previous.DueInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DealerId = value.DealerId;
                    }
                    else
                    {
                        this.DealerId = default(long);
                    }
                    this._dealer.Entity = value;
                    if ((value != null))
                    {
                        value.DueInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Dealer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DealerId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long DealerId
        {
            get
            {
                return this._dealerId;
            }
            set
            {
                if ((this._dealerId != value))
                {
                    this.OnDealerIdChanging(value);
                    this.RaiseDataMemberChanging("DealerId");
                    this.ValidateProperty("DealerId", value);
                    this._dealerId = value;
                    this.RaiseDataMemberChanged("DealerId");
                    this.OnDealerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Due' value.
        /// </summary>
        [DataMember()]
        public double Due
        {
            get
            {
                return this._due;
            }
            set
            {
                if ((this._due != value))
                {
                    this.OnDueChanging(value);
                    this.RaiseDataMemberChanging("Due");
                    this.ValidateProperty("Due", value);
                    this._due = value;
                    this.RaiseDataMemberChanged("Due");
                    this.OnDueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DueStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string DueStatus
        {
            get
            {
                return this._dueStatus;
            }
            set
            {
                if ((this._dueStatus != value))
                {
                    this.OnDueStatusChanging(value);
                    this.RaiseDataMemberChanging("DueStatus");
                    this.ValidateProperty("DueStatus", value);
                    this._dueStatus = value;
                    this.RaiseDataMemberChanged("DueStatus");
                    this.OnDueStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_DueInfo", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.DueInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.DueInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        private bool FilterBill(Bill entity)
        {
            return (entity.BillId == this.BillId);
        }
        
        private bool FilterDealer(Dealer entity)
        {
            return (entity.DealerId == this.DealerId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._billId, this._productId);
        }
    }
    
    /// <summary>
    /// The 'Employee' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Employee : Entity
    {
        
        private string _activityStatus;
        
        private EntityCollection<BillPayment> _billPayments;
        
        private EntityCollection<BillPayment> _billPayments1;
        
        private EntityCollection<Bill> _bills;
        
        private EntityCollection<Dealer> _dealers;
        
        private string _designation;
        
        private long _employeeId;
        
        private EntityCollection<ExpenditureInfo> _expenditureInfoes;
        
        private EntityCollection<Expenditure> _expenditures;
        
        private EntityCollection<Expenditure> _expenditures1;
        
        private EntityCollection<Indent> _indents;
        
        private EntityCollection<Inventory> _inventories;
        
        private EntityCollection<Inventory> _inventories1;
        
        private EntityCollection<MessageDelivery> _messageDeliveries;
        
        private EntityCollection<MessageDelivery> _messageDeliveries1;
        
        private EntityCollection<MRR> _mrRs;
        
        private EntityCollection<NoticeBoard> _noticeBoards;
        
        private EntityCollection<Package> _packages;
        
        private EntityCollection<Package> _packages1;
        
        private string _password;
        
        private EntityRef<Person> _person;
        
        private long _personId;
        
        private EntityCollection<PLR> _plRs;
        
        private EntityCollection<PLR> _plRs1;
        
        private EntityCollection<ProductEdit> _productEdits;
        
        private EntityRef<Region> _region;
        
        private long _regionId;
        
        private EntityCollection<Requisition> _requisitions;
        
        private EntityCollection<Requisition> _requisitions1;
        
        private EntityCollection<SalesOfficerTarget> _salesOfficerTargets;
        
        private EntityCollection<SalesReturn> _salesReturns;
        
        private string _userName;
        
        private EntityCollection<YearSummarySOExpenditure> _yearSummarySOExpenditures;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActivityStatusChanging(string value);
        partial void OnActivityStatusChanged();
        partial void OnDesignationChanging(string value);
        partial void OnDesignationChanged();
        partial void OnEmployeeIdChanging(long value);
        partial void OnEmployeeIdChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPersonIdChanging(long value);
        partial void OnPersonIdChanged();
        partial void OnRegionIdChanging(long value);
        partial void OnRegionIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee"/> class.
        /// </summary>
        public Employee()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ActivityStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string ActivityStatus
        {
            get
            {
                return this._activityStatus;
            }
            set
            {
                if ((this._activityStatus != value))
                {
                    this.OnActivityStatusChanging(value);
                    this.RaiseDataMemberChanging("ActivityStatus");
                    this.ValidateProperty("ActivityStatus", value);
                    this._activityStatus = value;
                    this.RaiseDataMemberChanged("ActivityStatus");
                    this.OnActivityStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="BillPayment"/> entity instances.
        /// </summary>
        [Association("Employee_BillPayment", "EmployeeId", "RMId")]
        [XmlIgnore()]
        public EntityCollection<BillPayment> BillPayments
        {
            get
            {
                if ((this._billPayments == null))
                {
                    this._billPayments = new EntityCollection<BillPayment>(this, "BillPayments", this.FilterBillPayments, this.AttachBillPayments, this.DetachBillPayments);
                }
                return this._billPayments;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="BillPayment"/> entity instances.
        /// </summary>
        [Association("Employee_BillPayment1", "EmployeeId", "AccountantId")]
        [XmlIgnore()]
        public EntityCollection<BillPayment> BillPayments1
        {
            get
            {
                if ((this._billPayments1 == null))
                {
                    this._billPayments1 = new EntityCollection<BillPayment>(this, "BillPayments1", this.FilterBillPayments1, this.AttachBillPayments1, this.DetachBillPayments1);
                }
                return this._billPayments1;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Bill"/> entity instances.
        /// </summary>
        [Association("Employee_Bill", "EmployeeId", "DispatchedById")]
        [XmlIgnore()]
        public EntityCollection<Bill> Bills
        {
            get
            {
                if ((this._bills == null))
                {
                    this._bills = new EntityCollection<Bill>(this, "Bills", this.FilterBills, this.AttachBills, this.DetachBills);
                }
                return this._bills;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Dealer"/> entity instances.
        /// </summary>
        [Association("Employee_Dealer", "EmployeeId", "SalesOfficerId")]
        [XmlIgnore()]
        public EntityCollection<Dealer> Dealers
        {
            get
            {
                if ((this._dealers == null))
                {
                    this._dealers = new EntityCollection<Dealer>(this, "Dealers", this.FilterDealers, this.AttachDealers, this.DetachDealers);
                }
                return this._dealers;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Designation' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string Designation
        {
            get
            {
                return this._designation;
            }
            set
            {
                if ((this._designation != value))
                {
                    this.OnDesignationChanging(value);
                    this.RaiseDataMemberChanging("Designation");
                    this.ValidateProperty("Designation", value);
                    this._designation = value;
                    this.RaiseDataMemberChanged("Designation");
                    this.OnDesignationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long EmployeeId
        {
            get
            {
                return this._employeeId;
            }
            set
            {
                if ((this._employeeId != value))
                {
                    this.OnEmployeeIdChanging(value);
                    this.ValidateProperty("EmployeeId", value);
                    this._employeeId = value;
                    this.RaisePropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ExpenditureInfo"/> entity instances.
        /// </summary>
        [Association("Employee_ExpenditureInfo", "EmployeeId", "SalesOfficerId")]
        [XmlIgnore()]
        public EntityCollection<ExpenditureInfo> ExpenditureInfoes
        {
            get
            {
                if ((this._expenditureInfoes == null))
                {
                    this._expenditureInfoes = new EntityCollection<ExpenditureInfo>(this, "ExpenditureInfoes", this.FilterExpenditureInfoes, this.AttachExpenditureInfoes, this.DetachExpenditureInfoes);
                }
                return this._expenditureInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Expenditure"/> entity instances.
        /// </summary>
        [Association("Employee_Expenditure", "EmployeeId", "PlacedById")]
        [XmlIgnore()]
        public EntityCollection<Expenditure> Expenditures
        {
            get
            {
                if ((this._expenditures == null))
                {
                    this._expenditures = new EntityCollection<Expenditure>(this, "Expenditures", this.FilterExpenditures, this.AttachExpenditures, this.DetachExpenditures);
                }
                return this._expenditures;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Expenditure"/> entity instances.
        /// </summary>
        [Association("Employee_Expenditure1", "EmployeeId", "PlacedToId")]
        [XmlIgnore()]
        public EntityCollection<Expenditure> Expenditures1
        {
            get
            {
                if ((this._expenditures1 == null))
                {
                    this._expenditures1 = new EntityCollection<Expenditure>(this, "Expenditures1", this.FilterExpenditures1, this.AttachExpenditures1, this.DetachExpenditures1);
                }
                return this._expenditures1;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Indent"/> entity instances.
        /// </summary>
        [Association("Employee_Indent", "EmployeeId", "IssuedToId")]
        [XmlIgnore()]
        public EntityCollection<Indent> Indents
        {
            get
            {
                if ((this._indents == null))
                {
                    this._indents = new EntityCollection<Indent>(this, "Indents", this.FilterIndents, this.AttachIndents, this.DetachIndents);
                }
                return this._indents;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Inventory"/> entity instances.
        /// </summary>
        [Association("Employee_Inventory", "EmployeeId", "StoreInChargeId")]
        [XmlIgnore()]
        public EntityCollection<Inventory> Inventories
        {
            get
            {
                if ((this._inventories == null))
                {
                    this._inventories = new EntityCollection<Inventory>(this, "Inventories", this.FilterInventories, this.AttachInventories, this.DetachInventories);
                }
                return this._inventories;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Inventory"/> entity instances.
        /// </summary>
        [Association("Employee_Inventory1", "EmployeeId", "DispatchOfficerId")]
        [XmlIgnore()]
        public EntityCollection<Inventory> Inventories1
        {
            get
            {
                if ((this._inventories1 == null))
                {
                    this._inventories1 = new EntityCollection<Inventory>(this, "Inventories1", this.FilterInventories1, this.AttachInventories1, this.DetachInventories1);
                }
                return this._inventories1;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MessageDelivery"/> entity instances.
        /// </summary>
        [Association("Employee_MessageDelivery", "EmployeeId", "SendFromId")]
        [XmlIgnore()]
        public EntityCollection<MessageDelivery> MessageDeliveries
        {
            get
            {
                if ((this._messageDeliveries == null))
                {
                    this._messageDeliveries = new EntityCollection<MessageDelivery>(this, "MessageDeliveries", this.FilterMessageDeliveries, this.AttachMessageDeliveries, this.DetachMessageDeliveries);
                }
                return this._messageDeliveries;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MessageDelivery"/> entity instances.
        /// </summary>
        [Association("Employee_MessageDelivery1", "EmployeeId", "SendToId")]
        [XmlIgnore()]
        public EntityCollection<MessageDelivery> MessageDeliveries1
        {
            get
            {
                if ((this._messageDeliveries1 == null))
                {
                    this._messageDeliveries1 = new EntityCollection<MessageDelivery>(this, "MessageDeliveries1", this.FilterMessageDeliveries1, this.AttachMessageDeliveries1, this.DetachMessageDeliveries1);
                }
                return this._messageDeliveries1;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MRR"/> entity instances.
        /// </summary>
        [Association("Employee_MRR", "EmployeeId", "IssuedById")]
        [XmlIgnore()]
        public EntityCollection<MRR> MRRs
        {
            get
            {
                if ((this._mrRs == null))
                {
                    this._mrRs = new EntityCollection<MRR>(this, "MRRs", this.FilterMRRs, this.AttachMRRs, this.DetachMRRs);
                }
                return this._mrRs;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NoticeBoard"/> entity instances.
        /// </summary>
        [Association("Employee_NoticeBoard", "EmployeeId", "IssuedById")]
        [XmlIgnore()]
        public EntityCollection<NoticeBoard> NoticeBoards
        {
            get
            {
                if ((this._noticeBoards == null))
                {
                    this._noticeBoards = new EntityCollection<NoticeBoard>(this, "NoticeBoards", this.FilterNoticeBoards, this.AttachNoticeBoards, this.DetachNoticeBoards);
                }
                return this._noticeBoards;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Package"/> entity instances.
        /// </summary>
        [Association("Employee_Package", "EmployeeId", "AdminId")]
        [XmlIgnore()]
        public EntityCollection<Package> Packages
        {
            get
            {
                if ((this._packages == null))
                {
                    this._packages = new EntityCollection<Package>(this, "Packages", this.FilterPackages, this.AttachPackages, this.DetachPackages);
                }
                return this._packages;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Package"/> entity instances.
        /// </summary>
        [Association("Employee_Package1", "EmployeeId", "NSMId")]
        [XmlIgnore()]
        public EntityCollection<Package> Packages1
        {
            get
            {
                if ((this._packages1 == null))
                {
                    this._packages1 = new EntityCollection<Package>(this, "Packages1", this.FilterPackages1, this.AttachPackages1, this.DetachPackages1);
                }
                return this._packages1;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Person"/> entity.
        /// </summary>
        [Association("Person_Employee", "PersonId", "PersonId", IsForeignKey=true)]
        [XmlIgnore()]
        public Person Person
        {
            get
            {
                if ((this._person == null))
                {
                    this._person = new EntityRef<Person>(this, "Person", this.FilterPerson);
                }
                return this._person.Entity;
            }
            set
            {
                Person previous = this.Person;
                if ((previous != value))
                {
                    this.ValidateProperty("Person", value);
                    if ((previous != null))
                    {
                        this._person.Entity = null;
                        previous.Employees.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PersonId = value.PersonId;
                    }
                    else
                    {
                        this.PersonId = default(long);
                    }
                    this._person.Entity = value;
                    if ((value != null))
                    {
                        value.Employees.Add(this);
                    }
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PLR"/> entity instances.
        /// </summary>
        [Association("Employee_PLR", "EmployeeId", "IssuedById")]
        [XmlIgnore()]
        public EntityCollection<PLR> PLRs
        {
            get
            {
                if ((this._plRs == null))
                {
                    this._plRs = new EntityCollection<PLR>(this, "PLRs", this.FilterPLRs, this.AttachPLRs, this.DetachPLRs);
                }
                return this._plRs;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PLR"/> entity instances.
        /// </summary>
        [Association("Employee_PLR1", "EmployeeId", "IssuedToId")]
        [XmlIgnore()]
        public EntityCollection<PLR> PLRs1
        {
            get
            {
                if ((this._plRs1 == null))
                {
                    this._plRs1 = new EntityCollection<PLR>(this, "PLRs1", this.FilterPLRs1, this.AttachPLRs1, this.DetachPLRs1);
                }
                return this._plRs1;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ProductEdit"/> entity instances.
        /// </summary>
        [Association("Employee_ProductEdit", "EmployeeId", "NSMId")]
        [XmlIgnore()]
        public EntityCollection<ProductEdit> ProductEdits
        {
            get
            {
                if ((this._productEdits == null))
                {
                    this._productEdits = new EntityCollection<ProductEdit>(this, "ProductEdits", this.FilterProductEdits, this.AttachProductEdits, this.DetachProductEdits);
                }
                return this._productEdits;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Region"/> entity.
        /// </summary>
        [Association("Region_Employee", "RegionId", "RegionId", IsForeignKey=true)]
        [XmlIgnore()]
        public Region Region
        {
            get
            {
                if ((this._region == null))
                {
                    this._region = new EntityRef<Region>(this, "Region", this.FilterRegion);
                }
                return this._region.Entity;
            }
            set
            {
                Region previous = this.Region;
                if ((previous != value))
                {
                    this.ValidateProperty("Region", value);
                    if ((previous != null))
                    {
                        this._region.Entity = null;
                        previous.Employees.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RegionId = value.RegionId;
                    }
                    else
                    {
                        this.RegionId = default(long);
                    }
                    this._region.Entity = value;
                    if ((value != null))
                    {
                        value.Employees.Add(this);
                    }
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long RegionId
        {
            get
            {
                return this._regionId;
            }
            set
            {
                if ((this._regionId != value))
                {
                    this.OnRegionIdChanging(value);
                    this.RaiseDataMemberChanging("RegionId");
                    this.ValidateProperty("RegionId", value);
                    this._regionId = value;
                    this.RaiseDataMemberChanged("RegionId");
                    this.OnRegionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Requisition"/> entity instances.
        /// </summary>
        [Association("Employee_Requisition", "EmployeeId", "IssuedById")]
        [XmlIgnore()]
        public EntityCollection<Requisition> Requisitions
        {
            get
            {
                if ((this._requisitions == null))
                {
                    this._requisitions = new EntityCollection<Requisition>(this, "Requisitions", this.FilterRequisitions, this.AttachRequisitions, this.DetachRequisitions);
                }
                return this._requisitions;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Requisition"/> entity instances.
        /// </summary>
        [Association("Employee_Requisition1", "EmployeeId", "IssuedToId")]
        [XmlIgnore()]
        public EntityCollection<Requisition> Requisitions1
        {
            get
            {
                if ((this._requisitions1 == null))
                {
                    this._requisitions1 = new EntityCollection<Requisition>(this, "Requisitions1", this.FilterRequisitions1);
                }
                return this._requisitions1;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SalesOfficerTarget"/> entity instances.
        /// </summary>
        [Association("Employee_SalesOfficerTarget", "EmployeeId", "SalesOfficerId")]
        [XmlIgnore()]
        public EntityCollection<SalesOfficerTarget> SalesOfficerTargets
        {
            get
            {
                if ((this._salesOfficerTargets == null))
                {
                    this._salesOfficerTargets = new EntityCollection<SalesOfficerTarget>(this, "SalesOfficerTargets", this.FilterSalesOfficerTargets, this.AttachSalesOfficerTargets, this.DetachSalesOfficerTargets);
                }
                return this._salesOfficerTargets;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SalesReturn"/> entity instances.
        /// </summary>
        [Association("Employee_SalesReturn", "EmployeeId", "RMId")]
        [XmlIgnore()]
        public EntityCollection<SalesReturn> SalesReturns
        {
            get
            {
                if ((this._salesReturns == null))
                {
                    this._salesReturns = new EntityCollection<SalesReturn>(this, "SalesReturns", this.FilterSalesReturns, this.AttachSalesReturns, this.DetachSalesReturns);
                }
                return this._salesReturns;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="YearSummarySOExpenditure"/> entity instances.
        /// </summary>
        [Association("Employee_YearSummarySOExpenditure", "EmployeeId", "SalesOfficerId")]
        [XmlIgnore()]
        public EntityCollection<YearSummarySOExpenditure> YearSummarySOExpenditures
        {
            get
            {
                if ((this._yearSummarySOExpenditures == null))
                {
                    this._yearSummarySOExpenditures = new EntityCollection<YearSummarySOExpenditure>(this, "YearSummarySOExpenditures", this.FilterYearSummarySOExpenditures, this.AttachYearSummarySOExpenditures, this.DetachYearSummarySOExpenditures);
                }
                return this._yearSummarySOExpenditures;
            }
        }
        
        private void AttachBillPayments(BillPayment entity)
        {
            entity.Employee = this;
        }
        
        private void DetachBillPayments(BillPayment entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterBillPayments(BillPayment entity)
        {
            return (entity.RMId == this.EmployeeId);
        }
        
        private void AttachBillPayments1(BillPayment entity)
        {
            entity.Employee1 = this;
        }
        
        private void DetachBillPayments1(BillPayment entity)
        {
            entity.Employee1 = null;
        }
        
        private bool FilterBillPayments1(BillPayment entity)
        {
            return (entity.AccountantId == this.EmployeeId);
        }
        
        private void AttachBills(Bill entity)
        {
            entity.Employee = this;
        }
        
        private void DetachBills(Bill entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterBills(Bill entity)
        {
            return (entity.DispatchedById == this.EmployeeId);
        }
        
        private void AttachDealers(Dealer entity)
        {
            entity.Employee = this;
        }
        
        private void DetachDealers(Dealer entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterDealers(Dealer entity)
        {
            return (entity.SalesOfficerId == this.EmployeeId);
        }
        
        private void AttachExpenditureInfoes(ExpenditureInfo entity)
        {
            entity.Employee = this;
        }
        
        private void DetachExpenditureInfoes(ExpenditureInfo entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterExpenditureInfoes(ExpenditureInfo entity)
        {
            return (entity.SalesOfficerId == this.EmployeeId);
        }
        
        private void AttachExpenditures(Expenditure entity)
        {
            entity.Employee = this;
        }
        
        private void DetachExpenditures(Expenditure entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterExpenditures(Expenditure entity)
        {
            return (entity.PlacedById == this.EmployeeId);
        }
        
        private void AttachExpenditures1(Expenditure entity)
        {
            entity.Employee1 = this;
        }
        
        private void DetachExpenditures1(Expenditure entity)
        {
            entity.Employee1 = null;
        }
        
        private bool FilterExpenditures1(Expenditure entity)
        {
            return (entity.PlacedToId == this.EmployeeId);
        }
        
        private void AttachIndents(Indent entity)
        {
            entity.Employee1 = this;
        }
        
        private void DetachIndents(Indent entity)
        {
            entity.Employee1 = null;
        }
        
        private bool FilterIndents(Indent entity)
        {
            return (entity.IssuedToId == this.EmployeeId);
        }
        
        private void AttachInventories(Inventory entity)
        {
            entity.Employee = this;
        }
        
        private void DetachInventories(Inventory entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterInventories(Inventory entity)
        {
            return (entity.StoreInChargeId == this.EmployeeId);
        }
        
        private void AttachInventories1(Inventory entity)
        {
            entity.Employee1 = this;
        }
        
        private void DetachInventories1(Inventory entity)
        {
            entity.Employee1 = null;
        }
        
        private bool FilterInventories1(Inventory entity)
        {
            return (entity.DispatchOfficerId == this.EmployeeId);
        }
        
        private void AttachMessageDeliveries(MessageDelivery entity)
        {
            entity.Employee = this;
        }
        
        private void DetachMessageDeliveries(MessageDelivery entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterMessageDeliveries(MessageDelivery entity)
        {
            return (entity.SendFromId == this.EmployeeId);
        }
        
        private void AttachMessageDeliveries1(MessageDelivery entity)
        {
            entity.Employee1 = this;
        }
        
        private void DetachMessageDeliveries1(MessageDelivery entity)
        {
            entity.Employee1 = null;
        }
        
        private bool FilterMessageDeliveries1(MessageDelivery entity)
        {
            return (entity.SendToId == this.EmployeeId);
        }
        
        private void AttachMRRs(MRR entity)
        {
            entity.Employee = this;
        }
        
        private void DetachMRRs(MRR entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterMRRs(MRR entity)
        {
            return (entity.IssuedById == this.EmployeeId);
        }
        
        private void AttachNoticeBoards(NoticeBoard entity)
        {
            entity.Employee = this;
        }
        
        private void DetachNoticeBoards(NoticeBoard entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterNoticeBoards(NoticeBoard entity)
        {
            return (entity.IssuedById == this.EmployeeId);
        }
        
        private void AttachPackages(Package entity)
        {
            entity.Employee = this;
        }
        
        private void DetachPackages(Package entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterPackages(Package entity)
        {
            return (entity.AdminId == this.EmployeeId);
        }
        
        private void AttachPackages1(Package entity)
        {
            entity.Employee1 = this;
        }
        
        private void DetachPackages1(Package entity)
        {
            entity.Employee1 = null;
        }
        
        private bool FilterPackages1(Package entity)
        {
            return (entity.NSMId == this.EmployeeId);
        }
        
        private bool FilterPerson(Person entity)
        {
            return (entity.PersonId == this.PersonId);
        }
        
        private void AttachPLRs(PLR entity)
        {
            entity.Employee = this;
        }
        
        private void DetachPLRs(PLR entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterPLRs(PLR entity)
        {
            return (entity.IssuedById == this.EmployeeId);
        }
        
        private void AttachPLRs1(PLR entity)
        {
            entity.Employee1 = this;
        }
        
        private void DetachPLRs1(PLR entity)
        {
            entity.Employee1 = null;
        }
        
        private bool FilterPLRs1(PLR entity)
        {
            return (entity.IssuedToId == this.EmployeeId);
        }
        
        private void AttachProductEdits(ProductEdit entity)
        {
            entity.Employee = this;
        }
        
        private void DetachProductEdits(ProductEdit entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterProductEdits(ProductEdit entity)
        {
            return (entity.NSMId == this.EmployeeId);
        }
        
        private bool FilterRegion(Region entity)
        {
            return (entity.RegionId == this.RegionId);
        }
        
        private void AttachRequisitions(Requisition entity)
        {
            entity.Employee = this;
        }
        
        private void DetachRequisitions(Requisition entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterRequisitions(Requisition entity)
        {
            return (entity.IssuedById == this.EmployeeId);
        }
        
        private bool FilterRequisitions1(Requisition entity)
        {
            return (entity.IssuedToId == this.EmployeeId);
        }
        
        private void AttachSalesOfficerTargets(SalesOfficerTarget entity)
        {
            entity.Employee = this;
        }
        
        private void DetachSalesOfficerTargets(SalesOfficerTarget entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterSalesOfficerTargets(SalesOfficerTarget entity)
        {
            return (entity.SalesOfficerId == this.EmployeeId);
        }
        
        private void AttachSalesReturns(SalesReturn entity)
        {
            entity.Employee = this;
        }
        
        private void DetachSalesReturns(SalesReturn entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterSalesReturns(SalesReturn entity)
        {
            return (entity.RMId == this.EmployeeId);
        }
        
        private void AttachYearSummarySOExpenditures(YearSummarySOExpenditure entity)
        {
            entity.Employee = this;
        }
        
        private void DetachYearSummarySOExpenditures(YearSummarySOExpenditure entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterYearSummarySOExpenditures(YearSummarySOExpenditure entity)
        {
            return (entity.SalesOfficerId == this.EmployeeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._employeeId;
        }
    }
    
    /// <summary>
    /// The 'Expenditure' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Expenditure : Entity
    {
        
        private DateTime _dateOfIssue;
        
        private EntityRef<Employee> _employee;
        
        private EntityRef<Employee> _employee1;
        
        private string _expenditureCode;
        
        private long _expenditureId;
        
        private EntityCollection<ExpenditureInfo> _expenditureInfoes;
        
        private long _placedById;
        
        private long _placedToId;
        
        private EntityRef<Region> _region;
        
        private long _regionId;
        
        private string _status;
        
        private double _totalAcceptedAmount;
        
        private double _totalPlacedAmount;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateOfIssueChanging(DateTime value);
        partial void OnDateOfIssueChanged();
        partial void OnExpenditureCodeChanging(string value);
        partial void OnExpenditureCodeChanged();
        partial void OnExpenditureIdChanging(long value);
        partial void OnExpenditureIdChanged();
        partial void OnPlacedByIdChanging(long value);
        partial void OnPlacedByIdChanged();
        partial void OnPlacedToIdChanging(long value);
        partial void OnPlacedToIdChanged();
        partial void OnRegionIdChanging(long value);
        partial void OnRegionIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTotalAcceptedAmountChanging(double value);
        partial void OnTotalAcceptedAmountChanged();
        partial void OnTotalPlacedAmountChanging(double value);
        partial void OnTotalPlacedAmountChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Expenditure"/> class.
        /// </summary>
        public Expenditure()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfIssue' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfIssue
        {
            get
            {
                return this._dateOfIssue;
            }
            set
            {
                if ((this._dateOfIssue != value))
                {
                    this.OnDateOfIssueChanging(value);
                    this.RaiseDataMemberChanging("DateOfIssue");
                    this.ValidateProperty("DateOfIssue", value);
                    this._dateOfIssue = value;
                    this.RaiseDataMemberChanged("DateOfIssue");
                    this.OnDateOfIssueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Expenditure", "PlacedById", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.Expenditures.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PlacedById = value.EmployeeId;
                    }
                    else
                    {
                        this.PlacedById = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.Expenditures.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Expenditure1", "PlacedToId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee1
        {
            get
            {
                if ((this._employee1 == null))
                {
                    this._employee1 = new EntityRef<Employee>(this, "Employee1", this.FilterEmployee1);
                }
                return this._employee1.Entity;
            }
            set
            {
                Employee previous = this.Employee1;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee1", value);
                    if ((previous != null))
                    {
                        this._employee1.Entity = null;
                        previous.Expenditures1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PlacedToId = value.EmployeeId;
                    }
                    else
                    {
                        this.PlacedToId = default(long);
                    }
                    this._employee1.Entity = value;
                    if ((value != null))
                    {
                        value.Expenditures1.Add(this);
                    }
                    this.RaisePropertyChanged("Employee1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExpenditureCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string ExpenditureCode
        {
            get
            {
                return this._expenditureCode;
            }
            set
            {
                if ((this._expenditureCode != value))
                {
                    this.OnExpenditureCodeChanging(value);
                    this.RaiseDataMemberChanging("ExpenditureCode");
                    this.ValidateProperty("ExpenditureCode", value);
                    this._expenditureCode = value;
                    this.RaiseDataMemberChanged("ExpenditureCode");
                    this.OnExpenditureCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExpenditureId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long ExpenditureId
        {
            get
            {
                return this._expenditureId;
            }
            set
            {
                if ((this._expenditureId != value))
                {
                    this.OnExpenditureIdChanging(value);
                    this.ValidateProperty("ExpenditureId", value);
                    this._expenditureId = value;
                    this.RaisePropertyChanged("ExpenditureId");
                    this.OnExpenditureIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ExpenditureInfo"/> entity instances.
        /// </summary>
        [Association("Expenditure_ExpenditureInfo", "ExpenditureId", "ExpenditureId")]
        [XmlIgnore()]
        public EntityCollection<ExpenditureInfo> ExpenditureInfoes
        {
            get
            {
                if ((this._expenditureInfoes == null))
                {
                    this._expenditureInfoes = new EntityCollection<ExpenditureInfo>(this, "ExpenditureInfoes", this.FilterExpenditureInfoes, this.AttachExpenditureInfoes, this.DetachExpenditureInfoes);
                }
                return this._expenditureInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlacedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long PlacedById
        {
            get
            {
                return this._placedById;
            }
            set
            {
                if ((this._placedById != value))
                {
                    this.OnPlacedByIdChanging(value);
                    this.RaiseDataMemberChanging("PlacedById");
                    this.ValidateProperty("PlacedById", value);
                    this._placedById = value;
                    this.RaiseDataMemberChanged("PlacedById");
                    this.OnPlacedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlacedToId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long PlacedToId
        {
            get
            {
                return this._placedToId;
            }
            set
            {
                if ((this._placedToId != value))
                {
                    this.OnPlacedToIdChanging(value);
                    this.RaiseDataMemberChanging("PlacedToId");
                    this.ValidateProperty("PlacedToId", value);
                    this._placedToId = value;
                    this.RaiseDataMemberChanged("PlacedToId");
                    this.OnPlacedToIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Region"/> entity.
        /// </summary>
        [Association("Region_Expenditure", "RegionId", "RegionId", IsForeignKey=true)]
        [XmlIgnore()]
        public Region Region
        {
            get
            {
                if ((this._region == null))
                {
                    this._region = new EntityRef<Region>(this, "Region", this.FilterRegion);
                }
                return this._region.Entity;
            }
            set
            {
                Region previous = this.Region;
                if ((previous != value))
                {
                    this.ValidateProperty("Region", value);
                    if ((previous != null))
                    {
                        this._region.Entity = null;
                        previous.Expenditures.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RegionId = value.RegionId;
                    }
                    else
                    {
                        this.RegionId = default(long);
                    }
                    this._region.Entity = value;
                    if ((value != null))
                    {
                        value.Expenditures.Add(this);
                    }
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long RegionId
        {
            get
            {
                return this._regionId;
            }
            set
            {
                if ((this._regionId != value))
                {
                    this.OnRegionIdChanging(value);
                    this.RaiseDataMemberChanging("RegionId");
                    this.ValidateProperty("RegionId", value);
                    this._regionId = value;
                    this.RaiseDataMemberChanged("RegionId");
                    this.OnRegionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalAcceptedAmount' value.
        /// </summary>
        [DataMember()]
        public double TotalAcceptedAmount
        {
            get
            {
                return this._totalAcceptedAmount;
            }
            set
            {
                if ((this._totalAcceptedAmount != value))
                {
                    this.OnTotalAcceptedAmountChanging(value);
                    this.RaiseDataMemberChanging("TotalAcceptedAmount");
                    this.ValidateProperty("TotalAcceptedAmount", value);
                    this._totalAcceptedAmount = value;
                    this.RaiseDataMemberChanged("TotalAcceptedAmount");
                    this.OnTotalAcceptedAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalPlacedAmount' value.
        /// </summary>
        [DataMember()]
        public double TotalPlacedAmount
        {
            get
            {
                return this._totalPlacedAmount;
            }
            set
            {
                if ((this._totalPlacedAmount != value))
                {
                    this.OnTotalPlacedAmountChanging(value);
                    this.RaiseDataMemberChanging("TotalPlacedAmount");
                    this.ValidateProperty("TotalPlacedAmount", value);
                    this._totalPlacedAmount = value;
                    this.RaiseDataMemberChanged("TotalPlacedAmount");
                    this.OnTotalPlacedAmountChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.PlacedById);
        }
        
        private bool FilterEmployee1(Employee entity)
        {
            return (entity.EmployeeId == this.PlacedToId);
        }
        
        private void AttachExpenditureInfoes(ExpenditureInfo entity)
        {
            entity.Expenditure = this;
        }
        
        private void DetachExpenditureInfoes(ExpenditureInfo entity)
        {
            entity.Expenditure = null;
        }
        
        private bool FilterExpenditureInfoes(ExpenditureInfo entity)
        {
            return (entity.ExpenditureId == this.ExpenditureId);
        }
        
        private bool FilterRegion(Region entity)
        {
            return (entity.RegionId == this.RegionId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._expenditureId;
        }
    }
    
    /// <summary>
    /// The 'ExpenditureInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class ExpenditureInfo : Entity
    {
        
        private double _acceptedAmount;
        
        private EntityRef<Employee> _employee;
        
        private EntityRef<Expenditure> _expenditure;
        
        private long _expenditureId;
        
        private double _placedAmount;
        
        private string _remarks;
        
        private long _salesOfficerId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAcceptedAmountChanging(double value);
        partial void OnAcceptedAmountChanged();
        partial void OnExpenditureIdChanging(long value);
        partial void OnExpenditureIdChanged();
        partial void OnPlacedAmountChanging(double value);
        partial void OnPlacedAmountChanged();
        partial void OnRemarksChanging(string value);
        partial void OnRemarksChanged();
        partial void OnSalesOfficerIdChanging(long value);
        partial void OnSalesOfficerIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenditureInfo"/> class.
        /// </summary>
        public ExpenditureInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AcceptedAmount' value.
        /// </summary>
        [DataMember()]
        public double AcceptedAmount
        {
            get
            {
                return this._acceptedAmount;
            }
            set
            {
                if ((this._acceptedAmount != value))
                {
                    this.OnAcceptedAmountChanging(value);
                    this.RaiseDataMemberChanging("AcceptedAmount");
                    this.ValidateProperty("AcceptedAmount", value);
                    this._acceptedAmount = value;
                    this.RaiseDataMemberChanged("AcceptedAmount");
                    this.OnAcceptedAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_ExpenditureInfo", "SalesOfficerId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.ExpenditureInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SalesOfficerId = value.EmployeeId;
                    }
                    else
                    {
                        this.SalesOfficerId = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.ExpenditureInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Expenditure"/> entity.
        /// </summary>
        [Association("Expenditure_ExpenditureInfo", "ExpenditureId", "ExpenditureId", IsForeignKey=true)]
        [XmlIgnore()]
        public Expenditure Expenditure
        {
            get
            {
                if ((this._expenditure == null))
                {
                    this._expenditure = new EntityRef<Expenditure>(this, "Expenditure", this.FilterExpenditure);
                }
                return this._expenditure.Entity;
            }
            set
            {
                Expenditure previous = this.Expenditure;
                if ((previous != value))
                {
                    this.ValidateProperty("Expenditure", value);
                    if ((previous != null))
                    {
                        this._expenditure.Entity = null;
                        previous.ExpenditureInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ExpenditureId = value.ExpenditureId;
                    }
                    else
                    {
                        this.ExpenditureId = default(long);
                    }
                    this._expenditure.Entity = value;
                    if ((value != null))
                    {
                        value.ExpenditureInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Expenditure");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExpenditureId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ExpenditureId
        {
            get
            {
                return this._expenditureId;
            }
            set
            {
                if ((this._expenditureId != value))
                {
                    this.OnExpenditureIdChanging(value);
                    this.RaiseDataMemberChanging("ExpenditureId");
                    this.ValidateProperty("ExpenditureId", value);
                    this._expenditureId = value;
                    this.RaiseDataMemberChanged("ExpenditureId");
                    this.OnExpenditureIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlacedAmount' value.
        /// </summary>
        [DataMember()]
        public double PlacedAmount
        {
            get
            {
                return this._placedAmount;
            }
            set
            {
                if ((this._placedAmount != value))
                {
                    this.OnPlacedAmountChanging(value);
                    this.RaiseDataMemberChanging("PlacedAmount");
                    this.ValidateProperty("PlacedAmount", value);
                    this._placedAmount = value;
                    this.RaiseDataMemberChanged("PlacedAmount");
                    this.OnPlacedAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Remarks' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string Remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                if ((this._remarks != value))
                {
                    this.OnRemarksChanging(value);
                    this.RaiseDataMemberChanging("Remarks");
                    this.ValidateProperty("Remarks", value);
                    this._remarks = value;
                    this.RaiseDataMemberChanged("Remarks");
                    this.OnRemarksChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesOfficerId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long SalesOfficerId
        {
            get
            {
                return this._salesOfficerId;
            }
            set
            {
                if ((this._salesOfficerId != value))
                {
                    this.OnSalesOfficerIdChanging(value);
                    this.RaiseDataMemberChanging("SalesOfficerId");
                    this.ValidateProperty("SalesOfficerId", value);
                    this._salesOfficerId = value;
                    this.RaiseDataMemberChanged("SalesOfficerId");
                    this.OnSalesOfficerIdChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.SalesOfficerId);
        }
        
        private bool FilterExpenditure(Expenditure entity)
        {
            return (entity.ExpenditureId == this.ExpenditureId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._expenditureId, this._salesOfficerId);
        }
    }
    
    /// <summary>
    /// The 'Indent' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Indent : Entity
    {
        
        private EntityCollection<Bill> _bills;
        
        private DateTime _dateOfPlace;
        
        private EntityRef<Dealer> _dealer;
        
        private EntityRef<Employee> _employee1;
        
        private long _forwardedToId;
        
        private string _indentCode;
        
        private long _indentId;
        
        private EntityCollection<IndentProductInfo> _indentProductInfoes;
        
        private string _indentStatus;
        
        private bool _isConsideredByNSM;
        
        private long _issuedById;
        
        private long _issuedToId;
        
        private string _paymentMethod;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateOfPlaceChanging(DateTime value);
        partial void OnDateOfPlaceChanged();
        partial void OnForwardedToIdChanging(long value);
        partial void OnForwardedToIdChanged();
        partial void OnIndentCodeChanging(string value);
        partial void OnIndentCodeChanged();
        partial void OnIndentIdChanging(long value);
        partial void OnIndentIdChanged();
        partial void OnIndentStatusChanging(string value);
        partial void OnIndentStatusChanged();
        partial void OnIsConsideredByNSMChanging(bool value);
        partial void OnIsConsideredByNSMChanged();
        partial void OnIssuedByIdChanging(long value);
        partial void OnIssuedByIdChanged();
        partial void OnIssuedToIdChanging(long value);
        partial void OnIssuedToIdChanged();
        partial void OnPaymentMethodChanging(string value);
        partial void OnPaymentMethodChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Indent"/> class.
        /// </summary>
        public Indent()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Bill"/> entity instances.
        /// </summary>
        [Association("Indent_Bill", "IndentId", "IndentId")]
        [XmlIgnore()]
        public EntityCollection<Bill> Bills
        {
            get
            {
                if ((this._bills == null))
                {
                    this._bills = new EntityCollection<Bill>(this, "Bills", this.FilterBills, this.AttachBills, this.DetachBills);
                }
                return this._bills;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfPlace' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfPlace
        {
            get
            {
                return this._dateOfPlace;
            }
            set
            {
                if ((this._dateOfPlace != value))
                {
                    this.OnDateOfPlaceChanging(value);
                    this.RaiseDataMemberChanging("DateOfPlace");
                    this.ValidateProperty("DateOfPlace", value);
                    this._dateOfPlace = value;
                    this.RaiseDataMemberChanged("DateOfPlace");
                    this.OnDateOfPlaceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Dealer"/> entity.
        /// </summary>
        [Association("Dealer_Indent", "IssuedById", "DealerId", IsForeignKey=true)]
        [XmlIgnore()]
        public Dealer Dealer
        {
            get
            {
                if ((this._dealer == null))
                {
                    this._dealer = new EntityRef<Dealer>(this, "Dealer", this.FilterDealer);
                }
                return this._dealer.Entity;
            }
            set
            {
                Dealer previous = this.Dealer;
                if ((previous != value))
                {
                    this.ValidateProperty("Dealer", value);
                    if ((previous != null))
                    {
                        this._dealer.Entity = null;
                        previous.Indents.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssuedById = value.DealerId;
                    }
                    else
                    {
                        this.IssuedById = default(long);
                    }
                    this._dealer.Entity = value;
                    if ((value != null))
                    {
                        value.Indents.Add(this);
                    }
                    this.RaisePropertyChanged("Dealer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Indent", "IssuedToId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee1
        {
            get
            {
                if ((this._employee1 == null))
                {
                    this._employee1 = new EntityRef<Employee>(this, "Employee1", this.FilterEmployee1);
                }
                return this._employee1.Entity;
            }
            set
            {
                Employee previous = this.Employee1;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee1", value);
                    if ((previous != null))
                    {
                        this._employee1.Entity = null;
                        previous.Indents.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssuedToId = value.EmployeeId;
                    }
                    else
                    {
                        this.IssuedToId = default(long);
                    }
                    this._employee1.Entity = value;
                    if ((value != null))
                    {
                        value.Indents.Add(this);
                    }
                    this.RaisePropertyChanged("Employee1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ForwardedToId' value.
        /// </summary>
        [DataMember()]
        public long ForwardedToId
        {
            get
            {
                return this._forwardedToId;
            }
            set
            {
                if ((this._forwardedToId != value))
                {
                    this.OnForwardedToIdChanging(value);
                    this.RaiseDataMemberChanging("ForwardedToId");
                    this.ValidateProperty("ForwardedToId", value);
                    this._forwardedToId = value;
                    this.RaiseDataMemberChanged("ForwardedToId");
                    this.OnForwardedToIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IndentCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string IndentCode
        {
            get
            {
                return this._indentCode;
            }
            set
            {
                if ((this._indentCode != value))
                {
                    this.OnIndentCodeChanging(value);
                    this.RaiseDataMemberChanging("IndentCode");
                    this.ValidateProperty("IndentCode", value);
                    this._indentCode = value;
                    this.RaiseDataMemberChanged("IndentCode");
                    this.OnIndentCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IndentId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long IndentId
        {
            get
            {
                return this._indentId;
            }
            set
            {
                if ((this._indentId != value))
                {
                    this.OnIndentIdChanging(value);
                    this.ValidateProperty("IndentId", value);
                    this._indentId = value;
                    this.RaisePropertyChanged("IndentId");
                    this.OnIndentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="IndentProductInfo"/> entity instances.
        /// </summary>
        [Association("Indent_IndentProductInfo", "IndentId", "IndentId")]
        [XmlIgnore()]
        public EntityCollection<IndentProductInfo> IndentProductInfoes
        {
            get
            {
                if ((this._indentProductInfoes == null))
                {
                    this._indentProductInfoes = new EntityCollection<IndentProductInfo>(this, "IndentProductInfoes", this.FilterIndentProductInfoes, this.AttachIndentProductInfoes, this.DetachIndentProductInfoes);
                }
                return this._indentProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IndentStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string IndentStatus
        {
            get
            {
                return this._indentStatus;
            }
            set
            {
                if ((this._indentStatus != value))
                {
                    this.OnIndentStatusChanging(value);
                    this.RaiseDataMemberChanging("IndentStatus");
                    this.ValidateProperty("IndentStatus", value);
                    this._indentStatus = value;
                    this.RaiseDataMemberChanged("IndentStatus");
                    this.OnIndentStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsConsideredByNSM' value.
        /// </summary>
        [DataMember()]
        public bool IsConsideredByNSM
        {
            get
            {
                return this._isConsideredByNSM;
            }
            set
            {
                if ((this._isConsideredByNSM != value))
                {
                    this.OnIsConsideredByNSMChanging(value);
                    this.RaiseDataMemberChanging("IsConsideredByNSM");
                    this.ValidateProperty("IsConsideredByNSM", value);
                    this._isConsideredByNSM = value;
                    this.RaiseDataMemberChanged("IsConsideredByNSM");
                    this.OnIsConsideredByNSMChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssuedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long IssuedById
        {
            get
            {
                return this._issuedById;
            }
            set
            {
                if ((this._issuedById != value))
                {
                    this.OnIssuedByIdChanging(value);
                    this.RaiseDataMemberChanging("IssuedById");
                    this.ValidateProperty("IssuedById", value);
                    this._issuedById = value;
                    this.RaiseDataMemberChanged("IssuedById");
                    this.OnIssuedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssuedToId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long IssuedToId
        {
            get
            {
                return this._issuedToId;
            }
            set
            {
                if ((this._issuedToId != value))
                {
                    this.OnIssuedToIdChanging(value);
                    this.RaiseDataMemberChanging("IssuedToId");
                    this.ValidateProperty("IssuedToId", value);
                    this._issuedToId = value;
                    this.RaiseDataMemberChanged("IssuedToId");
                    this.OnIssuedToIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PaymentMethod' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string PaymentMethod
        {
            get
            {
                return this._paymentMethod;
            }
            set
            {
                if ((this._paymentMethod != value))
                {
                    this.OnPaymentMethodChanging(value);
                    this.RaiseDataMemberChanging("PaymentMethod");
                    this.ValidateProperty("PaymentMethod", value);
                    this._paymentMethod = value;
                    this.RaiseDataMemberChanged("PaymentMethod");
                    this.OnPaymentMethodChanged();
                }
            }
        }
        
        private void AttachBills(Bill entity)
        {
            entity.Indent = this;
        }
        
        private void DetachBills(Bill entity)
        {
            entity.Indent = null;
        }
        
        private bool FilterBills(Bill entity)
        {
            return (entity.IndentId == this.IndentId);
        }
        
        private bool FilterDealer(Dealer entity)
        {
            return (entity.DealerId == this.IssuedById);
        }
        
        private bool FilterEmployee1(Employee entity)
        {
            return (entity.EmployeeId == this.IssuedToId);
        }
        
        private void AttachIndentProductInfoes(IndentProductInfo entity)
        {
            entity.Indent = this;
        }
        
        private void DetachIndentProductInfoes(IndentProductInfo entity)
        {
            entity.Indent = null;
        }
        
        private bool FilterIndentProductInfoes(IndentProductInfo entity)
        {
            return (entity.IndentId == this.IndentId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._indentId;
        }
    }
    
    /// <summary>
    /// The 'IndentProductInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class IndentProductInfo : Entity
    {
        
        private double _commissionPercentage;
        
        private DateTime _editTime;
        
        private Nullable<DateTime> _editTimeRM;
        
        private Nullable<DateTime> _editTimeSIC;
        
        private EntityRef<Indent> _indent;
        
        private long _indentId;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private double _productPrice;
        
        private double _productQuantity;
        
        private Nullable<double> _productQuantityByRM;
        
        private Nullable<double> _productQuantityBySIC;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCommissionPercentageChanging(double value);
        partial void OnCommissionPercentageChanged();
        partial void OnEditTimeChanging(DateTime value);
        partial void OnEditTimeChanged();
        partial void OnEditTimeRMChanging(Nullable<DateTime> value);
        partial void OnEditTimeRMChanged();
        partial void OnEditTimeSICChanging(Nullable<DateTime> value);
        partial void OnEditTimeSICChanged();
        partial void OnIndentIdChanging(long value);
        partial void OnIndentIdChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnProductPriceChanging(double value);
        partial void OnProductPriceChanged();
        partial void OnProductQuantityChanging(double value);
        partial void OnProductQuantityChanged();
        partial void OnProductQuantityByRMChanging(Nullable<double> value);
        partial void OnProductQuantityByRMChanged();
        partial void OnProductQuantityBySICChanging(Nullable<double> value);
        partial void OnProductQuantityBySICChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IndentProductInfo"/> class.
        /// </summary>
        public IndentProductInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CommissionPercentage' value.
        /// </summary>
        [DataMember()]
        public double CommissionPercentage
        {
            get
            {
                return this._commissionPercentage;
            }
            set
            {
                if ((this._commissionPercentage != value))
                {
                    this.OnCommissionPercentageChanging(value);
                    this.RaiseDataMemberChanging("CommissionPercentage");
                    this.ValidateProperty("CommissionPercentage", value);
                    this._commissionPercentage = value;
                    this.RaiseDataMemberChanged("CommissionPercentage");
                    this.OnCommissionPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EditTime' value.
        /// </summary>
        [DataMember()]
        public DateTime EditTime
        {
            get
            {
                return this._editTime;
            }
            set
            {
                if ((this._editTime != value))
                {
                    this.OnEditTimeChanging(value);
                    this.RaiseDataMemberChanging("EditTime");
                    this.ValidateProperty("EditTime", value);
                    this._editTime = value;
                    this.RaiseDataMemberChanged("EditTime");
                    this.OnEditTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EditTimeRM' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EditTimeRM
        {
            get
            {
                return this._editTimeRM;
            }
            set
            {
                if ((this._editTimeRM != value))
                {
                    this.OnEditTimeRMChanging(value);
                    this.RaiseDataMemberChanging("EditTimeRM");
                    this.ValidateProperty("EditTimeRM", value);
                    this._editTimeRM = value;
                    this.RaiseDataMemberChanged("EditTimeRM");
                    this.OnEditTimeRMChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EditTimeSIC' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EditTimeSIC
        {
            get
            {
                return this._editTimeSIC;
            }
            set
            {
                if ((this._editTimeSIC != value))
                {
                    this.OnEditTimeSICChanging(value);
                    this.RaiseDataMemberChanging("EditTimeSIC");
                    this.ValidateProperty("EditTimeSIC", value);
                    this._editTimeSIC = value;
                    this.RaiseDataMemberChanged("EditTimeSIC");
                    this.OnEditTimeSICChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Indent"/> entity.
        /// </summary>
        [Association("Indent_IndentProductInfo", "IndentId", "IndentId", IsForeignKey=true)]
        [XmlIgnore()]
        public Indent Indent
        {
            get
            {
                if ((this._indent == null))
                {
                    this._indent = new EntityRef<Indent>(this, "Indent", this.FilterIndent);
                }
                return this._indent.Entity;
            }
            set
            {
                Indent previous = this.Indent;
                if ((previous != value))
                {
                    this.ValidateProperty("Indent", value);
                    if ((previous != null))
                    {
                        this._indent.Entity = null;
                        previous.IndentProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IndentId = value.IndentId;
                    }
                    else
                    {
                        this.IndentId = default(long);
                    }
                    this._indent.Entity = value;
                    if ((value != null))
                    {
                        value.IndentProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Indent");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IndentId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long IndentId
        {
            get
            {
                return this._indentId;
            }
            set
            {
                if ((this._indentId != value))
                {
                    this.OnIndentIdChanging(value);
                    this.RaiseDataMemberChanging("IndentId");
                    this.ValidateProperty("IndentId", value);
                    this._indentId = value;
                    this.RaiseDataMemberChanged("IndentId");
                    this.OnIndentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_IndentProductInfo", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.IndentProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.IndentProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductPrice' value.
        /// </summary>
        [DataMember()]
        public double ProductPrice
        {
            get
            {
                return this._productPrice;
            }
            set
            {
                if ((this._productPrice != value))
                {
                    this.OnProductPriceChanging(value);
                    this.RaiseDataMemberChanging("ProductPrice");
                    this.ValidateProperty("ProductPrice", value);
                    this._productPrice = value;
                    this.RaiseDataMemberChanged("ProductPrice");
                    this.OnProductPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductQuantity' value.
        /// </summary>
        [DataMember()]
        public double ProductQuantity
        {
            get
            {
                return this._productQuantity;
            }
            set
            {
                if ((this._productQuantity != value))
                {
                    this.OnProductQuantityChanging(value);
                    this.RaiseDataMemberChanging("ProductQuantity");
                    this.ValidateProperty("ProductQuantity", value);
                    this._productQuantity = value;
                    this.RaiseDataMemberChanged("ProductQuantity");
                    this.OnProductQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductQuantityByRM' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ProductQuantityByRM
        {
            get
            {
                return this._productQuantityByRM;
            }
            set
            {
                if ((this._productQuantityByRM != value))
                {
                    this.OnProductQuantityByRMChanging(value);
                    this.RaiseDataMemberChanging("ProductQuantityByRM");
                    this.ValidateProperty("ProductQuantityByRM", value);
                    this._productQuantityByRM = value;
                    this.RaiseDataMemberChanged("ProductQuantityByRM");
                    this.OnProductQuantityByRMChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductQuantityBySIC' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ProductQuantityBySIC
        {
            get
            {
                return this._productQuantityBySIC;
            }
            set
            {
                if ((this._productQuantityBySIC != value))
                {
                    this.OnProductQuantityBySICChanging(value);
                    this.RaiseDataMemberChanging("ProductQuantityBySIC");
                    this.ValidateProperty("ProductQuantityBySIC", value);
                    this._productQuantityBySIC = value;
                    this.RaiseDataMemberChanged("ProductQuantityBySIC");
                    this.OnProductQuantityBySICChanged();
                }
            }
        }
        
        private bool FilterIndent(Indent entity)
        {
            return (entity.IndentId == this.IndentId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._indentId, this._productId);
        }
    }
    
    /// <summary>
    /// The 'Inventory' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Inventory : Entity
    {
        
        private long _dispatchOfficerId;
        
        private EntityRef<Employee> _employee;
        
        private EntityRef<Employee> _employee1;
        
        private long _inventoryId;
        
        private EntityCollection<InventoryLog> _inventoryLogs;
        
        private EntityCollection<InventoryPackageInfo> _inventoryPackageInfoes;
        
        private EntityCollection<InventoryProductInfo> _inventoryProductInfoes;
        
        private EntityCollection<MRR> _mrRs;
        
        private EntityCollection<PLR> _plRs;
        
        private EntityRef<Region> _region;
        
        private long _regionId;
        
        private EntityCollection<Requisition> _requisitions;
        
        private long _storeInChargeId;
        
        private EntityCollection<YearSummaryInventoryPackage> _yearSummaryInventoryPackages;
        
        private EntityCollection<YearSummaryInventoryProduct> _yearSummaryInventoryProducts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDispatchOfficerIdChanging(long value);
        partial void OnDispatchOfficerIdChanged();
        partial void OnInventoryIdChanging(long value);
        partial void OnInventoryIdChanged();
        partial void OnRegionIdChanging(long value);
        partial void OnRegionIdChanged();
        partial void OnStoreInChargeIdChanging(long value);
        partial void OnStoreInChargeIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Inventory"/> class.
        /// </summary>
        public Inventory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DispatchOfficerId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long DispatchOfficerId
        {
            get
            {
                return this._dispatchOfficerId;
            }
            set
            {
                if ((this._dispatchOfficerId != value))
                {
                    this.OnDispatchOfficerIdChanging(value);
                    this.RaiseDataMemberChanging("DispatchOfficerId");
                    this.ValidateProperty("DispatchOfficerId", value);
                    this._dispatchOfficerId = value;
                    this.RaiseDataMemberChanged("DispatchOfficerId");
                    this.OnDispatchOfficerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Inventory", "StoreInChargeId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.Inventories.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.StoreInChargeId = value.EmployeeId;
                    }
                    else
                    {
                        this.StoreInChargeId = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.Inventories.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Inventory1", "DispatchOfficerId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee1
        {
            get
            {
                if ((this._employee1 == null))
                {
                    this._employee1 = new EntityRef<Employee>(this, "Employee1", this.FilterEmployee1);
                }
                return this._employee1.Entity;
            }
            set
            {
                Employee previous = this.Employee1;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee1", value);
                    if ((previous != null))
                    {
                        this._employee1.Entity = null;
                        previous.Inventories1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DispatchOfficerId = value.EmployeeId;
                    }
                    else
                    {
                        this.DispatchOfficerId = default(long);
                    }
                    this._employee1.Entity = value;
                    if ((value != null))
                    {
                        value.Inventories1.Add(this);
                    }
                    this.RaisePropertyChanged("Employee1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long InventoryId
        {
            get
            {
                return this._inventoryId;
            }
            set
            {
                if ((this._inventoryId != value))
                {
                    this.OnInventoryIdChanging(value);
                    this.ValidateProperty("InventoryId", value);
                    this._inventoryId = value;
                    this.RaisePropertyChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="InventoryLog"/> entity instances.
        /// </summary>
        [Association("Inventory_InventoryLog", "InventoryId", "InventoryId")]
        [XmlIgnore()]
        public EntityCollection<InventoryLog> InventoryLogs
        {
            get
            {
                if ((this._inventoryLogs == null))
                {
                    this._inventoryLogs = new EntityCollection<InventoryLog>(this, "InventoryLogs", this.FilterInventoryLogs, this.AttachInventoryLogs, this.DetachInventoryLogs);
                }
                return this._inventoryLogs;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="InventoryPackageInfo"/> entity instances.
        /// </summary>
        [Association("Inventory_InventoryPackageInfo", "InventoryId", "InventoryId")]
        [XmlIgnore()]
        public EntityCollection<InventoryPackageInfo> InventoryPackageInfoes
        {
            get
            {
                if ((this._inventoryPackageInfoes == null))
                {
                    this._inventoryPackageInfoes = new EntityCollection<InventoryPackageInfo>(this, "InventoryPackageInfoes", this.FilterInventoryPackageInfoes, this.AttachInventoryPackageInfoes, this.DetachInventoryPackageInfoes);
                }
                return this._inventoryPackageInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="InventoryProductInfo"/> entity instances.
        /// </summary>
        [Association("Inventory_InventoryProductInfo", "InventoryId", "InventoryId")]
        [XmlIgnore()]
        public EntityCollection<InventoryProductInfo> InventoryProductInfoes
        {
            get
            {
                if ((this._inventoryProductInfoes == null))
                {
                    this._inventoryProductInfoes = new EntityCollection<InventoryProductInfo>(this, "InventoryProductInfoes", this.FilterInventoryProductInfoes, this.AttachInventoryProductInfoes, this.DetachInventoryProductInfoes);
                }
                return this._inventoryProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MRR"/> entity instances.
        /// </summary>
        [Association("Inventory_MRR", "InventoryId", "InventoryId")]
        [XmlIgnore()]
        public EntityCollection<MRR> MRRs
        {
            get
            {
                if ((this._mrRs == null))
                {
                    this._mrRs = new EntityCollection<MRR>(this, "MRRs", this.FilterMRRs, this.AttachMRRs, this.DetachMRRs);
                }
                return this._mrRs;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PLR"/> entity instances.
        /// </summary>
        [Association("Inventory_PLR", "InventoryId", "InventoryId")]
        [XmlIgnore()]
        public EntityCollection<PLR> PLRs
        {
            get
            {
                if ((this._plRs == null))
                {
                    this._plRs = new EntityCollection<PLR>(this, "PLRs", this.FilterPLRs, this.AttachPLRs, this.DetachPLRs);
                }
                return this._plRs;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Region"/> entity.
        /// </summary>
        [Association("Region_Inventory", "RegionId", "RegionId", IsForeignKey=true)]
        [XmlIgnore()]
        public Region Region
        {
            get
            {
                if ((this._region == null))
                {
                    this._region = new EntityRef<Region>(this, "Region", this.FilterRegion);
                }
                return this._region.Entity;
            }
            set
            {
                Region previous = this.Region;
                if ((previous != value))
                {
                    this.ValidateProperty("Region", value);
                    if ((previous != null))
                    {
                        this._region.Entity = null;
                        previous.Inventories.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RegionId = value.RegionId;
                    }
                    else
                    {
                        this.RegionId = default(long);
                    }
                    this._region.Entity = value;
                    if ((value != null))
                    {
                        value.Inventories.Add(this);
                    }
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long RegionId
        {
            get
            {
                return this._regionId;
            }
            set
            {
                if ((this._regionId != value))
                {
                    this.OnRegionIdChanging(value);
                    this.RaiseDataMemberChanging("RegionId");
                    this.ValidateProperty("RegionId", value);
                    this._regionId = value;
                    this.RaiseDataMemberChanged("RegionId");
                    this.OnRegionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Requisition"/> entity instances.
        /// </summary>
        [Association("Inventory_Requisition", "InventoryId", "InventoryId")]
        [XmlIgnore()]
        public EntityCollection<Requisition> Requisitions
        {
            get
            {
                if ((this._requisitions == null))
                {
                    this._requisitions = new EntityCollection<Requisition>(this, "Requisitions", this.FilterRequisitions, this.AttachRequisitions, this.DetachRequisitions);
                }
                return this._requisitions;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StoreInChargeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long StoreInChargeId
        {
            get
            {
                return this._storeInChargeId;
            }
            set
            {
                if ((this._storeInChargeId != value))
                {
                    this.OnStoreInChargeIdChanging(value);
                    this.RaiseDataMemberChanging("StoreInChargeId");
                    this.ValidateProperty("StoreInChargeId", value);
                    this._storeInChargeId = value;
                    this.RaiseDataMemberChanged("StoreInChargeId");
                    this.OnStoreInChargeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="YearSummaryInventoryPackage"/> entity instances.
        /// </summary>
        [Association("Inventory_YearSummaryInventoryPackage", "InventoryId", "InventoryId")]
        [XmlIgnore()]
        public EntityCollection<YearSummaryInventoryPackage> YearSummaryInventoryPackages
        {
            get
            {
                if ((this._yearSummaryInventoryPackages == null))
                {
                    this._yearSummaryInventoryPackages = new EntityCollection<YearSummaryInventoryPackage>(this, "YearSummaryInventoryPackages", this.FilterYearSummaryInventoryPackages, this.AttachYearSummaryInventoryPackages, this.DetachYearSummaryInventoryPackages);
                }
                return this._yearSummaryInventoryPackages;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="YearSummaryInventoryProduct"/> entity instances.
        /// </summary>
        [Association("Inventory_YearSummaryInventoryProduct", "InventoryId", "InventoryId")]
        [XmlIgnore()]
        public EntityCollection<YearSummaryInventoryProduct> YearSummaryInventoryProducts
        {
            get
            {
                if ((this._yearSummaryInventoryProducts == null))
                {
                    this._yearSummaryInventoryProducts = new EntityCollection<YearSummaryInventoryProduct>(this, "YearSummaryInventoryProducts", this.FilterYearSummaryInventoryProducts, this.AttachYearSummaryInventoryProducts, this.DetachYearSummaryInventoryProducts);
                }
                return this._yearSummaryInventoryProducts;
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.StoreInChargeId);
        }
        
        private bool FilterEmployee1(Employee entity)
        {
            return (entity.EmployeeId == this.DispatchOfficerId);
        }
        
        private void AttachInventoryLogs(InventoryLog entity)
        {
            entity.Inventory = this;
        }
        
        private void DetachInventoryLogs(InventoryLog entity)
        {
            entity.Inventory = null;
        }
        
        private bool FilterInventoryLogs(InventoryLog entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private void AttachInventoryPackageInfoes(InventoryPackageInfo entity)
        {
            entity.Inventory = this;
        }
        
        private void DetachInventoryPackageInfoes(InventoryPackageInfo entity)
        {
            entity.Inventory = null;
        }
        
        private bool FilterInventoryPackageInfoes(InventoryPackageInfo entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private void AttachInventoryProductInfoes(InventoryProductInfo entity)
        {
            entity.Inventory = this;
        }
        
        private void DetachInventoryProductInfoes(InventoryProductInfo entity)
        {
            entity.Inventory = null;
        }
        
        private bool FilterInventoryProductInfoes(InventoryProductInfo entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private void AttachMRRs(MRR entity)
        {
            entity.Inventory = this;
        }
        
        private void DetachMRRs(MRR entity)
        {
            entity.Inventory = null;
        }
        
        private bool FilterMRRs(MRR entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private void AttachPLRs(PLR entity)
        {
            entity.Inventory = this;
        }
        
        private void DetachPLRs(PLR entity)
        {
            entity.Inventory = null;
        }
        
        private bool FilterPLRs(PLR entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private bool FilterRegion(Region entity)
        {
            return (entity.RegionId == this.RegionId);
        }
        
        private void AttachRequisitions(Requisition entity)
        {
            entity.Inventory = this;
        }
        
        private void DetachRequisitions(Requisition entity)
        {
            entity.Inventory = null;
        }
        
        private bool FilterRequisitions(Requisition entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private void AttachYearSummaryInventoryPackages(YearSummaryInventoryPackage entity)
        {
            entity.Inventory = this;
        }
        
        private void DetachYearSummaryInventoryPackages(YearSummaryInventoryPackage entity)
        {
            entity.Inventory = null;
        }
        
        private bool FilterYearSummaryInventoryPackages(YearSummaryInventoryPackage entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private void AttachYearSummaryInventoryProducts(YearSummaryInventoryProduct entity)
        {
            entity.Inventory = this;
        }
        
        private void DetachYearSummaryInventoryProducts(YearSummaryInventoryProduct entity)
        {
            entity.Inventory = null;
        }
        
        private bool FilterYearSummaryInventoryProducts(YearSummaryInventoryProduct entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._inventoryId;
        }
    }
    
    /// <summary>
    /// The 'InventoryLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class InventoryLog : Entity
    {
        
        private double _closingQuantity;
        
        private DateTime _date;
        
        private EntityRef<Inventory> _inventory;
        
        private long _inventoryId;
        
        private string _lotId;
        
        private long _memoNo;
        
        private string _method;
        
        private double _openingQuantity;
        
        private EntityRef<Product> _product;
        
        private double _productCost;
        
        private long _productId;
        
        private double _productQuantity;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClosingQuantityChanging(double value);
        partial void OnClosingQuantityChanged();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnInventoryIdChanging(long value);
        partial void OnInventoryIdChanged();
        partial void OnLotIdChanging(string value);
        partial void OnLotIdChanged();
        partial void OnMemoNoChanging(long value);
        partial void OnMemoNoChanged();
        partial void OnMethodChanging(string value);
        partial void OnMethodChanged();
        partial void OnOpeningQuantityChanging(double value);
        partial void OnOpeningQuantityChanged();
        partial void OnProductCostChanging(double value);
        partial void OnProductCostChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnProductQuantityChanging(double value);
        partial void OnProductQuantityChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryLog"/> class.
        /// </summary>
        public InventoryLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClosingQuantity' value.
        /// </summary>
        [DataMember()]
        public double ClosingQuantity
        {
            get
            {
                return this._closingQuantity;
            }
            set
            {
                if ((this._closingQuantity != value))
                {
                    this.OnClosingQuantityChanging(value);
                    this.RaiseDataMemberChanging("ClosingQuantity");
                    this.ValidateProperty("ClosingQuantity", value);
                    this._closingQuantity = value;
                    this.RaiseDataMemberChanged("ClosingQuantity");
                    this.OnClosingQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Inventory"/> entity.
        /// </summary>
        [Association("Inventory_InventoryLog", "InventoryId", "InventoryId", IsForeignKey=true)]
        [XmlIgnore()]
        public Inventory Inventory
        {
            get
            {
                if ((this._inventory == null))
                {
                    this._inventory = new EntityRef<Inventory>(this, "Inventory", this.FilterInventory);
                }
                return this._inventory.Entity;
            }
            set
            {
                Inventory previous = this.Inventory;
                if ((previous != value))
                {
                    this.ValidateProperty("Inventory", value);
                    if ((previous != null))
                    {
                        this._inventory.Entity = null;
                        previous.InventoryLogs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.InventoryId = value.InventoryId;
                    }
                    else
                    {
                        this.InventoryId = default(long);
                    }
                    this._inventory.Entity = value;
                    if ((value != null))
                    {
                        value.InventoryLogs.Add(this);
                    }
                    this.RaisePropertyChanged("Inventory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long InventoryId
        {
            get
            {
                return this._inventoryId;
            }
            set
            {
                if ((this._inventoryId != value))
                {
                    this.OnInventoryIdChanging(value);
                    this.RaiseDataMemberChanging("InventoryId");
                    this.ValidateProperty("InventoryId", value);
                    this._inventoryId = value;
                    this.RaiseDataMemberChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string LotId
        {
            get
            {
                return this._lotId;
            }
            set
            {
                if ((this._lotId != value))
                {
                    this.OnLotIdChanging(value);
                    this.RaiseDataMemberChanging("LotId");
                    this.ValidateProperty("LotId", value);
                    this._lotId = value;
                    this.RaiseDataMemberChanged("LotId");
                    this.OnLotIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MemoNo' value.
        /// </summary>
        [DataMember()]
        public long MemoNo
        {
            get
            {
                return this._memoNo;
            }
            set
            {
                if ((this._memoNo != value))
                {
                    this.OnMemoNoChanging(value);
                    this.RaiseDataMemberChanging("MemoNo");
                    this.ValidateProperty("MemoNo", value);
                    this._memoNo = value;
                    this.RaiseDataMemberChanged("MemoNo");
                    this.OnMemoNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Method' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string Method
        {
            get
            {
                return this._method;
            }
            set
            {
                if ((this._method != value))
                {
                    this.OnMethodChanging(value);
                    this.RaiseDataMemberChanging("Method");
                    this.ValidateProperty("Method", value);
                    this._method = value;
                    this.RaiseDataMemberChanged("Method");
                    this.OnMethodChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpeningQuantity' value.
        /// </summary>
        [DataMember()]
        public double OpeningQuantity
        {
            get
            {
                return this._openingQuantity;
            }
            set
            {
                if ((this._openingQuantity != value))
                {
                    this.OnOpeningQuantityChanging(value);
                    this.RaiseDataMemberChanging("OpeningQuantity");
                    this.ValidateProperty("OpeningQuantity", value);
                    this._openingQuantity = value;
                    this.RaiseDataMemberChanged("OpeningQuantity");
                    this.OnOpeningQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_InventoryLog", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.InventoryLogs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.InventoryLogs.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductCost' value.
        /// </summary>
        [DataMember()]
        public double ProductCost
        {
            get
            {
                return this._productCost;
            }
            set
            {
                if ((this._productCost != value))
                {
                    this.OnProductCostChanging(value);
                    this.RaiseDataMemberChanging("ProductCost");
                    this.ValidateProperty("ProductCost", value);
                    this._productCost = value;
                    this.RaiseDataMemberChanged("ProductCost");
                    this.OnProductCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductQuantity' value.
        /// </summary>
        [DataMember()]
        public double ProductQuantity
        {
            get
            {
                return this._productQuantity;
            }
            set
            {
                if ((this._productQuantity != value))
                {
                    this.OnProductQuantityChanging(value);
                    this.RaiseDataMemberChanging("ProductQuantity");
                    this.ValidateProperty("ProductQuantity", value);
                    this._productQuantity = value;
                    this.RaiseDataMemberChanged("ProductQuantity");
                    this.OnProductQuantityChanged();
                }
            }
        }
        
        private bool FilterInventory(Inventory entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._lotId == null) 
                        || (this._method == null)))
            {
                return null;
            }
            return EntityKey.Create(this._date, this._inventoryId, this._lotId, this._method, this._productId);
        }
    }
    
    /// <summary>
    /// The 'InventoryPackageInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class InventoryPackageInfo : Entity
    {
        
        private double _finishedQuantity;
        
        private EntityRef<Inventory> _inventory;
        
        private long _inventoryId;
        
        private double _onProcessingQuantity;
        
        private EntityRef<Package> _package;
        
        private long _packageId;
        
        private double _unfinishedQuantity;
        
        private Nullable<double> _unitCost;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFinishedQuantityChanging(double value);
        partial void OnFinishedQuantityChanged();
        partial void OnInventoryIdChanging(long value);
        partial void OnInventoryIdChanged();
        partial void OnOnProcessingQuantityChanging(double value);
        partial void OnOnProcessingQuantityChanged();
        partial void OnPackageIdChanging(long value);
        partial void OnPackageIdChanged();
        partial void OnUnfinishedQuantityChanging(double value);
        partial void OnUnfinishedQuantityChanged();
        partial void OnUnitCostChanging(Nullable<double> value);
        partial void OnUnitCostChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryPackageInfo"/> class.
        /// </summary>
        public InventoryPackageInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FinishedQuantity' value.
        /// </summary>
        [DataMember()]
        public double FinishedQuantity
        {
            get
            {
                return this._finishedQuantity;
            }
            set
            {
                if ((this._finishedQuantity != value))
                {
                    this.OnFinishedQuantityChanging(value);
                    this.RaiseDataMemberChanging("FinishedQuantity");
                    this.ValidateProperty("FinishedQuantity", value);
                    this._finishedQuantity = value;
                    this.RaiseDataMemberChanged("FinishedQuantity");
                    this.OnFinishedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Inventory"/> entity.
        /// </summary>
        [Association("Inventory_InventoryPackageInfo", "InventoryId", "InventoryId", IsForeignKey=true)]
        [XmlIgnore()]
        public Inventory Inventory
        {
            get
            {
                if ((this._inventory == null))
                {
                    this._inventory = new EntityRef<Inventory>(this, "Inventory", this.FilterInventory);
                }
                return this._inventory.Entity;
            }
            set
            {
                Inventory previous = this.Inventory;
                if ((previous != value))
                {
                    this.ValidateProperty("Inventory", value);
                    if ((previous != null))
                    {
                        this._inventory.Entity = null;
                        previous.InventoryPackageInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.InventoryId = value.InventoryId;
                    }
                    else
                    {
                        this.InventoryId = default(long);
                    }
                    this._inventory.Entity = value;
                    if ((value != null))
                    {
                        value.InventoryPackageInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Inventory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long InventoryId
        {
            get
            {
                return this._inventoryId;
            }
            set
            {
                if ((this._inventoryId != value))
                {
                    this.OnInventoryIdChanging(value);
                    this.RaiseDataMemberChanging("InventoryId");
                    this.ValidateProperty("InventoryId", value);
                    this._inventoryId = value;
                    this.RaiseDataMemberChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnProcessingQuantity' value.
        /// </summary>
        [DataMember()]
        public double OnProcessingQuantity
        {
            get
            {
                return this._onProcessingQuantity;
            }
            set
            {
                if ((this._onProcessingQuantity != value))
                {
                    this.OnOnProcessingQuantityChanging(value);
                    this.RaiseDataMemberChanging("OnProcessingQuantity");
                    this.ValidateProperty("OnProcessingQuantity", value);
                    this._onProcessingQuantity = value;
                    this.RaiseDataMemberChanged("OnProcessingQuantity");
                    this.OnOnProcessingQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Package"/> entity.
        /// </summary>
        [Association("Package_InventoryPackageInfo", "PackageId", "PackageId", IsForeignKey=true)]
        [XmlIgnore()]
        public Package Package
        {
            get
            {
                if ((this._package == null))
                {
                    this._package = new EntityRef<Package>(this, "Package", this.FilterPackage);
                }
                return this._package.Entity;
            }
            set
            {
                Package previous = this.Package;
                if ((previous != value))
                {
                    this.ValidateProperty("Package", value);
                    if ((previous != null))
                    {
                        this._package.Entity = null;
                        previous.InventoryPackageInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PackageId = value.PackageId;
                    }
                    else
                    {
                        this.PackageId = default(long);
                    }
                    this._package.Entity = value;
                    if ((value != null))
                    {
                        value.InventoryPackageInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Package");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long PackageId
        {
            get
            {
                return this._packageId;
            }
            set
            {
                if ((this._packageId != value))
                {
                    this.OnPackageIdChanging(value);
                    this.RaiseDataMemberChanging("PackageId");
                    this.ValidateProperty("PackageId", value);
                    this._packageId = value;
                    this.RaiseDataMemberChanged("PackageId");
                    this.OnPackageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnfinishedQuantity' value.
        /// </summary>
        [DataMember()]
        public double UnfinishedQuantity
        {
            get
            {
                return this._unfinishedQuantity;
            }
            set
            {
                if ((this._unfinishedQuantity != value))
                {
                    this.OnUnfinishedQuantityChanging(value);
                    this.RaiseDataMemberChanging("UnfinishedQuantity");
                    this.ValidateProperty("UnfinishedQuantity", value);
                    this._unfinishedQuantity = value;
                    this.RaiseDataMemberChanged("UnfinishedQuantity");
                    this.OnUnfinishedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitCost' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> UnitCost
        {
            get
            {
                return this._unitCost;
            }
            set
            {
                if ((this._unitCost != value))
                {
                    this.OnUnitCostChanging(value);
                    this.RaiseDataMemberChanging("UnitCost");
                    this.ValidateProperty("UnitCost", value);
                    this._unitCost = value;
                    this.RaiseDataMemberChanged("UnitCost");
                    this.OnUnitCostChanged();
                }
            }
        }
        
        private bool FilterInventory(Inventory entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private bool FilterPackage(Package entity)
        {
            return (entity.PackageId == this.PackageId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._inventoryId, this._packageId);
        }
    }
    
    /// <summary>
    /// The 'InventoryProductInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class InventoryProductInfo : Entity
    {
        
        private double _finishedQuantity;
        
        private EntityRef<Inventory> _inventory;
        
        private long _inventoryId;
        
        private string _lotId;
        
        private double _onProcessingQuantity;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private double _unfinishedQuantity;
        
        private Nullable<double> _unitLotCost;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFinishedQuantityChanging(double value);
        partial void OnFinishedQuantityChanged();
        partial void OnInventoryIdChanging(long value);
        partial void OnInventoryIdChanged();
        partial void OnLotIdChanging(string value);
        partial void OnLotIdChanged();
        partial void OnOnProcessingQuantityChanging(double value);
        partial void OnOnProcessingQuantityChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnUnfinishedQuantityChanging(double value);
        partial void OnUnfinishedQuantityChanged();
        partial void OnUnitLotCostChanging(Nullable<double> value);
        partial void OnUnitLotCostChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryProductInfo"/> class.
        /// </summary>
        public InventoryProductInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FinishedQuantity' value.
        /// </summary>
        [DataMember()]
        public double FinishedQuantity
        {
            get
            {
                return this._finishedQuantity;
            }
            set
            {
                if ((this._finishedQuantity != value))
                {
                    this.OnFinishedQuantityChanging(value);
                    this.RaiseDataMemberChanging("FinishedQuantity");
                    this.ValidateProperty("FinishedQuantity", value);
                    this._finishedQuantity = value;
                    this.RaiseDataMemberChanged("FinishedQuantity");
                    this.OnFinishedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Inventory"/> entity.
        /// </summary>
        [Association("Inventory_InventoryProductInfo", "InventoryId", "InventoryId", IsForeignKey=true)]
        [XmlIgnore()]
        public Inventory Inventory
        {
            get
            {
                if ((this._inventory == null))
                {
                    this._inventory = new EntityRef<Inventory>(this, "Inventory", this.FilterInventory);
                }
                return this._inventory.Entity;
            }
            set
            {
                Inventory previous = this.Inventory;
                if ((previous != value))
                {
                    this.ValidateProperty("Inventory", value);
                    if ((previous != null))
                    {
                        this._inventory.Entity = null;
                        previous.InventoryProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.InventoryId = value.InventoryId;
                    }
                    else
                    {
                        this.InventoryId = default(long);
                    }
                    this._inventory.Entity = value;
                    if ((value != null))
                    {
                        value.InventoryProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Inventory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long InventoryId
        {
            get
            {
                return this._inventoryId;
            }
            set
            {
                if ((this._inventoryId != value))
                {
                    this.OnInventoryIdChanging(value);
                    this.RaiseDataMemberChanging("InventoryId");
                    this.ValidateProperty("InventoryId", value);
                    this._inventoryId = value;
                    this.RaiseDataMemberChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string LotId
        {
            get
            {
                return this._lotId;
            }
            set
            {
                if ((this._lotId != value))
                {
                    this.OnLotIdChanging(value);
                    this.RaiseDataMemberChanging("LotId");
                    this.ValidateProperty("LotId", value);
                    this._lotId = value;
                    this.RaiseDataMemberChanged("LotId");
                    this.OnLotIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnProcessingQuantity' value.
        /// </summary>
        [DataMember()]
        public double OnProcessingQuantity
        {
            get
            {
                return this._onProcessingQuantity;
            }
            set
            {
                if ((this._onProcessingQuantity != value))
                {
                    this.OnOnProcessingQuantityChanging(value);
                    this.RaiseDataMemberChanging("OnProcessingQuantity");
                    this.ValidateProperty("OnProcessingQuantity", value);
                    this._onProcessingQuantity = value;
                    this.RaiseDataMemberChanged("OnProcessingQuantity");
                    this.OnOnProcessingQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_InventoryProductInfo", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.InventoryProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.InventoryProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnfinishedQuantity' value.
        /// </summary>
        [DataMember()]
        public double UnfinishedQuantity
        {
            get
            {
                return this._unfinishedQuantity;
            }
            set
            {
                if ((this._unfinishedQuantity != value))
                {
                    this.OnUnfinishedQuantityChanging(value);
                    this.RaiseDataMemberChanging("UnfinishedQuantity");
                    this.ValidateProperty("UnfinishedQuantity", value);
                    this._unfinishedQuantity = value;
                    this.RaiseDataMemberChanged("UnfinishedQuantity");
                    this.OnUnfinishedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitLotCost' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> UnitLotCost
        {
            get
            {
                return this._unitLotCost;
            }
            set
            {
                if ((this._unitLotCost != value))
                {
                    this.OnUnitLotCostChanging(value);
                    this.RaiseDataMemberChanging("UnitLotCost");
                    this.ValidateProperty("UnitLotCost", value);
                    this._unitLotCost = value;
                    this.RaiseDataMemberChanged("UnitLotCost");
                    this.OnUnitLotCostChanged();
                }
            }
        }
        
        private bool FilterInventory(Inventory entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._lotId == null))
            {
                return null;
            }
            return EntityKey.Create(this._inventoryId, this._lotId, this._productId);
        }
    }
    
    /// <summary>
    /// The 'Ledger' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Ledger : Entity
    {
        
        private double _creditAmount;
        
        private DateTime _date;
        
        private bool _isDealerOrEmployee;
        
        private bool _isDebitOrCredit;
        
        private long _memoNo;
        
        private string _method;
        
        private long _partyId;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private double _productQuantity;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreditAmountChanging(double value);
        partial void OnCreditAmountChanged();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnIsDealerOrEmployeeChanging(bool value);
        partial void OnIsDealerOrEmployeeChanged();
        partial void OnIsDebitOrCreditChanging(bool value);
        partial void OnIsDebitOrCreditChanged();
        partial void OnMemoNoChanging(long value);
        partial void OnMemoNoChanged();
        partial void OnMethodChanging(string value);
        partial void OnMethodChanged();
        partial void OnPartyIdChanging(long value);
        partial void OnPartyIdChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnProductQuantityChanging(double value);
        partial void OnProductQuantityChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Ledger"/> class.
        /// </summary>
        public Ledger()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CreditAmount' value.
        /// </summary>
        [DataMember()]
        public double CreditAmount
        {
            get
            {
                return this._creditAmount;
            }
            set
            {
                if ((this._creditAmount != value))
                {
                    this.OnCreditAmountChanging(value);
                    this.RaiseDataMemberChanging("CreditAmount");
                    this.ValidateProperty("CreditAmount", value);
                    this._creditAmount = value;
                    this.RaiseDataMemberChanged("CreditAmount");
                    this.OnCreditAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsDealerOrEmployee' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public bool IsDealerOrEmployee
        {
            get
            {
                return this._isDealerOrEmployee;
            }
            set
            {
                if ((this._isDealerOrEmployee != value))
                {
                    this.OnIsDealerOrEmployeeChanging(value);
                    this.RaiseDataMemberChanging("IsDealerOrEmployee");
                    this.ValidateProperty("IsDealerOrEmployee", value);
                    this._isDealerOrEmployee = value;
                    this.RaiseDataMemberChanged("IsDealerOrEmployee");
                    this.OnIsDealerOrEmployeeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsDebitOrCredit' value.
        /// </summary>
        [DataMember()]
        public bool IsDebitOrCredit
        {
            get
            {
                return this._isDebitOrCredit;
            }
            set
            {
                if ((this._isDebitOrCredit != value))
                {
                    this.OnIsDebitOrCreditChanging(value);
                    this.RaiseDataMemberChanging("IsDebitOrCredit");
                    this.ValidateProperty("IsDebitOrCredit", value);
                    this._isDebitOrCredit = value;
                    this.RaiseDataMemberChanged("IsDebitOrCredit");
                    this.OnIsDebitOrCreditChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MemoNo' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long MemoNo
        {
            get
            {
                return this._memoNo;
            }
            set
            {
                if ((this._memoNo != value))
                {
                    this.OnMemoNoChanging(value);
                    this.RaiseDataMemberChanging("MemoNo");
                    this.ValidateProperty("MemoNo", value);
                    this._memoNo = value;
                    this.RaiseDataMemberChanged("MemoNo");
                    this.OnMemoNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Method' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string Method
        {
            get
            {
                return this._method;
            }
            set
            {
                if ((this._method != value))
                {
                    this.OnMethodChanging(value);
                    this.RaiseDataMemberChanging("Method");
                    this.ValidateProperty("Method", value);
                    this._method = value;
                    this.RaiseDataMemberChanged("Method");
                    this.OnMethodChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PartyId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long PartyId
        {
            get
            {
                return this._partyId;
            }
            set
            {
                if ((this._partyId != value))
                {
                    this.OnPartyIdChanging(value);
                    this.RaiseDataMemberChanging("PartyId");
                    this.ValidateProperty("PartyId", value);
                    this._partyId = value;
                    this.RaiseDataMemberChanged("PartyId");
                    this.OnPartyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_Ledger", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.Ledgers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.Ledgers.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductQuantity' value.
        /// </summary>
        [DataMember()]
        public double ProductQuantity
        {
            get
            {
                return this._productQuantity;
            }
            set
            {
                if ((this._productQuantity != value))
                {
                    this.OnProductQuantityChanging(value);
                    this.RaiseDataMemberChanging("ProductQuantity");
                    this.ValidateProperty("ProductQuantity", value);
                    this._productQuantity = value;
                    this.RaiseDataMemberChanged("ProductQuantity");
                    this.OnProductQuantityChanged();
                }
            }
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._method == null))
            {
                return null;
            }
            return EntityKey.Create(this._date, this._isDealerOrEmployee, this._memoNo, this._method, this._partyId, this._productId);
        }
    }
    
    /// <summary>
    /// The 'Message' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Message : Entity
    {
        
        private string _body;
        
        private EntityCollection<MessageDelivery> _messageDeliveries;
        
        private long _messageId;
        
        private string _messageType;
        
        private string _subject;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBodyChanging(string value);
        partial void OnBodyChanged();
        partial void OnMessageIdChanging(long value);
        partial void OnMessageIdChanged();
        partial void OnMessageTypeChanging(string value);
        partial void OnMessageTypeChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Message"/> class.
        /// </summary>
        public Message()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Body' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Body
        {
            get
            {
                return this._body;
            }
            set
            {
                if ((this._body != value))
                {
                    this.OnBodyChanging(value);
                    this.RaiseDataMemberChanging("Body");
                    this.ValidateProperty("Body", value);
                    this._body = value;
                    this.RaiseDataMemberChanged("Body");
                    this.OnBodyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MessageDelivery"/> entity instances.
        /// </summary>
        [Association("Message_MessageDelivery", "MessageId", "MessageId")]
        [XmlIgnore()]
        public EntityCollection<MessageDelivery> MessageDeliveries
        {
            get
            {
                if ((this._messageDeliveries == null))
                {
                    this._messageDeliveries = new EntityCollection<MessageDelivery>(this, "MessageDeliveries", this.FilterMessageDeliveries, this.AttachMessageDeliveries, this.DetachMessageDeliveries);
                }
                return this._messageDeliveries;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long MessageId
        {
            get
            {
                return this._messageId;
            }
            set
            {
                if ((this._messageId != value))
                {
                    this.OnMessageIdChanging(value);
                    this.ValidateProperty("MessageId", value);
                    this._messageId = value;
                    this.RaisePropertyChanged("MessageId");
                    this.OnMessageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageType' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string MessageType
        {
            get
            {
                return this._messageType;
            }
            set
            {
                if ((this._messageType != value))
                {
                    this.OnMessageTypeChanging(value);
                    this.RaiseDataMemberChanging("MessageType");
                    this.ValidateProperty("MessageType", value);
                    this._messageType = value;
                    this.RaiseDataMemberChanged("MessageType");
                    this.OnMessageTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Subject' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Subject
        {
            get
            {
                return this._subject;
            }
            set
            {
                if ((this._subject != value))
                {
                    this.OnSubjectChanging(value);
                    this.RaiseDataMemberChanging("Subject");
                    this.ValidateProperty("Subject", value);
                    this._subject = value;
                    this.RaiseDataMemberChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }
        
        private void AttachMessageDeliveries(MessageDelivery entity)
        {
            entity.Message = this;
        }
        
        private void DetachMessageDeliveries(MessageDelivery entity)
        {
            entity.Message = null;
        }
        
        private bool FilterMessageDeliveries(MessageDelivery entity)
        {
            return (entity.MessageId == this.MessageId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._messageId;
        }
    }
    
    /// <summary>
    /// The 'MessageDelivery' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class MessageDelivery : Entity
    {
        
        private DateTime _dateOfIssue;
        
        private EntityRef<Employee> _employee;
        
        private EntityRef<Employee> _employee1;
        
        private EntityRef<Message> _message;
        
        private long _messageId;
        
        private string _officeCode;
        
        private long _sendFromId;
        
        private long _sendToId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateOfIssueChanging(DateTime value);
        partial void OnDateOfIssueChanged();
        partial void OnMessageIdChanging(long value);
        partial void OnMessageIdChanged();
        partial void OnOfficeCodeChanging(string value);
        partial void OnOfficeCodeChanged();
        partial void OnSendFromIdChanging(long value);
        partial void OnSendFromIdChanged();
        partial void OnSendToIdChanging(long value);
        partial void OnSendToIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageDelivery"/> class.
        /// </summary>
        public MessageDelivery()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfIssue' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfIssue
        {
            get
            {
                return this._dateOfIssue;
            }
            set
            {
                if ((this._dateOfIssue != value))
                {
                    this.OnDateOfIssueChanging(value);
                    this.RaiseDataMemberChanging("DateOfIssue");
                    this.ValidateProperty("DateOfIssue", value);
                    this._dateOfIssue = value;
                    this.RaiseDataMemberChanged("DateOfIssue");
                    this.OnDateOfIssueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_MessageDelivery", "SendFromId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.MessageDeliveries.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SendFromId = value.EmployeeId;
                    }
                    else
                    {
                        this.SendFromId = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.MessageDeliveries.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_MessageDelivery1", "SendToId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee1
        {
            get
            {
                if ((this._employee1 == null))
                {
                    this._employee1 = new EntityRef<Employee>(this, "Employee1", this.FilterEmployee1);
                }
                return this._employee1.Entity;
            }
            set
            {
                Employee previous = this.Employee1;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee1", value);
                    if ((previous != null))
                    {
                        this._employee1.Entity = null;
                        previous.MessageDeliveries1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SendToId = value.EmployeeId;
                    }
                    else
                    {
                        this.SendToId = default(long);
                    }
                    this._employee1.Entity = value;
                    if ((value != null))
                    {
                        value.MessageDeliveries1.Add(this);
                    }
                    this.RaisePropertyChanged("Employee1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Message"/> entity.
        /// </summary>
        [Association("Message_MessageDelivery", "MessageId", "MessageId", IsForeignKey=true)]
        [XmlIgnore()]
        public Message Message
        {
            get
            {
                if ((this._message == null))
                {
                    this._message = new EntityRef<Message>(this, "Message", this.FilterMessage);
                }
                return this._message.Entity;
            }
            set
            {
                Message previous = this.Message;
                if ((previous != value))
                {
                    this.ValidateProperty("Message", value);
                    if ((previous != null))
                    {
                        this._message.Entity = null;
                        previous.MessageDeliveries.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MessageId = value.MessageId;
                    }
                    else
                    {
                        this.MessageId = default(long);
                    }
                    this._message.Entity = value;
                    if ((value != null))
                    {
                        value.MessageDeliveries.Add(this);
                    }
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long MessageId
        {
            get
            {
                return this._messageId;
            }
            set
            {
                if ((this._messageId != value))
                {
                    this.OnMessageIdChanging(value);
                    this.RaiseDataMemberChanging("MessageId");
                    this.ValidateProperty("MessageId", value);
                    this._messageId = value;
                    this.RaiseDataMemberChanged("MessageId");
                    this.OnMessageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OfficeCode' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string OfficeCode
        {
            get
            {
                return this._officeCode;
            }
            set
            {
                if ((this._officeCode != value))
                {
                    this.OnOfficeCodeChanging(value);
                    this.ValidateProperty("OfficeCode", value);
                    this._officeCode = value;
                    this.RaisePropertyChanged("OfficeCode");
                    this.OnOfficeCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SendFromId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long SendFromId
        {
            get
            {
                return this._sendFromId;
            }
            set
            {
                if ((this._sendFromId != value))
                {
                    this.OnSendFromIdChanging(value);
                    this.RaiseDataMemberChanging("SendFromId");
                    this.ValidateProperty("SendFromId", value);
                    this._sendFromId = value;
                    this.RaiseDataMemberChanged("SendFromId");
                    this.OnSendFromIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SendToId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long SendToId
        {
            get
            {
                return this._sendToId;
            }
            set
            {
                if ((this._sendToId != value))
                {
                    this.OnSendToIdChanging(value);
                    this.RaiseDataMemberChanging("SendToId");
                    this.ValidateProperty("SendToId", value);
                    this._sendToId = value;
                    this.RaiseDataMemberChanged("SendToId");
                    this.OnSendToIdChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.SendFromId);
        }
        
        private bool FilterEmployee1(Employee entity)
        {
            return (entity.EmployeeId == this.SendToId);
        }
        
        private bool FilterMessage(Message entity)
        {
            return (entity.MessageId == this.MessageId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._officeCode;
        }
    }
    
    /// <summary>
    /// The 'MRR' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class MRR : Entity
    {
        
        private DateTime _dateOfApproval;
        
        private DateTime _dateOfIssue;
        
        private EntityRef<Employee> _employee;
        
        private EntityRef<Inventory> _inventory;
        
        private long _inventoryId;
        
        private long _issuedById;
        
        private long _issuedToId;
        
        private string _mrrCode;
        
        private long _mrrId;
        
        private EntityCollection<MRRPackageInfo> _mrrPackageInfoes;
        
        private EntityCollection<MRRProductInfo> _mrrProductInfoes;
        
        private string _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateOfApprovalChanging(DateTime value);
        partial void OnDateOfApprovalChanged();
        partial void OnDateOfIssueChanging(DateTime value);
        partial void OnDateOfIssueChanged();
        partial void OnInventoryIdChanging(long value);
        partial void OnInventoryIdChanged();
        partial void OnIssuedByIdChanging(long value);
        partial void OnIssuedByIdChanged();
        partial void OnIssuedToIdChanging(long value);
        partial void OnIssuedToIdChanged();
        partial void OnMRRCodeChanging(string value);
        partial void OnMRRCodeChanged();
        partial void OnMRRIdChanging(long value);
        partial void OnMRRIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MRR"/> class.
        /// </summary>
        public MRR()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfApproval' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfApproval
        {
            get
            {
                return this._dateOfApproval;
            }
            set
            {
                if ((this._dateOfApproval != value))
                {
                    this.OnDateOfApprovalChanging(value);
                    this.RaiseDataMemberChanging("DateOfApproval");
                    this.ValidateProperty("DateOfApproval", value);
                    this._dateOfApproval = value;
                    this.RaiseDataMemberChanged("DateOfApproval");
                    this.OnDateOfApprovalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfIssue' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfIssue
        {
            get
            {
                return this._dateOfIssue;
            }
            set
            {
                if ((this._dateOfIssue != value))
                {
                    this.OnDateOfIssueChanging(value);
                    this.RaiseDataMemberChanging("DateOfIssue");
                    this.ValidateProperty("DateOfIssue", value);
                    this._dateOfIssue = value;
                    this.RaiseDataMemberChanged("DateOfIssue");
                    this.OnDateOfIssueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_MRR", "IssuedById", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.MRRs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssuedById = value.EmployeeId;
                    }
                    else
                    {
                        this.IssuedById = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.MRRs.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Inventory"/> entity.
        /// </summary>
        [Association("Inventory_MRR", "InventoryId", "InventoryId", IsForeignKey=true)]
        [XmlIgnore()]
        public Inventory Inventory
        {
            get
            {
                if ((this._inventory == null))
                {
                    this._inventory = new EntityRef<Inventory>(this, "Inventory", this.FilterInventory);
                }
                return this._inventory.Entity;
            }
            set
            {
                Inventory previous = this.Inventory;
                if ((previous != value))
                {
                    this.ValidateProperty("Inventory", value);
                    if ((previous != null))
                    {
                        this._inventory.Entity = null;
                        previous.MRRs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.InventoryId = value.InventoryId;
                    }
                    else
                    {
                        this.InventoryId = default(long);
                    }
                    this._inventory.Entity = value;
                    if ((value != null))
                    {
                        value.MRRs.Add(this);
                    }
                    this.RaisePropertyChanged("Inventory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long InventoryId
        {
            get
            {
                return this._inventoryId;
            }
            set
            {
                if ((this._inventoryId != value))
                {
                    this.OnInventoryIdChanging(value);
                    this.RaiseDataMemberChanging("InventoryId");
                    this.ValidateProperty("InventoryId", value);
                    this._inventoryId = value;
                    this.RaiseDataMemberChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssuedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long IssuedById
        {
            get
            {
                return this._issuedById;
            }
            set
            {
                if ((this._issuedById != value))
                {
                    this.OnIssuedByIdChanging(value);
                    this.RaiseDataMemberChanging("IssuedById");
                    this.ValidateProperty("IssuedById", value);
                    this._issuedById = value;
                    this.RaiseDataMemberChanged("IssuedById");
                    this.OnIssuedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssuedToId' value.
        /// </summary>
        [DataMember()]
        public long IssuedToId
        {
            get
            {
                return this._issuedToId;
            }
            set
            {
                if ((this._issuedToId != value))
                {
                    this.OnIssuedToIdChanging(value);
                    this.RaiseDataMemberChanging("IssuedToId");
                    this.ValidateProperty("IssuedToId", value);
                    this._issuedToId = value;
                    this.RaiseDataMemberChanged("IssuedToId");
                    this.OnIssuedToIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MRRCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string MRRCode
        {
            get
            {
                return this._mrrCode;
            }
            set
            {
                if ((this._mrrCode != value))
                {
                    this.OnMRRCodeChanging(value);
                    this.RaiseDataMemberChanging("MRRCode");
                    this.ValidateProperty("MRRCode", value);
                    this._mrrCode = value;
                    this.RaiseDataMemberChanged("MRRCode");
                    this.OnMRRCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MRRId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long MRRId
        {
            get
            {
                return this._mrrId;
            }
            set
            {
                if ((this._mrrId != value))
                {
                    this.OnMRRIdChanging(value);
                    this.ValidateProperty("MRRId", value);
                    this._mrrId = value;
                    this.RaisePropertyChanged("MRRId");
                    this.OnMRRIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MRRPackageInfo"/> entity instances.
        /// </summary>
        [Association("MRR_MRRPackageInfo", "MRRId", "MRRId")]
        [XmlIgnore()]
        public EntityCollection<MRRPackageInfo> MRRPackageInfoes
        {
            get
            {
                if ((this._mrrPackageInfoes == null))
                {
                    this._mrrPackageInfoes = new EntityCollection<MRRPackageInfo>(this, "MRRPackageInfoes", this.FilterMRRPackageInfoes, this.AttachMRRPackageInfoes, this.DetachMRRPackageInfoes);
                }
                return this._mrrPackageInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MRRProductInfo"/> entity instances.
        /// </summary>
        [Association("MRR_MRRProductInfo", "MRRId", "MRRId")]
        [XmlIgnore()]
        public EntityCollection<MRRProductInfo> MRRProductInfoes
        {
            get
            {
                if ((this._mrrProductInfoes == null))
                {
                    this._mrrProductInfoes = new EntityCollection<MRRProductInfo>(this, "MRRProductInfoes", this.FilterMRRProductInfoes, this.AttachMRRProductInfoes, this.DetachMRRProductInfoes);
                }
                return this._mrrProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.IssuedById);
        }
        
        private bool FilterInventory(Inventory entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private void AttachMRRPackageInfoes(MRRPackageInfo entity)
        {
            entity.MRR = this;
        }
        
        private void DetachMRRPackageInfoes(MRRPackageInfo entity)
        {
            entity.MRR = null;
        }
        
        private bool FilterMRRPackageInfoes(MRRPackageInfo entity)
        {
            return (entity.MRRId == this.MRRId);
        }
        
        private void AttachMRRProductInfoes(MRRProductInfo entity)
        {
            entity.MRR = this;
        }
        
        private void DetachMRRProductInfoes(MRRProductInfo entity)
        {
            entity.MRR = null;
        }
        
        private bool FilterMRRProductInfoes(MRRProductInfo entity)
        {
            return (entity.MRRId == this.MRRId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._mrrId;
        }
    }
    
    /// <summary>
    /// The 'MRRPackageInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class MRRPackageInfo : Entity
    {
        
        private double _acceptedQuantity;
        
        private EntityRef<MRR> _mrr;
        
        private long _mrrId;
        
        private EntityRef<Package> _package;
        
        private long _packageId;
        
        private double _placedQuantity;
        
        private Nullable<double> _purchasePrice;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAcceptedQuantityChanging(double value);
        partial void OnAcceptedQuantityChanged();
        partial void OnMRRIdChanging(long value);
        partial void OnMRRIdChanged();
        partial void OnPackageIdChanging(long value);
        partial void OnPackageIdChanged();
        partial void OnPlacedQuantityChanging(double value);
        partial void OnPlacedQuantityChanged();
        partial void OnPurchasePriceChanging(Nullable<double> value);
        partial void OnPurchasePriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MRRPackageInfo"/> class.
        /// </summary>
        public MRRPackageInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AcceptedQuantity' value.
        /// </summary>
        [DataMember()]
        public double AcceptedQuantity
        {
            get
            {
                return this._acceptedQuantity;
            }
            set
            {
                if ((this._acceptedQuantity != value))
                {
                    this.OnAcceptedQuantityChanging(value);
                    this.RaiseDataMemberChanging("AcceptedQuantity");
                    this.ValidateProperty("AcceptedQuantity", value);
                    this._acceptedQuantity = value;
                    this.RaiseDataMemberChanged("AcceptedQuantity");
                    this.OnAcceptedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MRR"/> entity.
        /// </summary>
        [Association("MRR_MRRPackageInfo", "MRRId", "MRRId", IsForeignKey=true)]
        [XmlIgnore()]
        public MRR MRR
        {
            get
            {
                if ((this._mrr == null))
                {
                    this._mrr = new EntityRef<MRR>(this, "MRR", this.FilterMRR);
                }
                return this._mrr.Entity;
            }
            set
            {
                MRR previous = this.MRR;
                if ((previous != value))
                {
                    this.ValidateProperty("MRR", value);
                    if ((previous != null))
                    {
                        this._mrr.Entity = null;
                        previous.MRRPackageInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MRRId = value.MRRId;
                    }
                    else
                    {
                        this.MRRId = default(long);
                    }
                    this._mrr.Entity = value;
                    if ((value != null))
                    {
                        value.MRRPackageInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("MRR");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MRRId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long MRRId
        {
            get
            {
                return this._mrrId;
            }
            set
            {
                if ((this._mrrId != value))
                {
                    this.OnMRRIdChanging(value);
                    this.RaiseDataMemberChanging("MRRId");
                    this.ValidateProperty("MRRId", value);
                    this._mrrId = value;
                    this.RaiseDataMemberChanged("MRRId");
                    this.OnMRRIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Package"/> entity.
        /// </summary>
        [Association("Package_MRRPackageInfo", "PackageId", "PackageId", IsForeignKey=true)]
        [XmlIgnore()]
        public Package Package
        {
            get
            {
                if ((this._package == null))
                {
                    this._package = new EntityRef<Package>(this, "Package", this.FilterPackage);
                }
                return this._package.Entity;
            }
            set
            {
                Package previous = this.Package;
                if ((previous != value))
                {
                    this.ValidateProperty("Package", value);
                    if ((previous != null))
                    {
                        this._package.Entity = null;
                        previous.MRRPackageInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PackageId = value.PackageId;
                    }
                    else
                    {
                        this.PackageId = default(long);
                    }
                    this._package.Entity = value;
                    if ((value != null))
                    {
                        value.MRRPackageInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Package");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long PackageId
        {
            get
            {
                return this._packageId;
            }
            set
            {
                if ((this._packageId != value))
                {
                    this.OnPackageIdChanging(value);
                    this.RaiseDataMemberChanging("PackageId");
                    this.ValidateProperty("PackageId", value);
                    this._packageId = value;
                    this.RaiseDataMemberChanged("PackageId");
                    this.OnPackageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlacedQuantity' value.
        /// </summary>
        [DataMember()]
        public double PlacedQuantity
        {
            get
            {
                return this._placedQuantity;
            }
            set
            {
                if ((this._placedQuantity != value))
                {
                    this.OnPlacedQuantityChanging(value);
                    this.RaiseDataMemberChanging("PlacedQuantity");
                    this.ValidateProperty("PlacedQuantity", value);
                    this._placedQuantity = value;
                    this.RaiseDataMemberChanged("PlacedQuantity");
                    this.OnPlacedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchasePrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> PurchasePrice
        {
            get
            {
                return this._purchasePrice;
            }
            set
            {
                if ((this._purchasePrice != value))
                {
                    this.OnPurchasePriceChanging(value);
                    this.RaiseDataMemberChanging("PurchasePrice");
                    this.ValidateProperty("PurchasePrice", value);
                    this._purchasePrice = value;
                    this.RaiseDataMemberChanged("PurchasePrice");
                    this.OnPurchasePriceChanged();
                }
            }
        }
        
        private bool FilterMRR(MRR entity)
        {
            return (entity.MRRId == this.MRRId);
        }
        
        private bool FilterPackage(Package entity)
        {
            return (entity.PackageId == this.PackageId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._mrrId, this._packageId);
        }
    }
    
    /// <summary>
    /// The 'MRRProductInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class MRRProductInfo : Entity
    {
        
        private double _acceptedQuantity;
        
        private string _lotId;
        
        private EntityRef<MRR> _mrr;
        
        private long _mrrId;
        
        private double _placedQuantity;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private Nullable<double> _purchasePrice;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAcceptedQuantityChanging(double value);
        partial void OnAcceptedQuantityChanged();
        partial void OnLotIdChanging(string value);
        partial void OnLotIdChanged();
        partial void OnMRRIdChanging(long value);
        partial void OnMRRIdChanged();
        partial void OnPlacedQuantityChanging(double value);
        partial void OnPlacedQuantityChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnPurchasePriceChanging(Nullable<double> value);
        partial void OnPurchasePriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MRRProductInfo"/> class.
        /// </summary>
        public MRRProductInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AcceptedQuantity' value.
        /// </summary>
        [DataMember()]
        public double AcceptedQuantity
        {
            get
            {
                return this._acceptedQuantity;
            }
            set
            {
                if ((this._acceptedQuantity != value))
                {
                    this.OnAcceptedQuantityChanging(value);
                    this.RaiseDataMemberChanging("AcceptedQuantity");
                    this.ValidateProperty("AcceptedQuantity", value);
                    this._acceptedQuantity = value;
                    this.RaiseDataMemberChanged("AcceptedQuantity");
                    this.OnAcceptedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string LotId
        {
            get
            {
                return this._lotId;
            }
            set
            {
                if ((this._lotId != value))
                {
                    this.OnLotIdChanging(value);
                    this.RaiseDataMemberChanging("LotId");
                    this.ValidateProperty("LotId", value);
                    this._lotId = value;
                    this.RaiseDataMemberChanged("LotId");
                    this.OnLotIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MRR"/> entity.
        /// </summary>
        [Association("MRR_MRRProductInfo", "MRRId", "MRRId", IsForeignKey=true)]
        [XmlIgnore()]
        public MRR MRR
        {
            get
            {
                if ((this._mrr == null))
                {
                    this._mrr = new EntityRef<MRR>(this, "MRR", this.FilterMRR);
                }
                return this._mrr.Entity;
            }
            set
            {
                MRR previous = this.MRR;
                if ((previous != value))
                {
                    this.ValidateProperty("MRR", value);
                    if ((previous != null))
                    {
                        this._mrr.Entity = null;
                        previous.MRRProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MRRId = value.MRRId;
                    }
                    else
                    {
                        this.MRRId = default(long);
                    }
                    this._mrr.Entity = value;
                    if ((value != null))
                    {
                        value.MRRProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("MRR");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MRRId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long MRRId
        {
            get
            {
                return this._mrrId;
            }
            set
            {
                if ((this._mrrId != value))
                {
                    this.OnMRRIdChanging(value);
                    this.RaiseDataMemberChanging("MRRId");
                    this.ValidateProperty("MRRId", value);
                    this._mrrId = value;
                    this.RaiseDataMemberChanged("MRRId");
                    this.OnMRRIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlacedQuantity' value.
        /// </summary>
        [DataMember()]
        public double PlacedQuantity
        {
            get
            {
                return this._placedQuantity;
            }
            set
            {
                if ((this._placedQuantity != value))
                {
                    this.OnPlacedQuantityChanging(value);
                    this.RaiseDataMemberChanging("PlacedQuantity");
                    this.ValidateProperty("PlacedQuantity", value);
                    this._placedQuantity = value;
                    this.RaiseDataMemberChanged("PlacedQuantity");
                    this.OnPlacedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_MRRProductInfo", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.MRRProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.MRRProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchasePrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> PurchasePrice
        {
            get
            {
                return this._purchasePrice;
            }
            set
            {
                if ((this._purchasePrice != value))
                {
                    this.OnPurchasePriceChanging(value);
                    this.RaiseDataMemberChanging("PurchasePrice");
                    this.ValidateProperty("PurchasePrice", value);
                    this._purchasePrice = value;
                    this.RaiseDataMemberChanged("PurchasePrice");
                    this.OnPurchasePriceChanged();
                }
            }
        }
        
        private bool FilterMRR(MRR entity)
        {
            return (entity.MRRId == this.MRRId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._lotId == null))
            {
                return null;
            }
            return EntityKey.Create(this._lotId, this._mrrId, this._productId);
        }
    }
    
    /// <summary>
    /// The 'NoticeBoard' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class NoticeBoard : Entity
    {
        
        private EntityRef<Employee> _employee;
        
        private DateTime _endDate;
        
        private bool _isActive;
        
        private long _issuedById;
        
        private string _noticeBody;
        
        private long _noticeId;
        
        private string _noticeSubject;
        
        private DateTime _startDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEndDateChanging(DateTime value);
        partial void OnEndDateChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnIssuedByIdChanging(long value);
        partial void OnIssuedByIdChanged();
        partial void OnNoticeBodyChanging(string value);
        partial void OnNoticeBodyChanged();
        partial void OnNoticeIdChanging(long value);
        partial void OnNoticeIdChanged();
        partial void OnNoticeSubjectChanging(string value);
        partial void OnNoticeSubjectChanged();
        partial void OnStartDateChanging(DateTime value);
        partial void OnStartDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NoticeBoard"/> class.
        /// </summary>
        public NoticeBoard()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_NoticeBoard", "IssuedById", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.NoticeBoards.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssuedById = value.EmployeeId;
                    }
                    else
                    {
                        this.IssuedById = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.NoticeBoards.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndDate' value.
        /// </summary>
        [DataMember()]
        public DateTime EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.RaiseDataMemberChanging("EndDate");
                    this.ValidateProperty("EndDate", value);
                    this._endDate = value;
                    this.RaiseDataMemberChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public bool IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssuedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long IssuedById
        {
            get
            {
                return this._issuedById;
            }
            set
            {
                if ((this._issuedById != value))
                {
                    this.OnIssuedByIdChanging(value);
                    this.RaiseDataMemberChanging("IssuedById");
                    this.ValidateProperty("IssuedById", value);
                    this._issuedById = value;
                    this.RaiseDataMemberChanged("IssuedById");
                    this.OnIssuedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NoticeBody' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string NoticeBody
        {
            get
            {
                return this._noticeBody;
            }
            set
            {
                if ((this._noticeBody != value))
                {
                    this.OnNoticeBodyChanging(value);
                    this.RaiseDataMemberChanging("NoticeBody");
                    this.ValidateProperty("NoticeBody", value);
                    this._noticeBody = value;
                    this.RaiseDataMemberChanged("NoticeBody");
                    this.OnNoticeBodyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NoticeId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long NoticeId
        {
            get
            {
                return this._noticeId;
            }
            set
            {
                if ((this._noticeId != value))
                {
                    this.OnNoticeIdChanging(value);
                    this.ValidateProperty("NoticeId", value);
                    this._noticeId = value;
                    this.RaisePropertyChanged("NoticeId");
                    this.OnNoticeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NoticeSubject' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string NoticeSubject
        {
            get
            {
                return this._noticeSubject;
            }
            set
            {
                if ((this._noticeSubject != value))
                {
                    this.OnNoticeSubjectChanging(value);
                    this.RaiseDataMemberChanging("NoticeSubject");
                    this.ValidateProperty("NoticeSubject", value);
                    this._noticeSubject = value;
                    this.RaiseDataMemberChanged("NoticeSubject");
                    this.OnNoticeSubjectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartDate' value.
        /// </summary>
        [DataMember()]
        public DateTime StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.RaiseDataMemberChanging("StartDate");
                    this.ValidateProperty("StartDate", value);
                    this._startDate = value;
                    this.RaiseDataMemberChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.IssuedById);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._noticeId;
        }
    }
    
    /// <summary>
    /// The 'Package' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Package : Entity
    {
        
        private long _adminId;
        
        private EntityRef<Employee> _employee;
        
        private EntityRef<Employee> _employee1;
        
        private DateTime _introducedDate;
        
        private EntityCollection<InventoryPackageInfo> _inventoryPackageInfoes;
        
        private EntityCollection<MRRPackageInfo> _mrrPackageInfoes;
        
        private long _nsmId;
        
        private string _packageCode;
        
        private long _packageId;
        
        private string _packageName;
        
        private string _packageStatus;
        
        private EntityCollection<PLRPackageInfo> _plrPackageInfoes;
        
        private EntityCollection<RequisitionPackageInfo> _requisitionPackageInfoes;
        
        private EntityCollection<YearSummaryInventoryPackage> _yearSummaryInventoryPackages;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAdminIdChanging(long value);
        partial void OnAdminIdChanged();
        partial void OnIntroducedDateChanging(DateTime value);
        partial void OnIntroducedDateChanged();
        partial void OnNSMIdChanging(long value);
        partial void OnNSMIdChanged();
        partial void OnPackageCodeChanging(string value);
        partial void OnPackageCodeChanged();
        partial void OnPackageIdChanging(long value);
        partial void OnPackageIdChanged();
        partial void OnPackageNameChanging(string value);
        partial void OnPackageNameChanged();
        partial void OnPackageStatusChanging(string value);
        partial void OnPackageStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Package"/> class.
        /// </summary>
        public Package()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AdminId' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public long AdminId
        {
            get
            {
                return this._adminId;
            }
            set
            {
                if ((this._adminId != value))
                {
                    this.OnAdminIdChanging(value);
                    this.RaiseDataMemberChanging("AdminId");
                    this.ValidateProperty("AdminId", value);
                    this._adminId = value;
                    this.RaiseDataMemberChanged("AdminId");
                    this.OnAdminIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Package", "AdminId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.Packages.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AdminId = value.EmployeeId;
                    }
                    else
                    {
                        this.AdminId = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.Packages.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Package1", "NSMId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee1
        {
            get
            {
                if ((this._employee1 == null))
                {
                    this._employee1 = new EntityRef<Employee>(this, "Employee1", this.FilterEmployee1);
                }
                return this._employee1.Entity;
            }
            set
            {
                Employee previous = this.Employee1;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee1", value);
                    if ((previous != null))
                    {
                        this._employee1.Entity = null;
                        previous.Packages1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.NSMId = value.EmployeeId;
                    }
                    else
                    {
                        this.NSMId = default(long);
                    }
                    this._employee1.Entity = value;
                    if ((value != null))
                    {
                        value.Packages1.Add(this);
                    }
                    this.RaisePropertyChanged("Employee1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IntroducedDate' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public DateTime IntroducedDate
        {
            get
            {
                return this._introducedDate;
            }
            set
            {
                if ((this._introducedDate != value))
                {
                    this.OnIntroducedDateChanging(value);
                    this.RaiseDataMemberChanging("IntroducedDate");
                    this.ValidateProperty("IntroducedDate", value);
                    this._introducedDate = value;
                    this.RaiseDataMemberChanged("IntroducedDate");
                    this.OnIntroducedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="InventoryPackageInfo"/> entity instances.
        /// </summary>
        [Association("Package_InventoryPackageInfo", "PackageId", "PackageId")]
        [XmlIgnore()]
        public EntityCollection<InventoryPackageInfo> InventoryPackageInfoes
        {
            get
            {
                if ((this._inventoryPackageInfoes == null))
                {
                    this._inventoryPackageInfoes = new EntityCollection<InventoryPackageInfo>(this, "InventoryPackageInfoes", this.FilterInventoryPackageInfoes, this.AttachInventoryPackageInfoes, this.DetachInventoryPackageInfoes);
                }
                return this._inventoryPackageInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MRRPackageInfo"/> entity instances.
        /// </summary>
        [Association("Package_MRRPackageInfo", "PackageId", "PackageId")]
        [XmlIgnore()]
        public EntityCollection<MRRPackageInfo> MRRPackageInfoes
        {
            get
            {
                if ((this._mrrPackageInfoes == null))
                {
                    this._mrrPackageInfoes = new EntityCollection<MRRPackageInfo>(this, "MRRPackageInfoes", this.FilterMRRPackageInfoes, this.AttachMRRPackageInfoes, this.DetachMRRPackageInfoes);
                }
                return this._mrrPackageInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NSMId' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public long NSMId
        {
            get
            {
                return this._nsmId;
            }
            set
            {
                if ((this._nsmId != value))
                {
                    this.OnNSMIdChanging(value);
                    this.RaiseDataMemberChanging("NSMId");
                    this.ValidateProperty("NSMId", value);
                    this._nsmId = value;
                    this.RaiseDataMemberChanged("NSMId");
                    this.OnNSMIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string PackageCode
        {
            get
            {
                return this._packageCode;
            }
            set
            {
                if ((this._packageCode != value))
                {
                    this.OnPackageCodeChanging(value);
                    this.RaiseDataMemberChanging("PackageCode");
                    this.ValidateProperty("PackageCode", value);
                    this._packageCode = value;
                    this.RaiseDataMemberChanged("PackageCode");
                    this.OnPackageCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long PackageId
        {
            get
            {
                return this._packageId;
            }
            set
            {
                if ((this._packageId != value))
                {
                    this.OnPackageIdChanging(value);
                    this.ValidateProperty("PackageId", value);
                    this._packageId = value;
                    this.RaisePropertyChanged("PackageId");
                    this.OnPackageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string PackageName
        {
            get
            {
                return this._packageName;
            }
            set
            {
                if ((this._packageName != value))
                {
                    this.OnPackageNameChanging(value);
                    this.RaiseDataMemberChanging("PackageName");
                    this.ValidateProperty("PackageName", value);
                    this._packageName = value;
                    this.RaiseDataMemberChanged("PackageName");
                    this.OnPackageNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string PackageStatus
        {
            get
            {
                return this._packageStatus;
            }
            set
            {
                if ((this._packageStatus != value))
                {
                    this.OnPackageStatusChanging(value);
                    this.RaiseDataMemberChanging("PackageStatus");
                    this.ValidateProperty("PackageStatus", value);
                    this._packageStatus = value;
                    this.RaiseDataMemberChanged("PackageStatus");
                    this.OnPackageStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PLRPackageInfo"/> entity instances.
        /// </summary>
        [Association("Package_PLRPackageInfo", "PackageId", "PackageId")]
        [XmlIgnore()]
        public EntityCollection<PLRPackageInfo> PLRPackageInfoes
        {
            get
            {
                if ((this._plrPackageInfoes == null))
                {
                    this._plrPackageInfoes = new EntityCollection<PLRPackageInfo>(this, "PLRPackageInfoes", this.FilterPLRPackageInfoes, this.AttachPLRPackageInfoes, this.DetachPLRPackageInfoes);
                }
                return this._plrPackageInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RequisitionPackageInfo"/> entity instances.
        /// </summary>
        [Association("Package_RequisitionPackageInfo", "PackageId", "PackageId")]
        [XmlIgnore()]
        public EntityCollection<RequisitionPackageInfo> RequisitionPackageInfoes
        {
            get
            {
                if ((this._requisitionPackageInfoes == null))
                {
                    this._requisitionPackageInfoes = new EntityCollection<RequisitionPackageInfo>(this, "RequisitionPackageInfoes", this.FilterRequisitionPackageInfoes, this.AttachRequisitionPackageInfoes, this.DetachRequisitionPackageInfoes);
                }
                return this._requisitionPackageInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="YearSummaryInventoryPackage"/> entity instances.
        /// </summary>
        [Association("Package_YearSummaryInventoryPackage", "PackageId", "PackageId")]
        [XmlIgnore()]
        public EntityCollection<YearSummaryInventoryPackage> YearSummaryInventoryPackages
        {
            get
            {
                if ((this._yearSummaryInventoryPackages == null))
                {
                    this._yearSummaryInventoryPackages = new EntityCollection<YearSummaryInventoryPackage>(this, "YearSummaryInventoryPackages", this.FilterYearSummaryInventoryPackages, this.AttachYearSummaryInventoryPackages, this.DetachYearSummaryInventoryPackages);
                }
                return this._yearSummaryInventoryPackages;
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.AdminId);
        }
        
        private bool FilterEmployee1(Employee entity)
        {
            return (entity.EmployeeId == this.NSMId);
        }
        
        private void AttachInventoryPackageInfoes(InventoryPackageInfo entity)
        {
            entity.Package = this;
        }
        
        private void DetachInventoryPackageInfoes(InventoryPackageInfo entity)
        {
            entity.Package = null;
        }
        
        private bool FilterInventoryPackageInfoes(InventoryPackageInfo entity)
        {
            return (entity.PackageId == this.PackageId);
        }
        
        private void AttachMRRPackageInfoes(MRRPackageInfo entity)
        {
            entity.Package = this;
        }
        
        private void DetachMRRPackageInfoes(MRRPackageInfo entity)
        {
            entity.Package = null;
        }
        
        private bool FilterMRRPackageInfoes(MRRPackageInfo entity)
        {
            return (entity.PackageId == this.PackageId);
        }
        
        private void AttachPLRPackageInfoes(PLRPackageInfo entity)
        {
            entity.Package = this;
        }
        
        private void DetachPLRPackageInfoes(PLRPackageInfo entity)
        {
            entity.Package = null;
        }
        
        private bool FilterPLRPackageInfoes(PLRPackageInfo entity)
        {
            return (entity.PackageId == this.PackageId);
        }
        
        private void AttachRequisitionPackageInfoes(RequisitionPackageInfo entity)
        {
            entity.Package = this;
        }
        
        private void DetachRequisitionPackageInfoes(RequisitionPackageInfo entity)
        {
            entity.Package = null;
        }
        
        private bool FilterRequisitionPackageInfoes(RequisitionPackageInfo entity)
        {
            return (entity.PackageId == this.PackageId);
        }
        
        private void AttachYearSummaryInventoryPackages(YearSummaryInventoryPackage entity)
        {
            entity.Package = this;
        }
        
        private void DetachYearSummaryInventoryPackages(YearSummaryInventoryPackage entity)
        {
            entity.Package = null;
        }
        
        private bool FilterYearSummaryInventoryPackages(YearSummaryInventoryPackage entity)
        {
            return (entity.PackageId == this.PackageId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._packageId;
        }
    }
    
    /// <summary>
    /// The 'Person' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Person : Entity
    {
        
        private string _address;
        
        private string _contactNo;
        
        private DateTime _dateOfBirth;
        
        private DateTime _dateOfJoin;
        
        private string _emailAddress;
        
        private EntityCollection<Employee> _employees;
        
        private string _name;
        
        private long _personId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnContactNoChanging(string value);
        partial void OnContactNoChanged();
        partial void OnDateOfBirthChanging(DateTime value);
        partial void OnDateOfBirthChanged();
        partial void OnDateOfJoinChanging(DateTime value);
        partial void OnDateOfJoinChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPersonIdChanging(long value);
        partial void OnPersonIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Person"/> class.
        /// </summary>
        public Person()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactNo' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string ContactNo
        {
            get
            {
                return this._contactNo;
            }
            set
            {
                if ((this._contactNo != value))
                {
                    this.OnContactNoChanging(value);
                    this.RaiseDataMemberChanging("ContactNo");
                    this.ValidateProperty("ContactNo", value);
                    this._contactNo = value;
                    this.RaiseDataMemberChanged("ContactNo");
                    this.OnContactNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfBirth' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfBirth
        {
            get
            {
                return this._dateOfBirth;
            }
            set
            {
                if ((this._dateOfBirth != value))
                {
                    this.OnDateOfBirthChanging(value);
                    this.RaiseDataMemberChanging("DateOfBirth");
                    this.ValidateProperty("DateOfBirth", value);
                    this._dateOfBirth = value;
                    this.RaiseDataMemberChanged("DateOfBirth");
                    this.OnDateOfBirthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfJoin' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfJoin
        {
            get
            {
                return this._dateOfJoin;
            }
            set
            {
                if ((this._dateOfJoin != value))
                {
                    this.OnDateOfJoinChanging(value);
                    this.RaiseDataMemberChanging("DateOfJoin");
                    this.ValidateProperty("DateOfJoin", value);
                    this._dateOfJoin = value;
                    this.RaiseDataMemberChanged("DateOfJoin");
                    this.OnDateOfJoinChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailAddress' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string EmailAddress
        {
            get
            {
                return this._emailAddress;
            }
            set
            {
                if ((this._emailAddress != value))
                {
                    this.OnEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("EmailAddress");
                    this.ValidateProperty("EmailAddress", value);
                    this._emailAddress = value;
                    this.RaiseDataMemberChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entity instances.
        /// </summary>
        [Association("Person_Employee", "PersonId", "PersonId")]
        [XmlIgnore()]
        public EntityCollection<Employee> Employees
        {
            get
            {
                if ((this._employees == null))
                {
                    this._employees = new EntityCollection<Employee>(this, "Employees", this.FilterEmployees, this.AttachEmployees, this.DetachEmployees);
                }
                return this._employees;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaisePropertyChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        private void AttachEmployees(Employee entity)
        {
            entity.Person = this;
        }
        
        private void DetachEmployees(Employee entity)
        {
            entity.Person = null;
        }
        
        private bool FilterEmployees(Employee entity)
        {
            return (entity.PersonId == this.PersonId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._personId;
        }
    }
    
    /// <summary>
    /// The 'PLR' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class PLR : Entity
    {
        
        private DateTime _dateOfApproval;
        
        private DateTime _dateOfIssue;
        
        private EntityRef<Employee> _employee;
        
        private EntityRef<Employee> _employee1;
        
        private EntityRef<Inventory> _inventory;
        
        private long _inventoryId;
        
        private long _issuedById;
        
        private long _issuedToId;
        
        private string _plrCode;
        
        private long _plrId;
        
        private EntityCollection<PLRPackageInfo> _plrPackageInfoes;
        
        private EntityCollection<PLRProductInfo> _plrProductInfoes;
        
        private string _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateOfApprovalChanging(DateTime value);
        partial void OnDateOfApprovalChanged();
        partial void OnDateOfIssueChanging(DateTime value);
        partial void OnDateOfIssueChanged();
        partial void OnInventoryIdChanging(long value);
        partial void OnInventoryIdChanged();
        partial void OnIssuedByIdChanging(long value);
        partial void OnIssuedByIdChanged();
        partial void OnIssuedToIdChanging(long value);
        partial void OnIssuedToIdChanged();
        partial void OnPLRCodeChanging(string value);
        partial void OnPLRCodeChanged();
        partial void OnPLRIdChanging(long value);
        partial void OnPLRIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PLR"/> class.
        /// </summary>
        public PLR()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfApproval' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfApproval
        {
            get
            {
                return this._dateOfApproval;
            }
            set
            {
                if ((this._dateOfApproval != value))
                {
                    this.OnDateOfApprovalChanging(value);
                    this.RaiseDataMemberChanging("DateOfApproval");
                    this.ValidateProperty("DateOfApproval", value);
                    this._dateOfApproval = value;
                    this.RaiseDataMemberChanged("DateOfApproval");
                    this.OnDateOfApprovalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfIssue' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfIssue
        {
            get
            {
                return this._dateOfIssue;
            }
            set
            {
                if ((this._dateOfIssue != value))
                {
                    this.OnDateOfIssueChanging(value);
                    this.RaiseDataMemberChanging("DateOfIssue");
                    this.ValidateProperty("DateOfIssue", value);
                    this._dateOfIssue = value;
                    this.RaiseDataMemberChanged("DateOfIssue");
                    this.OnDateOfIssueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_PLR", "IssuedById", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.PLRs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssuedById = value.EmployeeId;
                    }
                    else
                    {
                        this.IssuedById = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.PLRs.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_PLR1", "IssuedToId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee1
        {
            get
            {
                if ((this._employee1 == null))
                {
                    this._employee1 = new EntityRef<Employee>(this, "Employee1", this.FilterEmployee1);
                }
                return this._employee1.Entity;
            }
            set
            {
                Employee previous = this.Employee1;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee1", value);
                    if ((previous != null))
                    {
                        this._employee1.Entity = null;
                        previous.PLRs1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssuedToId = value.EmployeeId;
                    }
                    else
                    {
                        this.IssuedToId = default(long);
                    }
                    this._employee1.Entity = value;
                    if ((value != null))
                    {
                        value.PLRs1.Add(this);
                    }
                    this.RaisePropertyChanged("Employee1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Inventory"/> entity.
        /// </summary>
        [Association("Inventory_PLR", "InventoryId", "InventoryId", IsForeignKey=true)]
        [XmlIgnore()]
        public Inventory Inventory
        {
            get
            {
                if ((this._inventory == null))
                {
                    this._inventory = new EntityRef<Inventory>(this, "Inventory", this.FilterInventory);
                }
                return this._inventory.Entity;
            }
            set
            {
                Inventory previous = this.Inventory;
                if ((previous != value))
                {
                    this.ValidateProperty("Inventory", value);
                    if ((previous != null))
                    {
                        this._inventory.Entity = null;
                        previous.PLRs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.InventoryId = value.InventoryId;
                    }
                    else
                    {
                        this.InventoryId = default(long);
                    }
                    this._inventory.Entity = value;
                    if ((value != null))
                    {
                        value.PLRs.Add(this);
                    }
                    this.RaisePropertyChanged("Inventory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long InventoryId
        {
            get
            {
                return this._inventoryId;
            }
            set
            {
                if ((this._inventoryId != value))
                {
                    this.OnInventoryIdChanging(value);
                    this.RaiseDataMemberChanging("InventoryId");
                    this.ValidateProperty("InventoryId", value);
                    this._inventoryId = value;
                    this.RaiseDataMemberChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssuedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long IssuedById
        {
            get
            {
                return this._issuedById;
            }
            set
            {
                if ((this._issuedById != value))
                {
                    this.OnIssuedByIdChanging(value);
                    this.RaiseDataMemberChanging("IssuedById");
                    this.ValidateProperty("IssuedById", value);
                    this._issuedById = value;
                    this.RaiseDataMemberChanged("IssuedById");
                    this.OnIssuedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssuedToId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long IssuedToId
        {
            get
            {
                return this._issuedToId;
            }
            set
            {
                if ((this._issuedToId != value))
                {
                    this.OnIssuedToIdChanging(value);
                    this.RaiseDataMemberChanging("IssuedToId");
                    this.ValidateProperty("IssuedToId", value);
                    this._issuedToId = value;
                    this.RaiseDataMemberChanged("IssuedToId");
                    this.OnIssuedToIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PLRCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string PLRCode
        {
            get
            {
                return this._plrCode;
            }
            set
            {
                if ((this._plrCode != value))
                {
                    this.OnPLRCodeChanging(value);
                    this.RaiseDataMemberChanging("PLRCode");
                    this.ValidateProperty("PLRCode", value);
                    this._plrCode = value;
                    this.RaiseDataMemberChanged("PLRCode");
                    this.OnPLRCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PLRId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long PLRId
        {
            get
            {
                return this._plrId;
            }
            set
            {
                if ((this._plrId != value))
                {
                    this.OnPLRIdChanging(value);
                    this.ValidateProperty("PLRId", value);
                    this._plrId = value;
                    this.RaisePropertyChanged("PLRId");
                    this.OnPLRIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PLRPackageInfo"/> entity instances.
        /// </summary>
        [Association("PLR_PLRPackageInfo", "PLRId", "PLRId")]
        [XmlIgnore()]
        public EntityCollection<PLRPackageInfo> PLRPackageInfoes
        {
            get
            {
                if ((this._plrPackageInfoes == null))
                {
                    this._plrPackageInfoes = new EntityCollection<PLRPackageInfo>(this, "PLRPackageInfoes", this.FilterPLRPackageInfoes, this.AttachPLRPackageInfoes, this.DetachPLRPackageInfoes);
                }
                return this._plrPackageInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PLRProductInfo"/> entity instances.
        /// </summary>
        [Association("PLR_PLRProductInfo", "PLRId", "PLRId")]
        [XmlIgnore()]
        public EntityCollection<PLRProductInfo> PLRProductInfoes
        {
            get
            {
                if ((this._plrProductInfoes == null))
                {
                    this._plrProductInfoes = new EntityCollection<PLRProductInfo>(this, "PLRProductInfoes", this.FilterPLRProductInfoes, this.AttachPLRProductInfoes, this.DetachPLRProductInfoes);
                }
                return this._plrProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.IssuedById);
        }
        
        private bool FilterEmployee1(Employee entity)
        {
            return (entity.EmployeeId == this.IssuedToId);
        }
        
        private bool FilterInventory(Inventory entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private void AttachPLRPackageInfoes(PLRPackageInfo entity)
        {
            entity.PLR = this;
        }
        
        private void DetachPLRPackageInfoes(PLRPackageInfo entity)
        {
            entity.PLR = null;
        }
        
        private bool FilterPLRPackageInfoes(PLRPackageInfo entity)
        {
            return (entity.PLRId == this.PLRId);
        }
        
        private void AttachPLRProductInfoes(PLRProductInfo entity)
        {
            entity.PLR = this;
        }
        
        private void DetachPLRProductInfoes(PLRProductInfo entity)
        {
            entity.PLR = null;
        }
        
        private bool FilterPLRProductInfoes(PLRProductInfo entity)
        {
            return (entity.PLRId == this.PLRId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._plrId;
        }
    }
    
    /// <summary>
    /// The 'PLRPackageInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class PLRPackageInfo : Entity
    {
        
        private Nullable<double> _lostAmount;
        
        private EntityRef<Package> _package;
        
        private long _packageId;
        
        private EntityRef<PLR> _plr;
        
        private long _plrId;
        
        private double _quantity;
        
        private string _remarks;
        
        private string _state;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLostAmountChanging(Nullable<double> value);
        partial void OnLostAmountChanged();
        partial void OnPackageIdChanging(long value);
        partial void OnPackageIdChanged();
        partial void OnPLRIdChanging(long value);
        partial void OnPLRIdChanged();
        partial void OnQuantityChanging(double value);
        partial void OnQuantityChanged();
        partial void OnRemarksChanging(string value);
        partial void OnRemarksChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PLRPackageInfo"/> class.
        /// </summary>
        public PLRPackageInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'LostAmount' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> LostAmount
        {
            get
            {
                return this._lostAmount;
            }
            set
            {
                if ((this._lostAmount != value))
                {
                    this.OnLostAmountChanging(value);
                    this.RaiseDataMemberChanging("LostAmount");
                    this.ValidateProperty("LostAmount", value);
                    this._lostAmount = value;
                    this.RaiseDataMemberChanged("LostAmount");
                    this.OnLostAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Package"/> entity.
        /// </summary>
        [Association("Package_PLRPackageInfo", "PackageId", "PackageId", IsForeignKey=true)]
        [XmlIgnore()]
        public Package Package
        {
            get
            {
                if ((this._package == null))
                {
                    this._package = new EntityRef<Package>(this, "Package", this.FilterPackage);
                }
                return this._package.Entity;
            }
            set
            {
                Package previous = this.Package;
                if ((previous != value))
                {
                    this.ValidateProperty("Package", value);
                    if ((previous != null))
                    {
                        this._package.Entity = null;
                        previous.PLRPackageInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PackageId = value.PackageId;
                    }
                    else
                    {
                        this.PackageId = default(long);
                    }
                    this._package.Entity = value;
                    if ((value != null))
                    {
                        value.PLRPackageInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Package");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long PackageId
        {
            get
            {
                return this._packageId;
            }
            set
            {
                if ((this._packageId != value))
                {
                    this.OnPackageIdChanging(value);
                    this.RaiseDataMemberChanging("PackageId");
                    this.ValidateProperty("PackageId", value);
                    this._packageId = value;
                    this.RaiseDataMemberChanged("PackageId");
                    this.OnPackageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PLR"/> entity.
        /// </summary>
        [Association("PLR_PLRPackageInfo", "PLRId", "PLRId", IsForeignKey=true)]
        [XmlIgnore()]
        public PLR PLR
        {
            get
            {
                if ((this._plr == null))
                {
                    this._plr = new EntityRef<PLR>(this, "PLR", this.FilterPLR);
                }
                return this._plr.Entity;
            }
            set
            {
                PLR previous = this.PLR;
                if ((previous != value))
                {
                    this.ValidateProperty("PLR", value);
                    if ((previous != null))
                    {
                        this._plr.Entity = null;
                        previous.PLRPackageInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PLRId = value.PLRId;
                    }
                    else
                    {
                        this.PLRId = default(long);
                    }
                    this._plr.Entity = value;
                    if ((value != null))
                    {
                        value.PLRPackageInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("PLR");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PLRId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long PLRId
        {
            get
            {
                return this._plrId;
            }
            set
            {
                if ((this._plrId != value))
                {
                    this.OnPLRIdChanging(value);
                    this.RaiseDataMemberChanging("PLRId");
                    this.ValidateProperty("PLRId", value);
                    this._plrId = value;
                    this.RaiseDataMemberChanged("PLRId");
                    this.OnPLRIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public double Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Remarks' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                if ((this._remarks != value))
                {
                    this.OnRemarksChanging(value);
                    this.RaiseDataMemberChanging("Remarks");
                    this.ValidateProperty("Remarks", value);
                    this._remarks = value;
                    this.RaiseDataMemberChanged("Remarks");
                    this.OnRemarksChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        private bool FilterPackage(Package entity)
        {
            return (entity.PackageId == this.PackageId);
        }
        
        private bool FilterPLR(PLR entity)
        {
            return (entity.PLRId == this.PLRId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._packageId, this._plrId);
        }
    }
    
    /// <summary>
    /// The 'PLRProductInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class PLRProductInfo : Entity
    {
        
        private Nullable<double> _lostAmount;
        
        private string _lotId;
        
        private EntityRef<PLR> _plr;
        
        private long _plrId;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private double _quantity;
        
        private string _remarks;
        
        private string _state;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLostAmountChanging(Nullable<double> value);
        partial void OnLostAmountChanged();
        partial void OnLotIdChanging(string value);
        partial void OnLotIdChanged();
        partial void OnPLRIdChanging(long value);
        partial void OnPLRIdChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnQuantityChanging(double value);
        partial void OnQuantityChanged();
        partial void OnRemarksChanging(string value);
        partial void OnRemarksChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PLRProductInfo"/> class.
        /// </summary>
        public PLRProductInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'LostAmount' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> LostAmount
        {
            get
            {
                return this._lostAmount;
            }
            set
            {
                if ((this._lostAmount != value))
                {
                    this.OnLostAmountChanging(value);
                    this.RaiseDataMemberChanging("LostAmount");
                    this.ValidateProperty("LostAmount", value);
                    this._lostAmount = value;
                    this.RaiseDataMemberChanged("LostAmount");
                    this.OnLostAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string LotId
        {
            get
            {
                return this._lotId;
            }
            set
            {
                if ((this._lotId != value))
                {
                    this.OnLotIdChanging(value);
                    this.RaiseDataMemberChanging("LotId");
                    this.ValidateProperty("LotId", value);
                    this._lotId = value;
                    this.RaiseDataMemberChanged("LotId");
                    this.OnLotIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PLR"/> entity.
        /// </summary>
        [Association("PLR_PLRProductInfo", "PLRId", "PLRId", IsForeignKey=true)]
        [XmlIgnore()]
        public PLR PLR
        {
            get
            {
                if ((this._plr == null))
                {
                    this._plr = new EntityRef<PLR>(this, "PLR", this.FilterPLR);
                }
                return this._plr.Entity;
            }
            set
            {
                PLR previous = this.PLR;
                if ((previous != value))
                {
                    this.ValidateProperty("PLR", value);
                    if ((previous != null))
                    {
                        this._plr.Entity = null;
                        previous.PLRProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PLRId = value.PLRId;
                    }
                    else
                    {
                        this.PLRId = default(long);
                    }
                    this._plr.Entity = value;
                    if ((value != null))
                    {
                        value.PLRProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("PLR");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PLRId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long PLRId
        {
            get
            {
                return this._plrId;
            }
            set
            {
                if ((this._plrId != value))
                {
                    this.OnPLRIdChanging(value);
                    this.RaiseDataMemberChanging("PLRId");
                    this.ValidateProperty("PLRId", value);
                    this._plrId = value;
                    this.RaiseDataMemberChanged("PLRId");
                    this.OnPLRIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_PLRProductInfo", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.PLRProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.PLRProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public double Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Remarks' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                if ((this._remarks != value))
                {
                    this.OnRemarksChanging(value);
                    this.RaiseDataMemberChanging("Remarks");
                    this.ValidateProperty("Remarks", value);
                    this._remarks = value;
                    this.RaiseDataMemberChanged("Remarks");
                    this.OnRemarksChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        private bool FilterPLR(PLR entity)
        {
            return (entity.PLRId == this.PLRId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._lotId == null))
            {
                return null;
            }
            return EntityKey.Create(this._lotId, this._plrId, this._productId);
        }
    }
    
    /// <summary>
    /// The 'Product' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Product : Entity
    {
        
        private EntityCollection<BillPaymentInfo> _billPaymentInfoes;
        
        private EntityCollection<BillProductInfo> _billProductInfoes;
        
        private string _brandName;
        
        private EntityCollection<Commission> _commissions;
        
        private EntityCollection<DueInfo> _dueInfoes;
        
        private EntityCollection<IndentProductInfo> _indentProductInfoes;
        
        private DateTime _introducedDate;
        
        private EntityCollection<InventoryLog> _inventoryLogs;
        
        private EntityCollection<InventoryProductInfo> _inventoryProductInfoes;
        
        private bool _isImported;
        
        private bool _isOpOrHibrid;
        
        private EntityCollection<Ledger> _ledgers;
        
        private EntityCollection<MRRProductInfo> _mrrProductInfoes;
        
        private EntityCollection<PLRProductInfo> _plrProductInfoes;
        
        private double _pricePerUnit;
        
        private string _productCode;
        
        private EntityCollection<ProductEdit> _productEdits;
        
        private long _productId;
        
        private string _productName;
        
        private string _productStatus;
        
        private string _productType;
        
        private string _productWing;
        
        private EntityCollection<Promotion> _promotions;
        
        private string _purchasePeriodEnd;
        
        private string _purchasePeriodStart;
        
        private EntityCollection<RegionTarget> _regionTargets;
        
        private EntityCollection<RequisitionProductInfo> _requisitionProductInfoes;
        
        private EntityCollection<SalesOfficerTarget> _salesOfficerTargets;
        
        private string _salesPeriodEnd;
        
        private string _salesPeriodStart;
        
        private EntityCollection<SalesReturnInfo> _salesReturnInfoes;
        
        private double _stockKeepingUnit;
        
        private EntityCollection<TransportationLoss> _transportationLosses;
        
        private EntityCollection<YearSummaryDealer> _yearSummaryDealers;
        
        private EntityCollection<YearSummaryInventoryProduct> _yearSummaryInventoryProducts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBrandNameChanging(string value);
        partial void OnBrandNameChanged();
        partial void OnIntroducedDateChanging(DateTime value);
        partial void OnIntroducedDateChanged();
        partial void OnIsImportedChanging(bool value);
        partial void OnIsImportedChanged();
        partial void OnIsOpOrHibridChanging(bool value);
        partial void OnIsOpOrHibridChanged();
        partial void OnPricePerUnitChanging(double value);
        partial void OnPricePerUnitChanged();
        partial void OnProductCodeChanging(string value);
        partial void OnProductCodeChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnProductStatusChanging(string value);
        partial void OnProductStatusChanged();
        partial void OnProductTypeChanging(string value);
        partial void OnProductTypeChanged();
        partial void OnProductWingChanging(string value);
        partial void OnProductWingChanged();
        partial void OnPurchasePeriodEndChanging(string value);
        partial void OnPurchasePeriodEndChanged();
        partial void OnPurchasePeriodStartChanging(string value);
        partial void OnPurchasePeriodStartChanged();
        partial void OnSalesPeriodEndChanging(string value);
        partial void OnSalesPeriodEndChanged();
        partial void OnSalesPeriodStartChanging(string value);
        partial void OnSalesPeriodStartChanged();
        partial void OnStockKeepingUnitChanging(double value);
        partial void OnStockKeepingUnitChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Product"/> class.
        /// </summary>
        public Product()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="BillPaymentInfo"/> entity instances.
        /// </summary>
        [Association("Product_BillPaymentInfo", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<BillPaymentInfo> BillPaymentInfoes
        {
            get
            {
                if ((this._billPaymentInfoes == null))
                {
                    this._billPaymentInfoes = new EntityCollection<BillPaymentInfo>(this, "BillPaymentInfoes", this.FilterBillPaymentInfoes, this.AttachBillPaymentInfoes, this.DetachBillPaymentInfoes);
                }
                return this._billPaymentInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="BillProductInfo"/> entity instances.
        /// </summary>
        [Association("Product_BillProductInfo", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<BillProductInfo> BillProductInfoes
        {
            get
            {
                if ((this._billProductInfoes == null))
                {
                    this._billProductInfoes = new EntityCollection<BillProductInfo>(this, "BillProductInfoes", this.FilterBillProductInfoes, this.AttachBillProductInfoes, this.DetachBillProductInfoes);
                }
                return this._billProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BrandName' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string BrandName
        {
            get
            {
                return this._brandName;
            }
            set
            {
                if ((this._brandName != value))
                {
                    this.OnBrandNameChanging(value);
                    this.RaiseDataMemberChanging("BrandName");
                    this.ValidateProperty("BrandName", value);
                    this._brandName = value;
                    this.RaiseDataMemberChanged("BrandName");
                    this.OnBrandNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Commission"/> entity instances.
        /// </summary>
        [Association("Product_Commission", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<Commission> Commissions
        {
            get
            {
                if ((this._commissions == null))
                {
                    this._commissions = new EntityCollection<Commission>(this, "Commissions", this.FilterCommissions, this.AttachCommissions, this.DetachCommissions);
                }
                return this._commissions;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DueInfo"/> entity instances.
        /// </summary>
        [Association("Product_DueInfo", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<DueInfo> DueInfoes
        {
            get
            {
                if ((this._dueInfoes == null))
                {
                    this._dueInfoes = new EntityCollection<DueInfo>(this, "DueInfoes", this.FilterDueInfoes, this.AttachDueInfoes, this.DetachDueInfoes);
                }
                return this._dueInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="IndentProductInfo"/> entity instances.
        /// </summary>
        [Association("Product_IndentProductInfo", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<IndentProductInfo> IndentProductInfoes
        {
            get
            {
                if ((this._indentProductInfoes == null))
                {
                    this._indentProductInfoes = new EntityCollection<IndentProductInfo>(this, "IndentProductInfoes", this.FilterIndentProductInfoes, this.AttachIndentProductInfoes, this.DetachIndentProductInfoes);
                }
                return this._indentProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IntroducedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime IntroducedDate
        {
            get
            {
                return this._introducedDate;
            }
            set
            {
                if ((this._introducedDate != value))
                {
                    this.OnIntroducedDateChanging(value);
                    this.RaiseDataMemberChanging("IntroducedDate");
                    this.ValidateProperty("IntroducedDate", value);
                    this._introducedDate = value;
                    this.RaiseDataMemberChanged("IntroducedDate");
                    this.OnIntroducedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="InventoryLog"/> entity instances.
        /// </summary>
        [Association("Product_InventoryLog", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<InventoryLog> InventoryLogs
        {
            get
            {
                if ((this._inventoryLogs == null))
                {
                    this._inventoryLogs = new EntityCollection<InventoryLog>(this, "InventoryLogs", this.FilterInventoryLogs, this.AttachInventoryLogs, this.DetachInventoryLogs);
                }
                return this._inventoryLogs;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="InventoryProductInfo"/> entity instances.
        /// </summary>
        [Association("Product_InventoryProductInfo", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<InventoryProductInfo> InventoryProductInfoes
        {
            get
            {
                if ((this._inventoryProductInfoes == null))
                {
                    this._inventoryProductInfoes = new EntityCollection<InventoryProductInfo>(this, "InventoryProductInfoes", this.FilterInventoryProductInfoes, this.AttachInventoryProductInfoes, this.DetachInventoryProductInfoes);
                }
                return this._inventoryProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsImported' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public bool IsImported
        {
            get
            {
                return this._isImported;
            }
            set
            {
                if ((this._isImported != value))
                {
                    this.OnIsImportedChanging(value);
                    this.RaiseDataMemberChanging("IsImported");
                    this.ValidateProperty("IsImported", value);
                    this._isImported = value;
                    this.RaiseDataMemberChanged("IsImported");
                    this.OnIsImportedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsOpOrHibrid' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public bool IsOpOrHibrid
        {
            get
            {
                return this._isOpOrHibrid;
            }
            set
            {
                if ((this._isOpOrHibrid != value))
                {
                    this.OnIsOpOrHibridChanging(value);
                    this.RaiseDataMemberChanging("IsOpOrHibrid");
                    this.ValidateProperty("IsOpOrHibrid", value);
                    this._isOpOrHibrid = value;
                    this.RaiseDataMemberChanged("IsOpOrHibrid");
                    this.OnIsOpOrHibridChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Ledger"/> entity instances.
        /// </summary>
        [Association("Product_Ledger", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<Ledger> Ledgers
        {
            get
            {
                if ((this._ledgers == null))
                {
                    this._ledgers = new EntityCollection<Ledger>(this, "Ledgers", this.FilterLedgers, this.AttachLedgers, this.DetachLedgers);
                }
                return this._ledgers;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MRRProductInfo"/> entity instances.
        /// </summary>
        [Association("Product_MRRProductInfo", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<MRRProductInfo> MRRProductInfoes
        {
            get
            {
                if ((this._mrrProductInfoes == null))
                {
                    this._mrrProductInfoes = new EntityCollection<MRRProductInfo>(this, "MRRProductInfoes", this.FilterMRRProductInfoes, this.AttachMRRProductInfoes, this.DetachMRRProductInfoes);
                }
                return this._mrrProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PLRProductInfo"/> entity instances.
        /// </summary>
        [Association("Product_PLRProductInfo", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<PLRProductInfo> PLRProductInfoes
        {
            get
            {
                if ((this._plrProductInfoes == null))
                {
                    this._plrProductInfoes = new EntityCollection<PLRProductInfo>(this, "PLRProductInfoes", this.FilterPLRProductInfoes, this.AttachPLRProductInfoes, this.DetachPLRProductInfoes);
                }
                return this._plrProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PricePerUnit' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public double PricePerUnit
        {
            get
            {
                return this._pricePerUnit;
            }
            set
            {
                if ((this._pricePerUnit != value))
                {
                    this.OnPricePerUnitChanging(value);
                    this.RaiseDataMemberChanging("PricePerUnit");
                    this.ValidateProperty("PricePerUnit", value);
                    this._pricePerUnit = value;
                    this.RaiseDataMemberChanged("PricePerUnit");
                    this.OnPricePerUnitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string ProductCode
        {
            get
            {
                return this._productCode;
            }
            set
            {
                if ((this._productCode != value))
                {
                    this.OnProductCodeChanging(value);
                    this.RaiseDataMemberChanging("ProductCode");
                    this.ValidateProperty("ProductCode", value);
                    this._productCode = value;
                    this.RaiseDataMemberChanged("ProductCode");
                    this.OnProductCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ProductEdit"/> entity instances.
        /// </summary>
        [Association("Product_ProductEdit", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<ProductEdit> ProductEdits
        {
            get
            {
                if ((this._productEdits == null))
                {
                    this._productEdits = new EntityCollection<ProductEdit>(this, "ProductEdits", this.FilterProductEdits, this.AttachProductEdits, this.DetachProductEdits);
                }
                return this._productEdits;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaisePropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string ProductStatus
        {
            get
            {
                return this._productStatus;
            }
            set
            {
                if ((this._productStatus != value))
                {
                    this.OnProductStatusChanging(value);
                    this.RaiseDataMemberChanging("ProductStatus");
                    this.ValidateProperty("ProductStatus", value);
                    this._productStatus = value;
                    this.RaiseDataMemberChanged("ProductStatus");
                    this.OnProductStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductType' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string ProductType
        {
            get
            {
                return this._productType;
            }
            set
            {
                if ((this._productType != value))
                {
                    this.OnProductTypeChanging(value);
                    this.RaiseDataMemberChanging("ProductType");
                    this.ValidateProperty("ProductType", value);
                    this._productType = value;
                    this.RaiseDataMemberChanged("ProductType");
                    this.OnProductTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductWing' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string ProductWing
        {
            get
            {
                return this._productWing;
            }
            set
            {
                if ((this._productWing != value))
                {
                    this.OnProductWingChanging(value);
                    this.RaiseDataMemberChanging("ProductWing");
                    this.ValidateProperty("ProductWing", value);
                    this._productWing = value;
                    this.RaiseDataMemberChanged("ProductWing");
                    this.OnProductWingChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Promotion"/> entity instances.
        /// </summary>
        [Association("Product_Promotion", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<Promotion> Promotions
        {
            get
            {
                if ((this._promotions == null))
                {
                    this._promotions = new EntityCollection<Promotion>(this, "Promotions", this.FilterPromotions, this.AttachPromotions, this.DetachPromotions);
                }
                return this._promotions;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchasePeriodEnd' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string PurchasePeriodEnd
        {
            get
            {
                return this._purchasePeriodEnd;
            }
            set
            {
                if ((this._purchasePeriodEnd != value))
                {
                    this.OnPurchasePeriodEndChanging(value);
                    this.RaiseDataMemberChanging("PurchasePeriodEnd");
                    this.ValidateProperty("PurchasePeriodEnd", value);
                    this._purchasePeriodEnd = value;
                    this.RaiseDataMemberChanged("PurchasePeriodEnd");
                    this.OnPurchasePeriodEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchasePeriodStart' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string PurchasePeriodStart
        {
            get
            {
                return this._purchasePeriodStart;
            }
            set
            {
                if ((this._purchasePeriodStart != value))
                {
                    this.OnPurchasePeriodStartChanging(value);
                    this.RaiseDataMemberChanging("PurchasePeriodStart");
                    this.ValidateProperty("PurchasePeriodStart", value);
                    this._purchasePeriodStart = value;
                    this.RaiseDataMemberChanged("PurchasePeriodStart");
                    this.OnPurchasePeriodStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RegionTarget"/> entity instances.
        /// </summary>
        [Association("Product_RegionTarget", "ProductId", "Product_ProductId")]
        [XmlIgnore()]
        public EntityCollection<RegionTarget> RegionTargets
        {
            get
            {
                if ((this._regionTargets == null))
                {
                    this._regionTargets = new EntityCollection<RegionTarget>(this, "RegionTargets", this.FilterRegionTargets, this.AttachRegionTargets, this.DetachRegionTargets);
                }
                return this._regionTargets;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RequisitionProductInfo"/> entity instances.
        /// </summary>
        [Association("Product_RequisitionProductInfo", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<RequisitionProductInfo> RequisitionProductInfoes
        {
            get
            {
                if ((this._requisitionProductInfoes == null))
                {
                    this._requisitionProductInfoes = new EntityCollection<RequisitionProductInfo>(this, "RequisitionProductInfoes", this.FilterRequisitionProductInfoes, this.AttachRequisitionProductInfoes, this.DetachRequisitionProductInfoes);
                }
                return this._requisitionProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SalesOfficerTarget"/> entity instances.
        /// </summary>
        [Association("Product_SalesOfficerTarget", "ProductId", "Product_ProductId")]
        [XmlIgnore()]
        public EntityCollection<SalesOfficerTarget> SalesOfficerTargets
        {
            get
            {
                if ((this._salesOfficerTargets == null))
                {
                    this._salesOfficerTargets = new EntityCollection<SalesOfficerTarget>(this, "SalesOfficerTargets", this.FilterSalesOfficerTargets, this.AttachSalesOfficerTargets, this.DetachSalesOfficerTargets);
                }
                return this._salesOfficerTargets;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesPeriodEnd' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string SalesPeriodEnd
        {
            get
            {
                return this._salesPeriodEnd;
            }
            set
            {
                if ((this._salesPeriodEnd != value))
                {
                    this.OnSalesPeriodEndChanging(value);
                    this.RaiseDataMemberChanging("SalesPeriodEnd");
                    this.ValidateProperty("SalesPeriodEnd", value);
                    this._salesPeriodEnd = value;
                    this.RaiseDataMemberChanged("SalesPeriodEnd");
                    this.OnSalesPeriodEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesPeriodStart' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string SalesPeriodStart
        {
            get
            {
                return this._salesPeriodStart;
            }
            set
            {
                if ((this._salesPeriodStart != value))
                {
                    this.OnSalesPeriodStartChanging(value);
                    this.RaiseDataMemberChanging("SalesPeriodStart");
                    this.ValidateProperty("SalesPeriodStart", value);
                    this._salesPeriodStart = value;
                    this.RaiseDataMemberChanged("SalesPeriodStart");
                    this.OnSalesPeriodStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SalesReturnInfo"/> entity instances.
        /// </summary>
        [Association("Product_SalesReturnInfo", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<SalesReturnInfo> SalesReturnInfoes
        {
            get
            {
                if ((this._salesReturnInfoes == null))
                {
                    this._salesReturnInfoes = new EntityCollection<SalesReturnInfo>(this, "SalesReturnInfoes", this.FilterSalesReturnInfoes, this.AttachSalesReturnInfoes, this.DetachSalesReturnInfoes);
                }
                return this._salesReturnInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StockKeepingUnit' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public double StockKeepingUnit
        {
            get
            {
                return this._stockKeepingUnit;
            }
            set
            {
                if ((this._stockKeepingUnit != value))
                {
                    this.OnStockKeepingUnitChanging(value);
                    this.RaiseDataMemberChanging("StockKeepingUnit");
                    this.ValidateProperty("StockKeepingUnit", value);
                    this._stockKeepingUnit = value;
                    this.RaiseDataMemberChanged("StockKeepingUnit");
                    this.OnStockKeepingUnitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="TransportationLoss"/> entity instances.
        /// </summary>
        [Association("Product_TransportationLoss", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<TransportationLoss> TransportationLosses
        {
            get
            {
                if ((this._transportationLosses == null))
                {
                    this._transportationLosses = new EntityCollection<TransportationLoss>(this, "TransportationLosses", this.FilterTransportationLosses, this.AttachTransportationLosses, this.DetachTransportationLosses);
                }
                return this._transportationLosses;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="YearSummaryDealer"/> entity instances.
        /// </summary>
        [Association("Product_YearSummaryDealer", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<YearSummaryDealer> YearSummaryDealers
        {
            get
            {
                if ((this._yearSummaryDealers == null))
                {
                    this._yearSummaryDealers = new EntityCollection<YearSummaryDealer>(this, "YearSummaryDealers", this.FilterYearSummaryDealers, this.AttachYearSummaryDealers, this.DetachYearSummaryDealers);
                }
                return this._yearSummaryDealers;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="YearSummaryInventoryProduct"/> entity instances.
        /// </summary>
        [Association("Product_YearSummaryInventoryProduct", "ProductId", "ProductId")]
        [XmlIgnore()]
        public EntityCollection<YearSummaryInventoryProduct> YearSummaryInventoryProducts
        {
            get
            {
                if ((this._yearSummaryInventoryProducts == null))
                {
                    this._yearSummaryInventoryProducts = new EntityCollection<YearSummaryInventoryProduct>(this, "YearSummaryInventoryProducts", this.FilterYearSummaryInventoryProducts, this.AttachYearSummaryInventoryProducts, this.DetachYearSummaryInventoryProducts);
                }
                return this._yearSummaryInventoryProducts;
            }
        }
        
        private void AttachBillPaymentInfoes(BillPaymentInfo entity)
        {
            entity.Product = this;
        }
        
        private void DetachBillPaymentInfoes(BillPaymentInfo entity)
        {
            entity.Product = null;
        }
        
        private bool FilterBillPaymentInfoes(BillPaymentInfo entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachBillProductInfoes(BillProductInfo entity)
        {
            entity.Product = this;
        }
        
        private void DetachBillProductInfoes(BillProductInfo entity)
        {
            entity.Product = null;
        }
        
        private bool FilterBillProductInfoes(BillProductInfo entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachCommissions(Commission entity)
        {
            entity.Product = this;
        }
        
        private void DetachCommissions(Commission entity)
        {
            entity.Product = null;
        }
        
        private bool FilterCommissions(Commission entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachDueInfoes(DueInfo entity)
        {
            entity.Product = this;
        }
        
        private void DetachDueInfoes(DueInfo entity)
        {
            entity.Product = null;
        }
        
        private bool FilterDueInfoes(DueInfo entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachIndentProductInfoes(IndentProductInfo entity)
        {
            entity.Product = this;
        }
        
        private void DetachIndentProductInfoes(IndentProductInfo entity)
        {
            entity.Product = null;
        }
        
        private bool FilterIndentProductInfoes(IndentProductInfo entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachInventoryLogs(InventoryLog entity)
        {
            entity.Product = this;
        }
        
        private void DetachInventoryLogs(InventoryLog entity)
        {
            entity.Product = null;
        }
        
        private bool FilterInventoryLogs(InventoryLog entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachInventoryProductInfoes(InventoryProductInfo entity)
        {
            entity.Product = this;
        }
        
        private void DetachInventoryProductInfoes(InventoryProductInfo entity)
        {
            entity.Product = null;
        }
        
        private bool FilterInventoryProductInfoes(InventoryProductInfo entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachLedgers(Ledger entity)
        {
            entity.Product = this;
        }
        
        private void DetachLedgers(Ledger entity)
        {
            entity.Product = null;
        }
        
        private bool FilterLedgers(Ledger entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachMRRProductInfoes(MRRProductInfo entity)
        {
            entity.Product = this;
        }
        
        private void DetachMRRProductInfoes(MRRProductInfo entity)
        {
            entity.Product = null;
        }
        
        private bool FilterMRRProductInfoes(MRRProductInfo entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachPLRProductInfoes(PLRProductInfo entity)
        {
            entity.Product = this;
        }
        
        private void DetachPLRProductInfoes(PLRProductInfo entity)
        {
            entity.Product = null;
        }
        
        private bool FilterPLRProductInfoes(PLRProductInfo entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachProductEdits(ProductEdit entity)
        {
            entity.Product = this;
        }
        
        private void DetachProductEdits(ProductEdit entity)
        {
            entity.Product = null;
        }
        
        private bool FilterProductEdits(ProductEdit entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachPromotions(Promotion entity)
        {
            entity.Product = this;
        }
        
        private void DetachPromotions(Promotion entity)
        {
            entity.Product = null;
        }
        
        private bool FilterPromotions(Promotion entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachRegionTargets(RegionTarget entity)
        {
            entity.Product = this;
        }
        
        private void DetachRegionTargets(RegionTarget entity)
        {
            entity.Product = null;
        }
        
        private bool FilterRegionTargets(RegionTarget entity)
        {
            return (entity.Product_ProductId == this.ProductId);
        }
        
        private void AttachRequisitionProductInfoes(RequisitionProductInfo entity)
        {
            entity.Product = this;
        }
        
        private void DetachRequisitionProductInfoes(RequisitionProductInfo entity)
        {
            entity.Product = null;
        }
        
        private bool FilterRequisitionProductInfoes(RequisitionProductInfo entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachSalesOfficerTargets(SalesOfficerTarget entity)
        {
            entity.Product = this;
        }
        
        private void DetachSalesOfficerTargets(SalesOfficerTarget entity)
        {
            entity.Product = null;
        }
        
        private bool FilterSalesOfficerTargets(SalesOfficerTarget entity)
        {
            return (entity.Product_ProductId == this.ProductId);
        }
        
        private void AttachSalesReturnInfoes(SalesReturnInfo entity)
        {
            entity.Product = this;
        }
        
        private void DetachSalesReturnInfoes(SalesReturnInfo entity)
        {
            entity.Product = null;
        }
        
        private bool FilterSalesReturnInfoes(SalesReturnInfo entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachTransportationLosses(TransportationLoss entity)
        {
            entity.Product = this;
        }
        
        private void DetachTransportationLosses(TransportationLoss entity)
        {
            entity.Product = null;
        }
        
        private bool FilterTransportationLosses(TransportationLoss entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachYearSummaryDealers(YearSummaryDealer entity)
        {
            entity.Product = this;
        }
        
        private void DetachYearSummaryDealers(YearSummaryDealer entity)
        {
            entity.Product = null;
        }
        
        private bool FilterYearSummaryDealers(YearSummaryDealer entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private void AttachYearSummaryInventoryProducts(YearSummaryInventoryProduct entity)
        {
            entity.Product = this;
        }
        
        private void DetachYearSummaryInventoryProducts(YearSummaryInventoryProduct entity)
        {
            entity.Product = null;
        }
        
        private bool FilterYearSummaryInventoryProducts(YearSummaryInventoryProduct entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productId;
        }
    }
    
    /// <summary>
    /// The 'ProductEdit' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class ProductEdit : Entity
    {
        
        private long _adminId;
        
        private DateTime _changeApplicableFrom;
        
        private string _editedValue;
        
        private string _editStatus;
        
        private string _editType;
        
        private EntityRef<Employee> _employee;
        
        private long _nsmId;
        
        private string _previousValue;
        
        private EntityRef<Product> _product;
        
        private long _productEditId;
        
        private long _productId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAdminIdChanging(long value);
        partial void OnAdminIdChanged();
        partial void OnChangeApplicableFromChanging(DateTime value);
        partial void OnChangeApplicableFromChanged();
        partial void OnEditedValueChanging(string value);
        partial void OnEditedValueChanged();
        partial void OnEditStatusChanging(string value);
        partial void OnEditStatusChanged();
        partial void OnEditTypeChanging(string value);
        partial void OnEditTypeChanged();
        partial void OnNSMIdChanging(long value);
        partial void OnNSMIdChanged();
        partial void OnPreviousValueChanging(string value);
        partial void OnPreviousValueChanged();
        partial void OnProductEditIdChanging(long value);
        partial void OnProductEditIdChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductEdit"/> class.
        /// </summary>
        public ProductEdit()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AdminId' value.
        /// </summary>
        [DataMember()]
        public long AdminId
        {
            get
            {
                return this._adminId;
            }
            set
            {
                if ((this._adminId != value))
                {
                    this.OnAdminIdChanging(value);
                    this.RaiseDataMemberChanging("AdminId");
                    this.ValidateProperty("AdminId", value);
                    this._adminId = value;
                    this.RaiseDataMemberChanged("AdminId");
                    this.OnAdminIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChangeApplicableFrom' value.
        /// </summary>
        [DataMember()]
        public DateTime ChangeApplicableFrom
        {
            get
            {
                return this._changeApplicableFrom;
            }
            set
            {
                if ((this._changeApplicableFrom != value))
                {
                    this.OnChangeApplicableFromChanging(value);
                    this.RaiseDataMemberChanging("ChangeApplicableFrom");
                    this.ValidateProperty("ChangeApplicableFrom", value);
                    this._changeApplicableFrom = value;
                    this.RaiseDataMemberChanged("ChangeApplicableFrom");
                    this.OnChangeApplicableFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EditedValue' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string EditedValue
        {
            get
            {
                return this._editedValue;
            }
            set
            {
                if ((this._editedValue != value))
                {
                    this.OnEditedValueChanging(value);
                    this.RaiseDataMemberChanging("EditedValue");
                    this.ValidateProperty("EditedValue", value);
                    this._editedValue = value;
                    this.RaiseDataMemberChanged("EditedValue");
                    this.OnEditedValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EditStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string EditStatus
        {
            get
            {
                return this._editStatus;
            }
            set
            {
                if ((this._editStatus != value))
                {
                    this.OnEditStatusChanging(value);
                    this.RaiseDataMemberChanging("EditStatus");
                    this.ValidateProperty("EditStatus", value);
                    this._editStatus = value;
                    this.RaiseDataMemberChanged("EditStatus");
                    this.OnEditStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EditType' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string EditType
        {
            get
            {
                return this._editType;
            }
            set
            {
                if ((this._editType != value))
                {
                    this.OnEditTypeChanging(value);
                    this.RaiseDataMemberChanging("EditType");
                    this.ValidateProperty("EditType", value);
                    this._editType = value;
                    this.RaiseDataMemberChanged("EditType");
                    this.OnEditTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_ProductEdit", "NSMId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.ProductEdits.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.NSMId = value.EmployeeId;
                    }
                    else
                    {
                        this.NSMId = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.ProductEdits.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NSMId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long NSMId
        {
            get
            {
                return this._nsmId;
            }
            set
            {
                if ((this._nsmId != value))
                {
                    this.OnNSMIdChanging(value);
                    this.RaiseDataMemberChanging("NSMId");
                    this.ValidateProperty("NSMId", value);
                    this._nsmId = value;
                    this.RaiseDataMemberChanged("NSMId");
                    this.OnNSMIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreviousValue' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string PreviousValue
        {
            get
            {
                return this._previousValue;
            }
            set
            {
                if ((this._previousValue != value))
                {
                    this.OnPreviousValueChanging(value);
                    this.RaiseDataMemberChanging("PreviousValue");
                    this.ValidateProperty("PreviousValue", value);
                    this._previousValue = value;
                    this.RaiseDataMemberChanged("PreviousValue");
                    this.OnPreviousValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_ProductEdit", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.ProductEdits.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.ProductEdits.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductEditId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long ProductEditId
        {
            get
            {
                return this._productEditId;
            }
            set
            {
                if ((this._productEditId != value))
                {
                    this.OnProductEditIdChanging(value);
                    this.ValidateProperty("ProductEditId", value);
                    this._productEditId = value;
                    this.RaisePropertyChanged("ProductEditId");
                    this.OnProductEditIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.NSMId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productEditId;
        }
    }
    
    /// <summary>
    /// The 'Promotion' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Promotion : Entity
    {
        
        private DateTime _endAt;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private double _productPrice;
        
        private double _productQuantity;
        
        private long _promotionId;
        
        private string _promotionProductName;
        
        private double _promotionProductQuantity;
        
        private string _promotionTitle;
        
        private DateTime _startAt;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEndAtChanging(DateTime value);
        partial void OnEndAtChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnProductPriceChanging(double value);
        partial void OnProductPriceChanged();
        partial void OnProductQuantityChanging(double value);
        partial void OnProductQuantityChanged();
        partial void OnPromotionIdChanging(long value);
        partial void OnPromotionIdChanged();
        partial void OnPromotionProductNameChanging(string value);
        partial void OnPromotionProductNameChanged();
        partial void OnPromotionProductQuantityChanging(double value);
        partial void OnPromotionProductQuantityChanged();
        partial void OnPromotionTitleChanging(string value);
        partial void OnPromotionTitleChanged();
        partial void OnStartAtChanging(DateTime value);
        partial void OnStartAtChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Promotion"/> class.
        /// </summary>
        public Promotion()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EndAt' value.
        /// </summary>
        [DataMember()]
        public DateTime EndAt
        {
            get
            {
                return this._endAt;
            }
            set
            {
                if ((this._endAt != value))
                {
                    this.OnEndAtChanging(value);
                    this.RaiseDataMemberChanging("EndAt");
                    this.ValidateProperty("EndAt", value);
                    this._endAt = value;
                    this.RaiseDataMemberChanged("EndAt");
                    this.OnEndAtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_Promotion", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.Promotions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.Promotions.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductPrice' value.
        /// </summary>
        [DataMember()]
        public double ProductPrice
        {
            get
            {
                return this._productPrice;
            }
            set
            {
                if ((this._productPrice != value))
                {
                    this.OnProductPriceChanging(value);
                    this.RaiseDataMemberChanging("ProductPrice");
                    this.ValidateProperty("ProductPrice", value);
                    this._productPrice = value;
                    this.RaiseDataMemberChanged("ProductPrice");
                    this.OnProductPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductQuantity' value.
        /// </summary>
        [DataMember()]
        public double ProductQuantity
        {
            get
            {
                return this._productQuantity;
            }
            set
            {
                if ((this._productQuantity != value))
                {
                    this.OnProductQuantityChanging(value);
                    this.RaiseDataMemberChanging("ProductQuantity");
                    this.ValidateProperty("ProductQuantity", value);
                    this._productQuantity = value;
                    this.RaiseDataMemberChanged("ProductQuantity");
                    this.OnProductQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PromotionId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long PromotionId
        {
            get
            {
                return this._promotionId;
            }
            set
            {
                if ((this._promotionId != value))
                {
                    this.OnPromotionIdChanging(value);
                    this.ValidateProperty("PromotionId", value);
                    this._promotionId = value;
                    this.RaisePropertyChanged("PromotionId");
                    this.OnPromotionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PromotionProductName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string PromotionProductName
        {
            get
            {
                return this._promotionProductName;
            }
            set
            {
                if ((this._promotionProductName != value))
                {
                    this.OnPromotionProductNameChanging(value);
                    this.RaiseDataMemberChanging("PromotionProductName");
                    this.ValidateProperty("PromotionProductName", value);
                    this._promotionProductName = value;
                    this.RaiseDataMemberChanged("PromotionProductName");
                    this.OnPromotionProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PromotionProductQuantity' value.
        /// </summary>
        [DataMember()]
        public double PromotionProductQuantity
        {
            get
            {
                return this._promotionProductQuantity;
            }
            set
            {
                if ((this._promotionProductQuantity != value))
                {
                    this.OnPromotionProductQuantityChanging(value);
                    this.RaiseDataMemberChanging("PromotionProductQuantity");
                    this.ValidateProperty("PromotionProductQuantity", value);
                    this._promotionProductQuantity = value;
                    this.RaiseDataMemberChanged("PromotionProductQuantity");
                    this.OnPromotionProductQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PromotionTitle' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string PromotionTitle
        {
            get
            {
                return this._promotionTitle;
            }
            set
            {
                if ((this._promotionTitle != value))
                {
                    this.OnPromotionTitleChanging(value);
                    this.RaiseDataMemberChanging("PromotionTitle");
                    this.ValidateProperty("PromotionTitle", value);
                    this._promotionTitle = value;
                    this.RaiseDataMemberChanged("PromotionTitle");
                    this.OnPromotionTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartAt' value.
        /// </summary>
        [DataMember()]
        public DateTime StartAt
        {
            get
            {
                return this._startAt;
            }
            set
            {
                if ((this._startAt != value))
                {
                    this.OnStartAtChanging(value);
                    this.RaiseDataMemberChanging("StartAt");
                    this.ValidateProperty("StartAt", value);
                    this._startAt = value;
                    this.RaiseDataMemberChanged("StartAt");
                    this.OnStartAtChanged();
                }
            }
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._promotionId;
        }
    }
    
    /// <summary>
    /// The 'Region' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Region : Entity
    {
        
        private EntityCollection<Dealer> _dealers;
        
        private string _districtName;
        
        private EntityCollection<Employee> _employees;
        
        private EntityCollection<Expenditure> _expenditures;
        
        private EntityCollection<Inventory> _inventories;
        
        private long _regionId;
        
        private string _regionName;
        
        private EntityCollection<RegionTarget> _regionTargets;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDistrictNameChanging(string value);
        partial void OnDistrictNameChanged();
        partial void OnRegionIdChanging(long value);
        partial void OnRegionIdChanged();
        partial void OnRegionNameChanging(string value);
        partial void OnRegionNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Region"/> class.
        /// </summary>
        public Region()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Dealer"/> entity instances.
        /// </summary>
        [Association("Region_Dealer", "RegionId", "RegionId")]
        [XmlIgnore()]
        public EntityCollection<Dealer> Dealers
        {
            get
            {
                if ((this._dealers == null))
                {
                    this._dealers = new EntityCollection<Dealer>(this, "Dealers", this.FilterDealers, this.AttachDealers, this.DetachDealers);
                }
                return this._dealers;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DistrictName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string DistrictName
        {
            get
            {
                return this._districtName;
            }
            set
            {
                if ((this._districtName != value))
                {
                    this.OnDistrictNameChanging(value);
                    this.RaiseDataMemberChanging("DistrictName");
                    this.ValidateProperty("DistrictName", value);
                    this._districtName = value;
                    this.RaiseDataMemberChanged("DistrictName");
                    this.OnDistrictNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entity instances.
        /// </summary>
        [Association("Region_Employee", "RegionId", "RegionId")]
        [XmlIgnore()]
        public EntityCollection<Employee> Employees
        {
            get
            {
                if ((this._employees == null))
                {
                    this._employees = new EntityCollection<Employee>(this, "Employees", this.FilterEmployees, this.AttachEmployees, this.DetachEmployees);
                }
                return this._employees;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Expenditure"/> entity instances.
        /// </summary>
        [Association("Region_Expenditure", "RegionId", "RegionId")]
        [XmlIgnore()]
        public EntityCollection<Expenditure> Expenditures
        {
            get
            {
                if ((this._expenditures == null))
                {
                    this._expenditures = new EntityCollection<Expenditure>(this, "Expenditures", this.FilterExpenditures, this.AttachExpenditures, this.DetachExpenditures);
                }
                return this._expenditures;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Inventory"/> entity instances.
        /// </summary>
        [Association("Region_Inventory", "RegionId", "RegionId")]
        [XmlIgnore()]
        public EntityCollection<Inventory> Inventories
        {
            get
            {
                if ((this._inventories == null))
                {
                    this._inventories = new EntityCollection<Inventory>(this, "Inventories", this.FilterInventories, this.AttachInventories, this.DetachInventories);
                }
                return this._inventories;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long RegionId
        {
            get
            {
                return this._regionId;
            }
            set
            {
                if ((this._regionId != value))
                {
                    this.OnRegionIdChanging(value);
                    this.ValidateProperty("RegionId", value);
                    this._regionId = value;
                    this.RaisePropertyChanged("RegionId");
                    this.OnRegionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string RegionName
        {
            get
            {
                return this._regionName;
            }
            set
            {
                if ((this._regionName != value))
                {
                    this.OnRegionNameChanging(value);
                    this.RaiseDataMemberChanging("RegionName");
                    this.ValidateProperty("RegionName", value);
                    this._regionName = value;
                    this.RaiseDataMemberChanged("RegionName");
                    this.OnRegionNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RegionTarget"/> entity instances.
        /// </summary>
        [Association("Region_RegionTarget", "RegionId", "RegionId")]
        [XmlIgnore()]
        public EntityCollection<RegionTarget> RegionTargets
        {
            get
            {
                if ((this._regionTargets == null))
                {
                    this._regionTargets = new EntityCollection<RegionTarget>(this, "RegionTargets", this.FilterRegionTargets, this.AttachRegionTargets, this.DetachRegionTargets);
                }
                return this._regionTargets;
            }
        }
        
        private void AttachDealers(Dealer entity)
        {
            entity.Region = this;
        }
        
        private void DetachDealers(Dealer entity)
        {
            entity.Region = null;
        }
        
        private bool FilterDealers(Dealer entity)
        {
            return (entity.RegionId == this.RegionId);
        }
        
        private void AttachEmployees(Employee entity)
        {
            entity.Region = this;
        }
        
        private void DetachEmployees(Employee entity)
        {
            entity.Region = null;
        }
        
        private bool FilterEmployees(Employee entity)
        {
            return (entity.RegionId == this.RegionId);
        }
        
        private void AttachExpenditures(Expenditure entity)
        {
            entity.Region = this;
        }
        
        private void DetachExpenditures(Expenditure entity)
        {
            entity.Region = null;
        }
        
        private bool FilterExpenditures(Expenditure entity)
        {
            return (entity.RegionId == this.RegionId);
        }
        
        private void AttachInventories(Inventory entity)
        {
            entity.Region = this;
        }
        
        private void DetachInventories(Inventory entity)
        {
            entity.Region = null;
        }
        
        private bool FilterInventories(Inventory entity)
        {
            return (entity.RegionId == this.RegionId);
        }
        
        private void AttachRegionTargets(RegionTarget entity)
        {
            entity.Region = this;
        }
        
        private void DetachRegionTargets(RegionTarget entity)
        {
            entity.Region = null;
        }
        
        private bool FilterRegionTargets(RegionTarget entity)
        {
            return (entity.RegionId == this.RegionId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._regionId;
        }
    }
    
    /// <summary>
    /// The 'RegionTarget' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class RegionTarget : Entity
    {
        
        private double _achievedAmount;
        
        private double _achievedQuantity;
        
        private DateTime _endDate;
        
        private EntityRef<Product> _product;
        
        private long _product_ProductId;
        
        private string _productName;
        
        private EntityRef<Region> _region;
        
        private long _regionId;
        
        private DateTime _startDate;
        
        private double _targetQuantity;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAchievedAmountChanging(double value);
        partial void OnAchievedAmountChanged();
        partial void OnAchievedQuantityChanging(double value);
        partial void OnAchievedQuantityChanged();
        partial void OnEndDateChanging(DateTime value);
        partial void OnEndDateChanged();
        partial void OnProduct_ProductIdChanging(long value);
        partial void OnProduct_ProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnRegionIdChanging(long value);
        partial void OnRegionIdChanged();
        partial void OnStartDateChanging(DateTime value);
        partial void OnStartDateChanged();
        partial void OnTargetQuantityChanging(double value);
        partial void OnTargetQuantityChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegionTarget"/> class.
        /// </summary>
        public RegionTarget()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AchievedAmount' value.
        /// </summary>
        [DataMember()]
        public double AchievedAmount
        {
            get
            {
                return this._achievedAmount;
            }
            set
            {
                if ((this._achievedAmount != value))
                {
                    this.OnAchievedAmountChanging(value);
                    this.RaiseDataMemberChanging("AchievedAmount");
                    this.ValidateProperty("AchievedAmount", value);
                    this._achievedAmount = value;
                    this.RaiseDataMemberChanged("AchievedAmount");
                    this.OnAchievedAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AchievedQuantity' value.
        /// </summary>
        [DataMember()]
        public double AchievedQuantity
        {
            get
            {
                return this._achievedQuantity;
            }
            set
            {
                if ((this._achievedQuantity != value))
                {
                    this.OnAchievedQuantityChanging(value);
                    this.RaiseDataMemberChanging("AchievedQuantity");
                    this.ValidateProperty("AchievedQuantity", value);
                    this._achievedQuantity = value;
                    this.RaiseDataMemberChanged("AchievedQuantity");
                    this.OnAchievedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndDate' value.
        /// </summary>
        [DataMember()]
        public DateTime EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.RaiseDataMemberChanging("EndDate");
                    this.ValidateProperty("EndDate", value);
                    this._endDate = value;
                    this.RaiseDataMemberChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_RegionTarget", "Product_ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.RegionTargets.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.Product_ProductId = value.ProductId;
                    }
                    else
                    {
                        this.Product_ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.RegionTargets.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Product_ProductId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long Product_ProductId
        {
            get
            {
                return this._product_ProductId;
            }
            set
            {
                if ((this._product_ProductId != value))
                {
                    this.OnProduct_ProductIdChanging(value);
                    this.RaiseDataMemberChanging("Product_ProductId");
                    this.ValidateProperty("Product_ProductId", value);
                    this._product_ProductId = value;
                    this.RaiseDataMemberChanged("Product_ProductId");
                    this.OnProduct_ProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Region"/> entity.
        /// </summary>
        [Association("Region_RegionTarget", "RegionId", "RegionId", IsForeignKey=true)]
        [XmlIgnore()]
        public Region Region
        {
            get
            {
                if ((this._region == null))
                {
                    this._region = new EntityRef<Region>(this, "Region", this.FilterRegion);
                }
                return this._region.Entity;
            }
            set
            {
                Region previous = this.Region;
                if ((previous != value))
                {
                    this.ValidateProperty("Region", value);
                    if ((previous != null))
                    {
                        this._region.Entity = null;
                        previous.RegionTargets.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RegionId = value.RegionId;
                    }
                    else
                    {
                        this.RegionId = default(long);
                    }
                    this._region.Entity = value;
                    if ((value != null))
                    {
                        value.RegionTargets.Add(this);
                    }
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long RegionId
        {
            get
            {
                return this._regionId;
            }
            set
            {
                if ((this._regionId != value))
                {
                    this.OnRegionIdChanging(value);
                    this.RaiseDataMemberChanging("RegionId");
                    this.ValidateProperty("RegionId", value);
                    this._regionId = value;
                    this.RaiseDataMemberChanged("RegionId");
                    this.OnRegionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartDate' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.RaiseDataMemberChanging("StartDate");
                    this.ValidateProperty("StartDate", value);
                    this._startDate = value;
                    this.RaiseDataMemberChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TargetQuantity' value.
        /// </summary>
        [DataMember()]
        public double TargetQuantity
        {
            get
            {
                return this._targetQuantity;
            }
            set
            {
                if ((this._targetQuantity != value))
                {
                    this.OnTargetQuantityChanging(value);
                    this.RaiseDataMemberChanging("TargetQuantity");
                    this.ValidateProperty("TargetQuantity", value);
                    this._targetQuantity = value;
                    this.RaiseDataMemberChanged("TargetQuantity");
                    this.OnTargetQuantityChanged();
                }
            }
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.Product_ProductId);
        }
        
        private bool FilterRegion(Region entity)
        {
            return (entity.RegionId == this.RegionId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._productName == null))
            {
                return null;
            }
            return EntityKey.Create(this._productName, this._regionId, this._startDate);
        }
    }
    
    /// <summary>
    /// The 'Requisition' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class Requisition : Entity
    {
        
        private DateTime _dateOfApproval;
        
        private DateTime _dateOfIssue;
        
        private EntityRef<Employee> _employee;
        
        private EntityRef<Inventory> _inventory;
        
        private long _inventoryId;
        
        private long _issuedById;
        
        private long _issuedToId;
        
        private string _requisitionCode;
        
        private long _requisitionId;
        
        private EntityCollection<RequisitionPackageInfo> _requisitionPackageInfoes;
        
        private EntityCollection<RequisitionProductInfo> _requisitionProductInfoes;
        
        private string _requisitionType;
        
        private string _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateOfApprovalChanging(DateTime value);
        partial void OnDateOfApprovalChanged();
        partial void OnDateOfIssueChanging(DateTime value);
        partial void OnDateOfIssueChanged();
        partial void OnInventoryIdChanging(long value);
        partial void OnInventoryIdChanged();
        partial void OnIssuedByIdChanging(long value);
        partial void OnIssuedByIdChanged();
        partial void OnIssuedToIdChanging(long value);
        partial void OnIssuedToIdChanged();
        partial void OnRequisitionCodeChanging(string value);
        partial void OnRequisitionCodeChanged();
        partial void OnRequisitionIdChanging(long value);
        partial void OnRequisitionIdChanged();
        partial void OnRequisitionTypeChanging(string value);
        partial void OnRequisitionTypeChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Requisition"/> class.
        /// </summary>
        public Requisition()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfApproval' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfApproval
        {
            get
            {
                return this._dateOfApproval;
            }
            set
            {
                if ((this._dateOfApproval != value))
                {
                    this.OnDateOfApprovalChanging(value);
                    this.RaiseDataMemberChanging("DateOfApproval");
                    this.ValidateProperty("DateOfApproval", value);
                    this._dateOfApproval = value;
                    this.RaiseDataMemberChanged("DateOfApproval");
                    this.OnDateOfApprovalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfIssue' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfIssue
        {
            get
            {
                return this._dateOfIssue;
            }
            set
            {
                if ((this._dateOfIssue != value))
                {
                    this.OnDateOfIssueChanging(value);
                    this.RaiseDataMemberChanging("DateOfIssue");
                    this.ValidateProperty("DateOfIssue", value);
                    this._dateOfIssue = value;
                    this.RaiseDataMemberChanged("DateOfIssue");
                    this.OnDateOfIssueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Requisition", "IssuedById", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.Requisitions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssuedById = value.EmployeeId;
                    }
                    else
                    {
                        this.IssuedById = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.Requisitions.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Inventory"/> entity.
        /// </summary>
        [Association("Inventory_Requisition", "InventoryId", "InventoryId", IsForeignKey=true)]
        [XmlIgnore()]
        public Inventory Inventory
        {
            get
            {
                if ((this._inventory == null))
                {
                    this._inventory = new EntityRef<Inventory>(this, "Inventory", this.FilterInventory);
                }
                return this._inventory.Entity;
            }
            set
            {
                Inventory previous = this.Inventory;
                if ((previous != value))
                {
                    this.ValidateProperty("Inventory", value);
                    if ((previous != null))
                    {
                        this._inventory.Entity = null;
                        previous.Requisitions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.InventoryId = value.InventoryId;
                    }
                    else
                    {
                        this.InventoryId = default(long);
                    }
                    this._inventory.Entity = value;
                    if ((value != null))
                    {
                        value.Requisitions.Add(this);
                    }
                    this.RaisePropertyChanged("Inventory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long InventoryId
        {
            get
            {
                return this._inventoryId;
            }
            set
            {
                if ((this._inventoryId != value))
                {
                    this.OnInventoryIdChanging(value);
                    this.RaiseDataMemberChanging("InventoryId");
                    this.ValidateProperty("InventoryId", value);
                    this._inventoryId = value;
                    this.RaiseDataMemberChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssuedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long IssuedById
        {
            get
            {
                return this._issuedById;
            }
            set
            {
                if ((this._issuedById != value))
                {
                    this.OnIssuedByIdChanging(value);
                    this.RaiseDataMemberChanging("IssuedById");
                    this.ValidateProperty("IssuedById", value);
                    this._issuedById = value;
                    this.RaiseDataMemberChanged("IssuedById");
                    this.OnIssuedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssuedToId' value.
        /// </summary>
        [DataMember()]
        public long IssuedToId
        {
            get
            {
                return this._issuedToId;
            }
            set
            {
                if ((this._issuedToId != value))
                {
                    this.OnIssuedToIdChanging(value);
                    this.RaiseDataMemberChanging("IssuedToId");
                    this.ValidateProperty("IssuedToId", value);
                    this._issuedToId = value;
                    this.RaiseDataMemberChanged("IssuedToId");
                    this.OnIssuedToIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequisitionCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string RequisitionCode
        {
            get
            {
                return this._requisitionCode;
            }
            set
            {
                if ((this._requisitionCode != value))
                {
                    this.OnRequisitionCodeChanging(value);
                    this.RaiseDataMemberChanging("RequisitionCode");
                    this.ValidateProperty("RequisitionCode", value);
                    this._requisitionCode = value;
                    this.RaiseDataMemberChanged("RequisitionCode");
                    this.OnRequisitionCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequisitionId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long RequisitionId
        {
            get
            {
                return this._requisitionId;
            }
            set
            {
                if ((this._requisitionId != value))
                {
                    this.OnRequisitionIdChanging(value);
                    this.ValidateProperty("RequisitionId", value);
                    this._requisitionId = value;
                    this.RaisePropertyChanged("RequisitionId");
                    this.OnRequisitionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RequisitionPackageInfo"/> entity instances.
        /// </summary>
        [Association("Requisition_RequisitionPackageInfo", "RequisitionId", "RequisitionId")]
        [XmlIgnore()]
        public EntityCollection<RequisitionPackageInfo> RequisitionPackageInfoes
        {
            get
            {
                if ((this._requisitionPackageInfoes == null))
                {
                    this._requisitionPackageInfoes = new EntityCollection<RequisitionPackageInfo>(this, "RequisitionPackageInfoes", this.FilterRequisitionPackageInfoes, this.AttachRequisitionPackageInfoes, this.DetachRequisitionPackageInfoes);
                }
                return this._requisitionPackageInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RequisitionProductInfo"/> entity instances.
        /// </summary>
        [Association("Requisition_RequisitionProductInfo", "RequisitionId", "RequisitionId")]
        [XmlIgnore()]
        public EntityCollection<RequisitionProductInfo> RequisitionProductInfoes
        {
            get
            {
                if ((this._requisitionProductInfoes == null))
                {
                    this._requisitionProductInfoes = new EntityCollection<RequisitionProductInfo>(this, "RequisitionProductInfoes", this.FilterRequisitionProductInfoes, this.AttachRequisitionProductInfoes, this.DetachRequisitionProductInfoes);
                }
                return this._requisitionProductInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequisitionType' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string RequisitionType
        {
            get
            {
                return this._requisitionType;
            }
            set
            {
                if ((this._requisitionType != value))
                {
                    this.OnRequisitionTypeChanging(value);
                    this.RaiseDataMemberChanging("RequisitionType");
                    this.ValidateProperty("RequisitionType", value);
                    this._requisitionType = value;
                    this.RaiseDataMemberChanged("RequisitionType");
                    this.OnRequisitionTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.IssuedById);
        }
        
        private bool FilterInventory(Inventory entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private void AttachRequisitionPackageInfoes(RequisitionPackageInfo entity)
        {
            entity.Requisition = this;
        }
        
        private void DetachRequisitionPackageInfoes(RequisitionPackageInfo entity)
        {
            entity.Requisition = null;
        }
        
        private bool FilterRequisitionPackageInfoes(RequisitionPackageInfo entity)
        {
            return (entity.RequisitionId == this.RequisitionId);
        }
        
        private void AttachRequisitionProductInfoes(RequisitionProductInfo entity)
        {
            entity.Requisition = this;
        }
        
        private void DetachRequisitionProductInfoes(RequisitionProductInfo entity)
        {
            entity.Requisition = null;
        }
        
        private bool FilterRequisitionProductInfoes(RequisitionProductInfo entity)
        {
            return (entity.RequisitionId == this.RequisitionId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._requisitionId;
        }
    }
    
    /// <summary>
    /// The 'RequisitionPackageInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class RequisitionPackageInfo : Entity
    {
        
        private double _acceptedQuantity;
        
        private EntityRef<Package> _package;
        
        private long _packageId;
        
        private double _placedQuantity;
        
        private EntityRef<Requisition> _requisition;
        
        private long _requisitionId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAcceptedQuantityChanging(double value);
        partial void OnAcceptedQuantityChanged();
        partial void OnPackageIdChanging(long value);
        partial void OnPackageIdChanged();
        partial void OnPlacedQuantityChanging(double value);
        partial void OnPlacedQuantityChanged();
        partial void OnRequisitionIdChanging(long value);
        partial void OnRequisitionIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RequisitionPackageInfo"/> class.
        /// </summary>
        public RequisitionPackageInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AcceptedQuantity' value.
        /// </summary>
        [DataMember()]
        public double AcceptedQuantity
        {
            get
            {
                return this._acceptedQuantity;
            }
            set
            {
                if ((this._acceptedQuantity != value))
                {
                    this.OnAcceptedQuantityChanging(value);
                    this.RaiseDataMemberChanging("AcceptedQuantity");
                    this.ValidateProperty("AcceptedQuantity", value);
                    this._acceptedQuantity = value;
                    this.RaiseDataMemberChanged("AcceptedQuantity");
                    this.OnAcceptedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Package"/> entity.
        /// </summary>
        [Association("Package_RequisitionPackageInfo", "PackageId", "PackageId", IsForeignKey=true)]
        [XmlIgnore()]
        public Package Package
        {
            get
            {
                if ((this._package == null))
                {
                    this._package = new EntityRef<Package>(this, "Package", this.FilterPackage);
                }
                return this._package.Entity;
            }
            set
            {
                Package previous = this.Package;
                if ((previous != value))
                {
                    this.ValidateProperty("Package", value);
                    if ((previous != null))
                    {
                        this._package.Entity = null;
                        previous.RequisitionPackageInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PackageId = value.PackageId;
                    }
                    else
                    {
                        this.PackageId = default(long);
                    }
                    this._package.Entity = value;
                    if ((value != null))
                    {
                        value.RequisitionPackageInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Package");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long PackageId
        {
            get
            {
                return this._packageId;
            }
            set
            {
                if ((this._packageId != value))
                {
                    this.OnPackageIdChanging(value);
                    this.RaiseDataMemberChanging("PackageId");
                    this.ValidateProperty("PackageId", value);
                    this._packageId = value;
                    this.RaiseDataMemberChanged("PackageId");
                    this.OnPackageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlacedQuantity' value.
        /// </summary>
        [DataMember()]
        public double PlacedQuantity
        {
            get
            {
                return this._placedQuantity;
            }
            set
            {
                if ((this._placedQuantity != value))
                {
                    this.OnPlacedQuantityChanging(value);
                    this.RaiseDataMemberChanging("PlacedQuantity");
                    this.ValidateProperty("PlacedQuantity", value);
                    this._placedQuantity = value;
                    this.RaiseDataMemberChanged("PlacedQuantity");
                    this.OnPlacedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Requisition"/> entity.
        /// </summary>
        [Association("Requisition_RequisitionPackageInfo", "RequisitionId", "RequisitionId", IsForeignKey=true)]
        [XmlIgnore()]
        public Requisition Requisition
        {
            get
            {
                if ((this._requisition == null))
                {
                    this._requisition = new EntityRef<Requisition>(this, "Requisition", this.FilterRequisition);
                }
                return this._requisition.Entity;
            }
            set
            {
                Requisition previous = this.Requisition;
                if ((previous != value))
                {
                    this.ValidateProperty("Requisition", value);
                    if ((previous != null))
                    {
                        this._requisition.Entity = null;
                        previous.RequisitionPackageInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RequisitionId = value.RequisitionId;
                    }
                    else
                    {
                        this.RequisitionId = default(long);
                    }
                    this._requisition.Entity = value;
                    if ((value != null))
                    {
                        value.RequisitionPackageInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Requisition");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequisitionId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long RequisitionId
        {
            get
            {
                return this._requisitionId;
            }
            set
            {
                if ((this._requisitionId != value))
                {
                    this.OnRequisitionIdChanging(value);
                    this.RaiseDataMemberChanging("RequisitionId");
                    this.ValidateProperty("RequisitionId", value);
                    this._requisitionId = value;
                    this.RaiseDataMemberChanged("RequisitionId");
                    this.OnRequisitionIdChanged();
                }
            }
        }
        
        private bool FilterPackage(Package entity)
        {
            return (entity.PackageId == this.PackageId);
        }
        
        private bool FilterRequisition(Requisition entity)
        {
            return (entity.RequisitionId == this.RequisitionId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._packageId, this._requisitionId);
        }
    }
    
    /// <summary>
    /// The 'RequisitionProductInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class RequisitionProductInfo : Entity
    {
        
        private string _lotId;
        
        private double _lotQuantity;
        
        private double _placedQuantity;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private EntityRef<Requisition> _requisition;
        
        private long _requisitionId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLotIdChanging(string value);
        partial void OnLotIdChanged();
        partial void OnLotQuantityChanging(double value);
        partial void OnLotQuantityChanged();
        partial void OnPlacedQuantityChanging(double value);
        partial void OnPlacedQuantityChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnRequisitionIdChanging(long value);
        partial void OnRequisitionIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RequisitionProductInfo"/> class.
        /// </summary>
        public RequisitionProductInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'LotId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string LotId
        {
            get
            {
                return this._lotId;
            }
            set
            {
                if ((this._lotId != value))
                {
                    this.OnLotIdChanging(value);
                    this.RaiseDataMemberChanging("LotId");
                    this.ValidateProperty("LotId", value);
                    this._lotId = value;
                    this.RaiseDataMemberChanged("LotId");
                    this.OnLotIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotQuantity' value.
        /// </summary>
        [DataMember()]
        public double LotQuantity
        {
            get
            {
                return this._lotQuantity;
            }
            set
            {
                if ((this._lotQuantity != value))
                {
                    this.OnLotQuantityChanging(value);
                    this.RaiseDataMemberChanging("LotQuantity");
                    this.ValidateProperty("LotQuantity", value);
                    this._lotQuantity = value;
                    this.RaiseDataMemberChanged("LotQuantity");
                    this.OnLotQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlacedQuantity' value.
        /// </summary>
        [DataMember()]
        public double PlacedQuantity
        {
            get
            {
                return this._placedQuantity;
            }
            set
            {
                if ((this._placedQuantity != value))
                {
                    this.OnPlacedQuantityChanging(value);
                    this.RaiseDataMemberChanging("PlacedQuantity");
                    this.ValidateProperty("PlacedQuantity", value);
                    this._placedQuantity = value;
                    this.RaiseDataMemberChanged("PlacedQuantity");
                    this.OnPlacedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_RequisitionProductInfo", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.RequisitionProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.RequisitionProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Requisition"/> entity.
        /// </summary>
        [Association("Requisition_RequisitionProductInfo", "RequisitionId", "RequisitionId", IsForeignKey=true)]
        [XmlIgnore()]
        public Requisition Requisition
        {
            get
            {
                if ((this._requisition == null))
                {
                    this._requisition = new EntityRef<Requisition>(this, "Requisition", this.FilterRequisition);
                }
                return this._requisition.Entity;
            }
            set
            {
                Requisition previous = this.Requisition;
                if ((previous != value))
                {
                    this.ValidateProperty("Requisition", value);
                    if ((previous != null))
                    {
                        this._requisition.Entity = null;
                        previous.RequisitionProductInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RequisitionId = value.RequisitionId;
                    }
                    else
                    {
                        this.RequisitionId = default(long);
                    }
                    this._requisition.Entity = value;
                    if ((value != null))
                    {
                        value.RequisitionProductInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Requisition");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequisitionId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long RequisitionId
        {
            get
            {
                return this._requisitionId;
            }
            set
            {
                if ((this._requisitionId != value))
                {
                    this.OnRequisitionIdChanging(value);
                    this.RaiseDataMemberChanging("RequisitionId");
                    this.ValidateProperty("RequisitionId", value);
                    this._requisitionId = value;
                    this.RaiseDataMemberChanged("RequisitionId");
                    this.OnRequisitionIdChanged();
                }
            }
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private bool FilterRequisition(Requisition entity)
        {
            return (entity.RequisitionId == this.RequisitionId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._lotId == null))
            {
                return null;
            }
            return EntityKey.Create(this._lotId, this._productId, this._requisitionId);
        }
    }
    
    /// <summary>
    /// The 'SalesOfficerTarget' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class SalesOfficerTarget : Entity
    {
        
        private double _achievedAmount;
        
        private double _achievedQuantity;
        
        private EntityRef<Employee> _employee;
        
        private DateTime _endDate;
        
        private EntityRef<Product> _product;
        
        private long _product_ProductId;
        
        private string _productName;
        
        private long _salesOfficerId;
        
        private DateTime _startDate;
        
        private double _targetQuantity;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAchievedAmountChanging(double value);
        partial void OnAchievedAmountChanged();
        partial void OnAchievedQuantityChanging(double value);
        partial void OnAchievedQuantityChanged();
        partial void OnEndDateChanging(DateTime value);
        partial void OnEndDateChanged();
        partial void OnProduct_ProductIdChanging(long value);
        partial void OnProduct_ProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnSalesOfficerIdChanging(long value);
        partial void OnSalesOfficerIdChanged();
        partial void OnStartDateChanging(DateTime value);
        partial void OnStartDateChanged();
        partial void OnTargetQuantityChanging(double value);
        partial void OnTargetQuantityChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOfficerTarget"/> class.
        /// </summary>
        public SalesOfficerTarget()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AchievedAmount' value.
        /// </summary>
        [DataMember()]
        public double AchievedAmount
        {
            get
            {
                return this._achievedAmount;
            }
            set
            {
                if ((this._achievedAmount != value))
                {
                    this.OnAchievedAmountChanging(value);
                    this.RaiseDataMemberChanging("AchievedAmount");
                    this.ValidateProperty("AchievedAmount", value);
                    this._achievedAmount = value;
                    this.RaiseDataMemberChanged("AchievedAmount");
                    this.OnAchievedAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AchievedQuantity' value.
        /// </summary>
        [DataMember()]
        public double AchievedQuantity
        {
            get
            {
                return this._achievedQuantity;
            }
            set
            {
                if ((this._achievedQuantity != value))
                {
                    this.OnAchievedQuantityChanging(value);
                    this.RaiseDataMemberChanging("AchievedQuantity");
                    this.ValidateProperty("AchievedQuantity", value);
                    this._achievedQuantity = value;
                    this.RaiseDataMemberChanged("AchievedQuantity");
                    this.OnAchievedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_SalesOfficerTarget", "SalesOfficerId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.SalesOfficerTargets.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SalesOfficerId = value.EmployeeId;
                    }
                    else
                    {
                        this.SalesOfficerId = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.SalesOfficerTargets.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndDate' value.
        /// </summary>
        [DataMember()]
        public DateTime EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.RaiseDataMemberChanging("EndDate");
                    this.ValidateProperty("EndDate", value);
                    this._endDate = value;
                    this.RaiseDataMemberChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_SalesOfficerTarget", "Product_ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.SalesOfficerTargets.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.Product_ProductId = value.ProductId;
                    }
                    else
                    {
                        this.Product_ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.SalesOfficerTargets.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Product_ProductId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long Product_ProductId
        {
            get
            {
                return this._product_ProductId;
            }
            set
            {
                if ((this._product_ProductId != value))
                {
                    this.OnProduct_ProductIdChanging(value);
                    this.RaiseDataMemberChanging("Product_ProductId");
                    this.ValidateProperty("Product_ProductId", value);
                    this._product_ProductId = value;
                    this.RaiseDataMemberChanged("Product_ProductId");
                    this.OnProduct_ProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesOfficerId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long SalesOfficerId
        {
            get
            {
                return this._salesOfficerId;
            }
            set
            {
                if ((this._salesOfficerId != value))
                {
                    this.OnSalesOfficerIdChanging(value);
                    this.RaiseDataMemberChanging("SalesOfficerId");
                    this.ValidateProperty("SalesOfficerId", value);
                    this._salesOfficerId = value;
                    this.RaiseDataMemberChanged("SalesOfficerId");
                    this.OnSalesOfficerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartDate' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.RaiseDataMemberChanging("StartDate");
                    this.ValidateProperty("StartDate", value);
                    this._startDate = value;
                    this.RaiseDataMemberChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TargetQuantity' value.
        /// </summary>
        [DataMember()]
        public double TargetQuantity
        {
            get
            {
                return this._targetQuantity;
            }
            set
            {
                if ((this._targetQuantity != value))
                {
                    this.OnTargetQuantityChanging(value);
                    this.RaiseDataMemberChanging("TargetQuantity");
                    this.ValidateProperty("TargetQuantity", value);
                    this._targetQuantity = value;
                    this.RaiseDataMemberChanged("TargetQuantity");
                    this.OnTargetQuantityChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.SalesOfficerId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.Product_ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._productName == null))
            {
                return null;
            }
            return EntityKey.Create(this._productName, this._salesOfficerId, this._startDate);
        }
    }
    
    /// <summary>
    /// The 'SalesReturn' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class SalesReturn : Entity
    {
        
        private DateTime _dateOfIssue;
        
        private EntityRef<Dealer> _dealer;
        
        private long _dealerId;
        
        private EntityRef<Employee> _employee;
        
        private long _rmId;
        
        private string _salesReturnCode;
        
        private long _salesReturnId;
        
        private EntityCollection<SalesReturnInfo> _salesReturnInfoes;
        
        private string _status;
        
        private double _totalAcceptedAmount;
        
        private double _totalPlacedAmount;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateOfIssueChanging(DateTime value);
        partial void OnDateOfIssueChanged();
        partial void OnDealerIdChanging(long value);
        partial void OnDealerIdChanged();
        partial void OnRMIdChanging(long value);
        partial void OnRMIdChanged();
        partial void OnSalesReturnCodeChanging(string value);
        partial void OnSalesReturnCodeChanged();
        partial void OnSalesReturnIdChanging(long value);
        partial void OnSalesReturnIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTotalAcceptedAmountChanging(double value);
        partial void OnTotalAcceptedAmountChanged();
        partial void OnTotalPlacedAmountChanging(double value);
        partial void OnTotalPlacedAmountChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesReturn"/> class.
        /// </summary>
        public SalesReturn()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfIssue' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfIssue
        {
            get
            {
                return this._dateOfIssue;
            }
            set
            {
                if ((this._dateOfIssue != value))
                {
                    this.OnDateOfIssueChanging(value);
                    this.RaiseDataMemberChanging("DateOfIssue");
                    this.ValidateProperty("DateOfIssue", value);
                    this._dateOfIssue = value;
                    this.RaiseDataMemberChanged("DateOfIssue");
                    this.OnDateOfIssueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Dealer"/> entity.
        /// </summary>
        [Association("Dealer_SalesReturn", "DealerId", "DealerId", IsForeignKey=true)]
        [XmlIgnore()]
        public Dealer Dealer
        {
            get
            {
                if ((this._dealer == null))
                {
                    this._dealer = new EntityRef<Dealer>(this, "Dealer", this.FilterDealer);
                }
                return this._dealer.Entity;
            }
            set
            {
                Dealer previous = this.Dealer;
                if ((previous != value))
                {
                    this.ValidateProperty("Dealer", value);
                    if ((previous != null))
                    {
                        this._dealer.Entity = null;
                        previous.SalesReturns.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DealerId = value.DealerId;
                    }
                    else
                    {
                        this.DealerId = default(long);
                    }
                    this._dealer.Entity = value;
                    if ((value != null))
                    {
                        value.SalesReturns.Add(this);
                    }
                    this.RaisePropertyChanged("Dealer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DealerId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long DealerId
        {
            get
            {
                return this._dealerId;
            }
            set
            {
                if ((this._dealerId != value))
                {
                    this.OnDealerIdChanging(value);
                    this.RaiseDataMemberChanging("DealerId");
                    this.ValidateProperty("DealerId", value);
                    this._dealerId = value;
                    this.RaiseDataMemberChanged("DealerId");
                    this.OnDealerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_SalesReturn", "RMId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.SalesReturns.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RMId = value.EmployeeId;
                    }
                    else
                    {
                        this.RMId = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.SalesReturns.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RMId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long RMId
        {
            get
            {
                return this._rmId;
            }
            set
            {
                if ((this._rmId != value))
                {
                    this.OnRMIdChanging(value);
                    this.RaiseDataMemberChanging("RMId");
                    this.ValidateProperty("RMId", value);
                    this._rmId = value;
                    this.RaiseDataMemberChanged("RMId");
                    this.OnRMIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesReturnCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string SalesReturnCode
        {
            get
            {
                return this._salesReturnCode;
            }
            set
            {
                if ((this._salesReturnCode != value))
                {
                    this.OnSalesReturnCodeChanging(value);
                    this.RaiseDataMemberChanging("SalesReturnCode");
                    this.ValidateProperty("SalesReturnCode", value);
                    this._salesReturnCode = value;
                    this.RaiseDataMemberChanged("SalesReturnCode");
                    this.OnSalesReturnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesReturnId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long SalesReturnId
        {
            get
            {
                return this._salesReturnId;
            }
            set
            {
                if ((this._salesReturnId != value))
                {
                    this.OnSalesReturnIdChanging(value);
                    this.ValidateProperty("SalesReturnId", value);
                    this._salesReturnId = value;
                    this.RaisePropertyChanged("SalesReturnId");
                    this.OnSalesReturnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SalesReturnInfo"/> entity instances.
        /// </summary>
        [Association("SalesReturn_SalesReturnInfo", "SalesReturnId", "SalesReturnId")]
        [XmlIgnore()]
        public EntityCollection<SalesReturnInfo> SalesReturnInfoes
        {
            get
            {
                if ((this._salesReturnInfoes == null))
                {
                    this._salesReturnInfoes = new EntityCollection<SalesReturnInfo>(this, "SalesReturnInfoes", this.FilterSalesReturnInfoes, this.AttachSalesReturnInfoes, this.DetachSalesReturnInfoes);
                }
                return this._salesReturnInfoes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalAcceptedAmount' value.
        /// </summary>
        [DataMember()]
        public double TotalAcceptedAmount
        {
            get
            {
                return this._totalAcceptedAmount;
            }
            set
            {
                if ((this._totalAcceptedAmount != value))
                {
                    this.OnTotalAcceptedAmountChanging(value);
                    this.RaiseDataMemberChanging("TotalAcceptedAmount");
                    this.ValidateProperty("TotalAcceptedAmount", value);
                    this._totalAcceptedAmount = value;
                    this.RaiseDataMemberChanged("TotalAcceptedAmount");
                    this.OnTotalAcceptedAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalPlacedAmount' value.
        /// </summary>
        [DataMember()]
        public double TotalPlacedAmount
        {
            get
            {
                return this._totalPlacedAmount;
            }
            set
            {
                if ((this._totalPlacedAmount != value))
                {
                    this.OnTotalPlacedAmountChanging(value);
                    this.RaiseDataMemberChanging("TotalPlacedAmount");
                    this.ValidateProperty("TotalPlacedAmount", value);
                    this._totalPlacedAmount = value;
                    this.RaiseDataMemberChanged("TotalPlacedAmount");
                    this.OnTotalPlacedAmountChanged();
                }
            }
        }
        
        private bool FilterDealer(Dealer entity)
        {
            return (entity.DealerId == this.DealerId);
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.RMId);
        }
        
        private void AttachSalesReturnInfoes(SalesReturnInfo entity)
        {
            entity.SalesReturn = this;
        }
        
        private void DetachSalesReturnInfoes(SalesReturnInfo entity)
        {
            entity.SalesReturn = null;
        }
        
        private bool FilterSalesReturnInfoes(SalesReturnInfo entity)
        {
            return (entity.SalesReturnId == this.SalesReturnId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._salesReturnId;
        }
    }
    
    /// <summary>
    /// The 'SalesReturnInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class SalesReturnInfo : Entity
    {
        
        private long _acceptedQuantity;
        
        private EntityRef<Bill> _bill;
        
        private long _billId;
        
        private string _lotId;
        
        private long _placedQuantity;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private double _productPrice;
        
        private EntityRef<SalesReturn> _salesReturn;
        
        private long _salesReturnId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAcceptedQuantityChanging(long value);
        partial void OnAcceptedQuantityChanged();
        partial void OnBillIdChanging(long value);
        partial void OnBillIdChanged();
        partial void OnLotIdChanging(string value);
        partial void OnLotIdChanged();
        partial void OnPlacedQuantityChanging(long value);
        partial void OnPlacedQuantityChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnProductPriceChanging(double value);
        partial void OnProductPriceChanged();
        partial void OnSalesReturnIdChanging(long value);
        partial void OnSalesReturnIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesReturnInfo"/> class.
        /// </summary>
        public SalesReturnInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AcceptedQuantity' value.
        /// </summary>
        [DataMember()]
        public long AcceptedQuantity
        {
            get
            {
                return this._acceptedQuantity;
            }
            set
            {
                if ((this._acceptedQuantity != value))
                {
                    this.OnAcceptedQuantityChanging(value);
                    this.RaiseDataMemberChanging("AcceptedQuantity");
                    this.ValidateProperty("AcceptedQuantity", value);
                    this._acceptedQuantity = value;
                    this.RaiseDataMemberChanged("AcceptedQuantity");
                    this.OnAcceptedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Bill"/> entity.
        /// </summary>
        [Association("Bill_SalesReturnInfo", "BillId", "BillId", IsForeignKey=true)]
        [XmlIgnore()]
        public Bill Bill
        {
            get
            {
                if ((this._bill == null))
                {
                    this._bill = new EntityRef<Bill>(this, "Bill", this.FilterBill);
                }
                return this._bill.Entity;
            }
            set
            {
                Bill previous = this.Bill;
                if ((previous != value))
                {
                    this.ValidateProperty("Bill", value);
                    if ((previous != null))
                    {
                        this._bill.Entity = null;
                        previous.SalesReturnInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BillId = value.BillId;
                    }
                    else
                    {
                        this.BillId = default(long);
                    }
                    this._bill.Entity = value;
                    if ((value != null))
                    {
                        value.SalesReturnInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Bill");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long BillId
        {
            get
            {
                return this._billId;
            }
            set
            {
                if ((this._billId != value))
                {
                    this.OnBillIdChanging(value);
                    this.RaiseDataMemberChanging("BillId");
                    this.ValidateProperty("BillId", value);
                    this._billId = value;
                    this.RaiseDataMemberChanged("BillId");
                    this.OnBillIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string LotId
        {
            get
            {
                return this._lotId;
            }
            set
            {
                if ((this._lotId != value))
                {
                    this.OnLotIdChanging(value);
                    this.RaiseDataMemberChanging("LotId");
                    this.ValidateProperty("LotId", value);
                    this._lotId = value;
                    this.RaiseDataMemberChanged("LotId");
                    this.OnLotIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlacedQuantity' value.
        /// </summary>
        [DataMember()]
        public long PlacedQuantity
        {
            get
            {
                return this._placedQuantity;
            }
            set
            {
                if ((this._placedQuantity != value))
                {
                    this.OnPlacedQuantityChanging(value);
                    this.RaiseDataMemberChanging("PlacedQuantity");
                    this.ValidateProperty("PlacedQuantity", value);
                    this._placedQuantity = value;
                    this.RaiseDataMemberChanged("PlacedQuantity");
                    this.OnPlacedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_SalesReturnInfo", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.SalesReturnInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.SalesReturnInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductPrice' value.
        /// </summary>
        [DataMember()]
        public double ProductPrice
        {
            get
            {
                return this._productPrice;
            }
            set
            {
                if ((this._productPrice != value))
                {
                    this.OnProductPriceChanging(value);
                    this.RaiseDataMemberChanging("ProductPrice");
                    this.ValidateProperty("ProductPrice", value);
                    this._productPrice = value;
                    this.RaiseDataMemberChanged("ProductPrice");
                    this.OnProductPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SalesReturn"/> entity.
        /// </summary>
        [Association("SalesReturn_SalesReturnInfo", "SalesReturnId", "SalesReturnId", IsForeignKey=true)]
        [XmlIgnore()]
        public SalesReturn SalesReturn
        {
            get
            {
                if ((this._salesReturn == null))
                {
                    this._salesReturn = new EntityRef<SalesReturn>(this, "SalesReturn", this.FilterSalesReturn);
                }
                return this._salesReturn.Entity;
            }
            set
            {
                SalesReturn previous = this.SalesReturn;
                if ((previous != value))
                {
                    this.ValidateProperty("SalesReturn", value);
                    if ((previous != null))
                    {
                        this._salesReturn.Entity = null;
                        previous.SalesReturnInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SalesReturnId = value.SalesReturnId;
                    }
                    else
                    {
                        this.SalesReturnId = default(long);
                    }
                    this._salesReturn.Entity = value;
                    if ((value != null))
                    {
                        value.SalesReturnInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("SalesReturn");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesReturnId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long SalesReturnId
        {
            get
            {
                return this._salesReturnId;
            }
            set
            {
                if ((this._salesReturnId != value))
                {
                    this.OnSalesReturnIdChanging(value);
                    this.RaiseDataMemberChanging("SalesReturnId");
                    this.ValidateProperty("SalesReturnId", value);
                    this._salesReturnId = value;
                    this.RaiseDataMemberChanged("SalesReturnId");
                    this.OnSalesReturnIdChanged();
                }
            }
        }
        
        private bool FilterBill(Bill entity)
        {
            return (entity.BillId == this.BillId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        private bool FilterSalesReturn(SalesReturn entity)
        {
            return (entity.SalesReturnId == this.SalesReturnId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._lotId == null))
            {
                return null;
            }
            return EntityKey.Create(this._billId, this._lotId, this._productId, this._salesReturnId);
        }
    }
    
    /// <summary>
    /// The 'TransportationLoss' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class TransportationLoss : Entity
    {
        
        private EntityRef<Bill> _bill;
        
        private long _billId;
        
        private bool _hasBalanced;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private double _quantity;
        
        private string _remarks;
        
        private double _totalPrice;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBillIdChanging(long value);
        partial void OnBillIdChanged();
        partial void OnHasBalancedChanging(bool value);
        partial void OnHasBalancedChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnQuantityChanging(double value);
        partial void OnQuantityChanged();
        partial void OnRemarksChanging(string value);
        partial void OnRemarksChanged();
        partial void OnTotalPriceChanging(double value);
        partial void OnTotalPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationLoss"/> class.
        /// </summary>
        public TransportationLoss()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Bill"/> entity.
        /// </summary>
        [Association("Bill_TransportationLoss", "BillId", "BillId", IsForeignKey=true)]
        [XmlIgnore()]
        public Bill Bill
        {
            get
            {
                if ((this._bill == null))
                {
                    this._bill = new EntityRef<Bill>(this, "Bill", this.FilterBill);
                }
                return this._bill.Entity;
            }
            set
            {
                Bill previous = this.Bill;
                if ((previous != value))
                {
                    this.ValidateProperty("Bill", value);
                    if ((previous != null))
                    {
                        this._bill.Entity = null;
                        previous.TransportationLosses.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BillId = value.BillId;
                    }
                    else
                    {
                        this.BillId = default(long);
                    }
                    this._bill.Entity = value;
                    if ((value != null))
                    {
                        value.TransportationLosses.Add(this);
                    }
                    this.RaisePropertyChanged("Bill");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long BillId
        {
            get
            {
                return this._billId;
            }
            set
            {
                if ((this._billId != value))
                {
                    this.OnBillIdChanging(value);
                    this.RaiseDataMemberChanging("BillId");
                    this.ValidateProperty("BillId", value);
                    this._billId = value;
                    this.RaiseDataMemberChanged("BillId");
                    this.OnBillIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HasBalanced' value.
        /// </summary>
        [DataMember()]
        public bool HasBalanced
        {
            get
            {
                return this._hasBalanced;
            }
            set
            {
                if ((this._hasBalanced != value))
                {
                    this.OnHasBalancedChanging(value);
                    this.RaiseDataMemberChanging("HasBalanced");
                    this.ValidateProperty("HasBalanced", value);
                    this._hasBalanced = value;
                    this.RaiseDataMemberChanged("HasBalanced");
                    this.OnHasBalancedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_TransportationLoss", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.TransportationLosses.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.TransportationLosses.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public double Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Remarks' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(80)]
        public string Remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                if ((this._remarks != value))
                {
                    this.OnRemarksChanging(value);
                    this.RaiseDataMemberChanging("Remarks");
                    this.ValidateProperty("Remarks", value);
                    this._remarks = value;
                    this.RaiseDataMemberChanged("Remarks");
                    this.OnRemarksChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalPrice' value.
        /// </summary>
        [DataMember()]
        public double TotalPrice
        {
            get
            {
                return this._totalPrice;
            }
            set
            {
                if ((this._totalPrice != value))
                {
                    this.OnTotalPriceChanging(value);
                    this.RaiseDataMemberChanging("TotalPrice");
                    this.ValidateProperty("TotalPrice", value);
                    this._totalPrice = value;
                    this.RaiseDataMemberChanged("TotalPrice");
                    this.OnTotalPriceChanged();
                }
            }
        }
        
        private bool FilterBill(Bill entity)
        {
            return (entity.BillId == this.BillId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._billId, this._productId);
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The 'YearSummaryDealer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class YearSummaryDealer : Entity
    {
        
        private double _closingBalance;
        
        private double _creditAmount;
        
        private EntityRef<Dealer> _dealer;
        
        private long _dealerId;
        
        private double _debitAmount;
        
        private double _openingBalance;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private double _productQuantity;
        
        private DateTime _seasonEnd;
        
        private DateTime _seasonStart;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClosingBalanceChanging(double value);
        partial void OnClosingBalanceChanged();
        partial void OnCreditAmountChanging(double value);
        partial void OnCreditAmountChanged();
        partial void OnDealerIdChanging(long value);
        partial void OnDealerIdChanged();
        partial void OnDebitAmountChanging(double value);
        partial void OnDebitAmountChanged();
        partial void OnOpeningBalanceChanging(double value);
        partial void OnOpeningBalanceChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnProductQuantityChanging(double value);
        partial void OnProductQuantityChanged();
        partial void OnSeasonEndChanging(DateTime value);
        partial void OnSeasonEndChanged();
        partial void OnSeasonStartChanging(DateTime value);
        partial void OnSeasonStartChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YearSummaryDealer"/> class.
        /// </summary>
        public YearSummaryDealer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClosingBalance' value.
        /// </summary>
        [DataMember()]
        public double ClosingBalance
        {
            get
            {
                return this._closingBalance;
            }
            set
            {
                if ((this._closingBalance != value))
                {
                    this.OnClosingBalanceChanging(value);
                    this.RaiseDataMemberChanging("ClosingBalance");
                    this.ValidateProperty("ClosingBalance", value);
                    this._closingBalance = value;
                    this.RaiseDataMemberChanged("ClosingBalance");
                    this.OnClosingBalanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreditAmount' value.
        /// </summary>
        [DataMember()]
        public double CreditAmount
        {
            get
            {
                return this._creditAmount;
            }
            set
            {
                if ((this._creditAmount != value))
                {
                    this.OnCreditAmountChanging(value);
                    this.RaiseDataMemberChanging("CreditAmount");
                    this.ValidateProperty("CreditAmount", value);
                    this._creditAmount = value;
                    this.RaiseDataMemberChanged("CreditAmount");
                    this.OnCreditAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Dealer"/> entity.
        /// </summary>
        [Association("Dealer_YearSummaryDealer", "DealerId", "DealerId", IsForeignKey=true)]
        [XmlIgnore()]
        public Dealer Dealer
        {
            get
            {
                if ((this._dealer == null))
                {
                    this._dealer = new EntityRef<Dealer>(this, "Dealer", this.FilterDealer);
                }
                return this._dealer.Entity;
            }
            set
            {
                Dealer previous = this.Dealer;
                if ((previous != value))
                {
                    this.ValidateProperty("Dealer", value);
                    if ((previous != null))
                    {
                        this._dealer.Entity = null;
                        previous.YearSummaryDealers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DealerId = value.DealerId;
                    }
                    else
                    {
                        this.DealerId = default(long);
                    }
                    this._dealer.Entity = value;
                    if ((value != null))
                    {
                        value.YearSummaryDealers.Add(this);
                    }
                    this.RaisePropertyChanged("Dealer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DealerId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long DealerId
        {
            get
            {
                return this._dealerId;
            }
            set
            {
                if ((this._dealerId != value))
                {
                    this.OnDealerIdChanging(value);
                    this.RaiseDataMemberChanging("DealerId");
                    this.ValidateProperty("DealerId", value);
                    this._dealerId = value;
                    this.RaiseDataMemberChanged("DealerId");
                    this.OnDealerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DebitAmount' value.
        /// </summary>
        [DataMember()]
        public double DebitAmount
        {
            get
            {
                return this._debitAmount;
            }
            set
            {
                if ((this._debitAmount != value))
                {
                    this.OnDebitAmountChanging(value);
                    this.RaiseDataMemberChanging("DebitAmount");
                    this.ValidateProperty("DebitAmount", value);
                    this._debitAmount = value;
                    this.RaiseDataMemberChanged("DebitAmount");
                    this.OnDebitAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpeningBalance' value.
        /// </summary>
        [DataMember()]
        public double OpeningBalance
        {
            get
            {
                return this._openingBalance;
            }
            set
            {
                if ((this._openingBalance != value))
                {
                    this.OnOpeningBalanceChanging(value);
                    this.RaiseDataMemberChanging("OpeningBalance");
                    this.ValidateProperty("OpeningBalance", value);
                    this._openingBalance = value;
                    this.RaiseDataMemberChanged("OpeningBalance");
                    this.OnOpeningBalanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_YearSummaryDealer", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.YearSummaryDealers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.YearSummaryDealers.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductQuantity' value.
        /// </summary>
        [DataMember()]
        public double ProductQuantity
        {
            get
            {
                return this._productQuantity;
            }
            set
            {
                if ((this._productQuantity != value))
                {
                    this.OnProductQuantityChanging(value);
                    this.RaiseDataMemberChanging("ProductQuantity");
                    this.ValidateProperty("ProductQuantity", value);
                    this._productQuantity = value;
                    this.RaiseDataMemberChanged("ProductQuantity");
                    this.OnProductQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SeasonEnd' value.
        /// </summary>
        [DataMember()]
        public DateTime SeasonEnd
        {
            get
            {
                return this._seasonEnd;
            }
            set
            {
                if ((this._seasonEnd != value))
                {
                    this.OnSeasonEndChanging(value);
                    this.RaiseDataMemberChanging("SeasonEnd");
                    this.ValidateProperty("SeasonEnd", value);
                    this._seasonEnd = value;
                    this.RaiseDataMemberChanged("SeasonEnd");
                    this.OnSeasonEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SeasonStart' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime SeasonStart
        {
            get
            {
                return this._seasonStart;
            }
            set
            {
                if ((this._seasonStart != value))
                {
                    this.OnSeasonStartChanging(value);
                    this.RaiseDataMemberChanging("SeasonStart");
                    this.ValidateProperty("SeasonStart", value);
                    this._seasonStart = value;
                    this.RaiseDataMemberChanged("SeasonStart");
                    this.OnSeasonStartChanged();
                }
            }
        }
        
        private bool FilterDealer(Dealer entity)
        {
            return (entity.DealerId == this.DealerId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._dealerId, this._productId, this._seasonStart);
        }
    }
    
    /// <summary>
    /// The 'YearSummaryInventoryPackage' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class YearSummaryInventoryPackage : Entity
    {
        
        private double _closingPackage;
        
        private EntityRef<Inventory> _inventory;
        
        private long _inventoryId;
        
        private double _lostAmount;
        
        private double _mrrInQuantity;
        
        private double _openingPackage;
        
        private EntityRef<Package> _package;
        
        private long _packageId;
        
        private double _packageUsedQuantity;
        
        private double _plrLostQuantity;
        
        private double _purchaseAmount;
        
        private DateTime _sessionEnd;
        
        private DateTime _sessionStart;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClosingPackageChanging(double value);
        partial void OnClosingPackageChanged();
        partial void OnInventoryIdChanging(long value);
        partial void OnInventoryIdChanged();
        partial void OnLostAmountChanging(double value);
        partial void OnLostAmountChanged();
        partial void OnMRRInQuantityChanging(double value);
        partial void OnMRRInQuantityChanged();
        partial void OnOpeningPackageChanging(double value);
        partial void OnOpeningPackageChanged();
        partial void OnPackageIdChanging(long value);
        partial void OnPackageIdChanged();
        partial void OnPackageUsedQuantityChanging(double value);
        partial void OnPackageUsedQuantityChanged();
        partial void OnPLRLostQuantityChanging(double value);
        partial void OnPLRLostQuantityChanged();
        partial void OnPurchaseAmountChanging(double value);
        partial void OnPurchaseAmountChanged();
        partial void OnSessionEndChanging(DateTime value);
        partial void OnSessionEndChanged();
        partial void OnSessionStartChanging(DateTime value);
        partial void OnSessionStartChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YearSummaryInventoryPackage"/> class.
        /// </summary>
        public YearSummaryInventoryPackage()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClosingPackage' value.
        /// </summary>
        [DataMember()]
        public double ClosingPackage
        {
            get
            {
                return this._closingPackage;
            }
            set
            {
                if ((this._closingPackage != value))
                {
                    this.OnClosingPackageChanging(value);
                    this.RaiseDataMemberChanging("ClosingPackage");
                    this.ValidateProperty("ClosingPackage", value);
                    this._closingPackage = value;
                    this.RaiseDataMemberChanged("ClosingPackage");
                    this.OnClosingPackageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Inventory"/> entity.
        /// </summary>
        [Association("Inventory_YearSummaryInventoryPackage", "InventoryId", "InventoryId", IsForeignKey=true)]
        [XmlIgnore()]
        public Inventory Inventory
        {
            get
            {
                if ((this._inventory == null))
                {
                    this._inventory = new EntityRef<Inventory>(this, "Inventory", this.FilterInventory);
                }
                return this._inventory.Entity;
            }
            set
            {
                Inventory previous = this.Inventory;
                if ((previous != value))
                {
                    this.ValidateProperty("Inventory", value);
                    if ((previous != null))
                    {
                        this._inventory.Entity = null;
                        previous.YearSummaryInventoryPackages.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.InventoryId = value.InventoryId;
                    }
                    else
                    {
                        this.InventoryId = default(long);
                    }
                    this._inventory.Entity = value;
                    if ((value != null))
                    {
                        value.YearSummaryInventoryPackages.Add(this);
                    }
                    this.RaisePropertyChanged("Inventory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long InventoryId
        {
            get
            {
                return this._inventoryId;
            }
            set
            {
                if ((this._inventoryId != value))
                {
                    this.OnInventoryIdChanging(value);
                    this.RaiseDataMemberChanging("InventoryId");
                    this.ValidateProperty("InventoryId", value);
                    this._inventoryId = value;
                    this.RaiseDataMemberChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LostAmount' value.
        /// </summary>
        [DataMember()]
        public double LostAmount
        {
            get
            {
                return this._lostAmount;
            }
            set
            {
                if ((this._lostAmount != value))
                {
                    this.OnLostAmountChanging(value);
                    this.RaiseDataMemberChanging("LostAmount");
                    this.ValidateProperty("LostAmount", value);
                    this._lostAmount = value;
                    this.RaiseDataMemberChanged("LostAmount");
                    this.OnLostAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MRRInQuantity' value.
        /// </summary>
        [DataMember()]
        public double MRRInQuantity
        {
            get
            {
                return this._mrrInQuantity;
            }
            set
            {
                if ((this._mrrInQuantity != value))
                {
                    this.OnMRRInQuantityChanging(value);
                    this.RaiseDataMemberChanging("MRRInQuantity");
                    this.ValidateProperty("MRRInQuantity", value);
                    this._mrrInQuantity = value;
                    this.RaiseDataMemberChanged("MRRInQuantity");
                    this.OnMRRInQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpeningPackage' value.
        /// </summary>
        [DataMember()]
        public double OpeningPackage
        {
            get
            {
                return this._openingPackage;
            }
            set
            {
                if ((this._openingPackage != value))
                {
                    this.OnOpeningPackageChanging(value);
                    this.RaiseDataMemberChanging("OpeningPackage");
                    this.ValidateProperty("OpeningPackage", value);
                    this._openingPackage = value;
                    this.RaiseDataMemberChanged("OpeningPackage");
                    this.OnOpeningPackageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Package"/> entity.
        /// </summary>
        [Association("Package_YearSummaryInventoryPackage", "PackageId", "PackageId", IsForeignKey=true)]
        [XmlIgnore()]
        public Package Package
        {
            get
            {
                if ((this._package == null))
                {
                    this._package = new EntityRef<Package>(this, "Package", this.FilterPackage);
                }
                return this._package.Entity;
            }
            set
            {
                Package previous = this.Package;
                if ((previous != value))
                {
                    this.ValidateProperty("Package", value);
                    if ((previous != null))
                    {
                        this._package.Entity = null;
                        previous.YearSummaryInventoryPackages.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PackageId = value.PackageId;
                    }
                    else
                    {
                        this.PackageId = default(long);
                    }
                    this._package.Entity = value;
                    if ((value != null))
                    {
                        value.YearSummaryInventoryPackages.Add(this);
                    }
                    this.RaisePropertyChanged("Package");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long PackageId
        {
            get
            {
                return this._packageId;
            }
            set
            {
                if ((this._packageId != value))
                {
                    this.OnPackageIdChanging(value);
                    this.RaiseDataMemberChanging("PackageId");
                    this.ValidateProperty("PackageId", value);
                    this._packageId = value;
                    this.RaiseDataMemberChanged("PackageId");
                    this.OnPackageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageUsedQuantity' value.
        /// </summary>
        [DataMember()]
        public double PackageUsedQuantity
        {
            get
            {
                return this._packageUsedQuantity;
            }
            set
            {
                if ((this._packageUsedQuantity != value))
                {
                    this.OnPackageUsedQuantityChanging(value);
                    this.RaiseDataMemberChanging("PackageUsedQuantity");
                    this.ValidateProperty("PackageUsedQuantity", value);
                    this._packageUsedQuantity = value;
                    this.RaiseDataMemberChanged("PackageUsedQuantity");
                    this.OnPackageUsedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PLRLostQuantity' value.
        /// </summary>
        [DataMember()]
        public double PLRLostQuantity
        {
            get
            {
                return this._plrLostQuantity;
            }
            set
            {
                if ((this._plrLostQuantity != value))
                {
                    this.OnPLRLostQuantityChanging(value);
                    this.RaiseDataMemberChanging("PLRLostQuantity");
                    this.ValidateProperty("PLRLostQuantity", value);
                    this._plrLostQuantity = value;
                    this.RaiseDataMemberChanged("PLRLostQuantity");
                    this.OnPLRLostQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchaseAmount' value.
        /// </summary>
        [DataMember()]
        public double PurchaseAmount
        {
            get
            {
                return this._purchaseAmount;
            }
            set
            {
                if ((this._purchaseAmount != value))
                {
                    this.OnPurchaseAmountChanging(value);
                    this.RaiseDataMemberChanging("PurchaseAmount");
                    this.ValidateProperty("PurchaseAmount", value);
                    this._purchaseAmount = value;
                    this.RaiseDataMemberChanged("PurchaseAmount");
                    this.OnPurchaseAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SessionEnd' value.
        /// </summary>
        [DataMember()]
        public DateTime SessionEnd
        {
            get
            {
                return this._sessionEnd;
            }
            set
            {
                if ((this._sessionEnd != value))
                {
                    this.OnSessionEndChanging(value);
                    this.RaiseDataMemberChanging("SessionEnd");
                    this.ValidateProperty("SessionEnd", value);
                    this._sessionEnd = value;
                    this.RaiseDataMemberChanged("SessionEnd");
                    this.OnSessionEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SessionStart' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime SessionStart
        {
            get
            {
                return this._sessionStart;
            }
            set
            {
                if ((this._sessionStart != value))
                {
                    this.OnSessionStartChanging(value);
                    this.RaiseDataMemberChanging("SessionStart");
                    this.ValidateProperty("SessionStart", value);
                    this._sessionStart = value;
                    this.RaiseDataMemberChanged("SessionStart");
                    this.OnSessionStartChanged();
                }
            }
        }
        
        private bool FilterInventory(Inventory entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private bool FilterPackage(Package entity)
        {
            return (entity.PackageId == this.PackageId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._inventoryId, this._packageId, this._sessionStart);
        }
    }
    
    /// <summary>
    /// The 'YearSummaryInventoryProduct' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class YearSummaryInventoryProduct : Entity
    {
        
        private double _closingProduct;
        
        private EntityRef<Inventory> _inventory;
        
        private long _inventoryId;
        
        private string _lotId;
        
        private double _mrrInQuantity;
        
        private double _openingProduct;
        
        private double _plrLostQuantity;
        
        private EntityRef<Product> _product;
        
        private long _productId;
        
        private double _productSellQuantity;
        
        private double _purchaseAmount;
        
        private DateTime _seasonEnd;
        
        private DateTime _seasonStart;
        
        private double _sellAmount;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClosingProductChanging(double value);
        partial void OnClosingProductChanged();
        partial void OnInventoryIdChanging(long value);
        partial void OnInventoryIdChanged();
        partial void OnLotIdChanging(string value);
        partial void OnLotIdChanged();
        partial void OnMRRInQuantityChanging(double value);
        partial void OnMRRInQuantityChanged();
        partial void OnOpeningProductChanging(double value);
        partial void OnOpeningProductChanged();
        partial void OnPLRLostQuantityChanging(double value);
        partial void OnPLRLostQuantityChanged();
        partial void OnProductIdChanging(long value);
        partial void OnProductIdChanged();
        partial void OnProductSellQuantityChanging(double value);
        partial void OnProductSellQuantityChanged();
        partial void OnPurchaseAmountChanging(double value);
        partial void OnPurchaseAmountChanged();
        partial void OnSeasonEndChanging(DateTime value);
        partial void OnSeasonEndChanged();
        partial void OnSeasonStartChanging(DateTime value);
        partial void OnSeasonStartChanged();
        partial void OnSellAmountChanging(double value);
        partial void OnSellAmountChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YearSummaryInventoryProduct"/> class.
        /// </summary>
        public YearSummaryInventoryProduct()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClosingProduct' value.
        /// </summary>
        [DataMember()]
        public double ClosingProduct
        {
            get
            {
                return this._closingProduct;
            }
            set
            {
                if ((this._closingProduct != value))
                {
                    this.OnClosingProductChanging(value);
                    this.RaiseDataMemberChanging("ClosingProduct");
                    this.ValidateProperty("ClosingProduct", value);
                    this._closingProduct = value;
                    this.RaiseDataMemberChanged("ClosingProduct");
                    this.OnClosingProductChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Inventory"/> entity.
        /// </summary>
        [Association("Inventory_YearSummaryInventoryProduct", "InventoryId", "InventoryId", IsForeignKey=true)]
        [XmlIgnore()]
        public Inventory Inventory
        {
            get
            {
                if ((this._inventory == null))
                {
                    this._inventory = new EntityRef<Inventory>(this, "Inventory", this.FilterInventory);
                }
                return this._inventory.Entity;
            }
            set
            {
                Inventory previous = this.Inventory;
                if ((previous != value))
                {
                    this.ValidateProperty("Inventory", value);
                    if ((previous != null))
                    {
                        this._inventory.Entity = null;
                        previous.YearSummaryInventoryProducts.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.InventoryId = value.InventoryId;
                    }
                    else
                    {
                        this.InventoryId = default(long);
                    }
                    this._inventory.Entity = value;
                    if ((value != null))
                    {
                        value.YearSummaryInventoryProducts.Add(this);
                    }
                    this.RaisePropertyChanged("Inventory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long InventoryId
        {
            get
            {
                return this._inventoryId;
            }
            set
            {
                if ((this._inventoryId != value))
                {
                    this.OnInventoryIdChanging(value);
                    this.RaiseDataMemberChanging("InventoryId");
                    this.ValidateProperty("InventoryId", value);
                    this._inventoryId = value;
                    this.RaiseDataMemberChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string LotId
        {
            get
            {
                return this._lotId;
            }
            set
            {
                if ((this._lotId != value))
                {
                    this.OnLotIdChanging(value);
                    this.RaiseDataMemberChanging("LotId");
                    this.ValidateProperty("LotId", value);
                    this._lotId = value;
                    this.RaiseDataMemberChanged("LotId");
                    this.OnLotIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MRRInQuantity' value.
        /// </summary>
        [DataMember()]
        public double MRRInQuantity
        {
            get
            {
                return this._mrrInQuantity;
            }
            set
            {
                if ((this._mrrInQuantity != value))
                {
                    this.OnMRRInQuantityChanging(value);
                    this.RaiseDataMemberChanging("MRRInQuantity");
                    this.ValidateProperty("MRRInQuantity", value);
                    this._mrrInQuantity = value;
                    this.RaiseDataMemberChanged("MRRInQuantity");
                    this.OnMRRInQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpeningProduct' value.
        /// </summary>
        [DataMember()]
        public double OpeningProduct
        {
            get
            {
                return this._openingProduct;
            }
            set
            {
                if ((this._openingProduct != value))
                {
                    this.OnOpeningProductChanging(value);
                    this.RaiseDataMemberChanging("OpeningProduct");
                    this.ValidateProperty("OpeningProduct", value);
                    this._openingProduct = value;
                    this.RaiseDataMemberChanged("OpeningProduct");
                    this.OnOpeningProductChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PLRLostQuantity' value.
        /// </summary>
        [DataMember()]
        public double PLRLostQuantity
        {
            get
            {
                return this._plrLostQuantity;
            }
            set
            {
                if ((this._plrLostQuantity != value))
                {
                    this.OnPLRLostQuantityChanging(value);
                    this.RaiseDataMemberChanging("PLRLostQuantity");
                    this.ValidateProperty("PLRLostQuantity", value);
                    this._plrLostQuantity = value;
                    this.RaiseDataMemberChanged("PLRLostQuantity");
                    this.OnPLRLostQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_YearSummaryInventoryProduct", "ProductId", "ProductId", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.YearSummaryInventoryProducts.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductId = value.ProductId;
                    }
                    else
                    {
                        this.ProductId = default(long);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.YearSummaryInventoryProducts.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.RaiseDataMemberChanging("ProductId");
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaiseDataMemberChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductSellQuantity' value.
        /// </summary>
        [DataMember()]
        public double ProductSellQuantity
        {
            get
            {
                return this._productSellQuantity;
            }
            set
            {
                if ((this._productSellQuantity != value))
                {
                    this.OnProductSellQuantityChanging(value);
                    this.RaiseDataMemberChanging("ProductSellQuantity");
                    this.ValidateProperty("ProductSellQuantity", value);
                    this._productSellQuantity = value;
                    this.RaiseDataMemberChanged("ProductSellQuantity");
                    this.OnProductSellQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchaseAmount' value.
        /// </summary>
        [DataMember()]
        public double PurchaseAmount
        {
            get
            {
                return this._purchaseAmount;
            }
            set
            {
                if ((this._purchaseAmount != value))
                {
                    this.OnPurchaseAmountChanging(value);
                    this.RaiseDataMemberChanging("PurchaseAmount");
                    this.ValidateProperty("PurchaseAmount", value);
                    this._purchaseAmount = value;
                    this.RaiseDataMemberChanged("PurchaseAmount");
                    this.OnPurchaseAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SeasonEnd' value.
        /// </summary>
        [DataMember()]
        public DateTime SeasonEnd
        {
            get
            {
                return this._seasonEnd;
            }
            set
            {
                if ((this._seasonEnd != value))
                {
                    this.OnSeasonEndChanging(value);
                    this.RaiseDataMemberChanging("SeasonEnd");
                    this.ValidateProperty("SeasonEnd", value);
                    this._seasonEnd = value;
                    this.RaiseDataMemberChanged("SeasonEnd");
                    this.OnSeasonEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SeasonStart' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime SeasonStart
        {
            get
            {
                return this._seasonStart;
            }
            set
            {
                if ((this._seasonStart != value))
                {
                    this.OnSeasonStartChanging(value);
                    this.RaiseDataMemberChanging("SeasonStart");
                    this.ValidateProperty("SeasonStart", value);
                    this._seasonStart = value;
                    this.RaiseDataMemberChanged("SeasonStart");
                    this.OnSeasonStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SellAmount' value.
        /// </summary>
        [DataMember()]
        public double SellAmount
        {
            get
            {
                return this._sellAmount;
            }
            set
            {
                if ((this._sellAmount != value))
                {
                    this.OnSellAmountChanging(value);
                    this.RaiseDataMemberChanging("SellAmount");
                    this.ValidateProperty("SellAmount", value);
                    this._sellAmount = value;
                    this.RaiseDataMemberChanged("SellAmount");
                    this.OnSellAmountChanged();
                }
            }
        }
        
        private bool FilterInventory(Inventory entity)
        {
            return (entity.InventoryId == this.InventoryId);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductId == this.ProductId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._lotId == null))
            {
                return null;
            }
            return EntityKey.Create(this._inventoryId, this._lotId, this._productId, this._seasonStart);
        }
    }
    
    /// <summary>
    /// The 'YearSummarySOExpenditure' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TrialBusinessManager.Web")]
    public sealed partial class YearSummarySOExpenditure : Entity
    {
        
        private EntityRef<Employee> _employee;
        
        private long _salesOfficerId;
        
        private DateTime _seasonEnd;
        
        private DateTime _seasonStart;
        
        private double _totalExpenditure;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnSalesOfficerIdChanging(long value);
        partial void OnSalesOfficerIdChanged();
        partial void OnSeasonEndChanging(DateTime value);
        partial void OnSeasonEndChanged();
        partial void OnSeasonStartChanging(DateTime value);
        partial void OnSeasonStartChanged();
        partial void OnTotalExpenditureChanging(double value);
        partial void OnTotalExpenditureChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YearSummarySOExpenditure"/> class.
        /// </summary>
        public YearSummarySOExpenditure()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_YearSummarySOExpenditure", "SalesOfficerId", "EmployeeId", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.YearSummarySOExpenditures.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SalesOfficerId = value.EmployeeId;
                    }
                    else
                    {
                        this.SalesOfficerId = default(long);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.YearSummarySOExpenditures.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesOfficerId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long SalesOfficerId
        {
            get
            {
                return this._salesOfficerId;
            }
            set
            {
                if ((this._salesOfficerId != value))
                {
                    this.OnSalesOfficerIdChanging(value);
                    this.RaiseDataMemberChanging("SalesOfficerId");
                    this.ValidateProperty("SalesOfficerId", value);
                    this._salesOfficerId = value;
                    this.RaiseDataMemberChanged("SalesOfficerId");
                    this.OnSalesOfficerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SeasonEnd' value.
        /// </summary>
        [DataMember()]
        public DateTime SeasonEnd
        {
            get
            {
                return this._seasonEnd;
            }
            set
            {
                if ((this._seasonEnd != value))
                {
                    this.OnSeasonEndChanging(value);
                    this.RaiseDataMemberChanging("SeasonEnd");
                    this.ValidateProperty("SeasonEnd", value);
                    this._seasonEnd = value;
                    this.RaiseDataMemberChanged("SeasonEnd");
                    this.OnSeasonEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SeasonStart' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime SeasonStart
        {
            get
            {
                return this._seasonStart;
            }
            set
            {
                if ((this._seasonStart != value))
                {
                    this.OnSeasonStartChanging(value);
                    this.RaiseDataMemberChanging("SeasonStart");
                    this.ValidateProperty("SeasonStart", value);
                    this._seasonStart = value;
                    this.RaiseDataMemberChanged("SeasonStart");
                    this.OnSeasonStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalExpenditure' value.
        /// </summary>
        [DataMember()]
        public double TotalExpenditure
        {
            get
            {
                return this._totalExpenditure;
            }
            set
            {
                if ((this._totalExpenditure != value))
                {
                    this.OnTotalExpenditureChanging(value);
                    this.RaiseDataMemberChanging("TotalExpenditure");
                    this.ValidateProperty("TotalExpenditure", value);
                    this._totalExpenditure = value;
                    this.RaiseDataMemberChanged("TotalExpenditure");
                    this.OnTotalExpenditureChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeId == this.SalesOfficerId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._salesOfficerId, this._seasonStart);
        }
    }
}
